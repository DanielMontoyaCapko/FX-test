{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Nakama&Partners - Financial Investment Platform\n\n## Overview\n\nNakama&Partners is a financial investment platform offering a 9% fixed annual return with capital protection through bank contracts. The application is built as a modern full-stack web application targeting conservative investors and financial advisors, emphasizing trust, legal structure, and capital protection.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite for fast development and optimized production builds\n- **UI Library**: Radix UI components with shadcn/ui styling system\n- **Styling**: Tailwind CSS with custom design system\n- **Typography**: Georgia for headings, Cormorant Garamond for branding, Inter for body text\n- **Color Scheme**: Navy blue (#001F3F), warm white backgrounds, gold accents (#DAA520)\n- **State Management**: TanStack Query for server state, React hooks for local state\n- **Routing**: Wouter for lightweight client-side routing\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect\n- **Database Provider**: Neon Database (serverless PostgreSQL)\n- **API Design**: RESTful endpoints with JSON communication\n- **Development**: Hot reload with Vite middleware integration\n\n### Key Components\n\n#### Database Schema\n- **Leads Table**: Stores potential customer information (name, email, phone, type, source)\n- **Calculator Results Table**: Stores investment simulation data with relationships to leads\n- **Data Validation**: Zod schemas for runtime type checking and validation\n\n#### API Endpoints\n- `POST /api/leads` - Lead capture and CRM integration\n- `POST /api/calculator-results` - Investment simulation storage\n- `POST /api/generate-pdf` - PDF generation for investment reports\n\n#### Frontend Sections\n- **Hero Section**: Video background with main value proposition\n- **Security Features**: Trust indicators and legal structure details\n- **Investment Strategy**: Portfolio composition and methodology\n- **Calculator Tool**: Interactive investment simulation\n- **Comparison Table**: Competitive analysis against traditional products\n- **Process Flow**: Step-by-step onboarding for different user types\n- **Downloads**: Document access with lead capture\n- **Advisor Portal**: Dedicated section for financial advisors\n- **Company Story**: Brand narrative and founder information\n\n## Data Flow\n\n1. **Lead Generation**: Users interact with forms across multiple sections\n2. **Data Validation**: Client and server-side validation using Zod schemas\n3. **Storage**: Lead and calculator data stored in PostgreSQL via Drizzle ORM\n4. **PDF Generation**: Investment simulations converted to downloadable reports\n5. **CRM Integration**: Lead data flows to external CRM systems\n\n## External Dependencies\n\n### Core Dependencies\n- **Database**: Neon Database (serverless PostgreSQL)\n- **UI Components**: Radix UI primitives\n- **Form Handling**: React Hook Form with Hookform Resolvers\n- **Date Manipulation**: date-fns library\n- **Styling**: Tailwind CSS with class-variance-authority\n\n### Planned Integrations\n- **Calendar Booking**: Calendly integration for appointment scheduling\n- **Document Signing**: DocuSign for legal document execution\n- **CRM System**: Customer relationship management integration\n- **Email Service**: Automated document delivery\n\n## Deployment Strategy\n\n### Development Environment\n- **Local Development**: Vite dev server with hot reload\n- **Database**: Environment variable configuration for DATABASE_URL\n- **Build Process**: TypeScript compilation with esbuild for server bundle\n\n### Production Deployment\n- **Frontend**: Static assets built and served from `/dist/public`\n- **Backend**: Node.js server bundle in `/dist/index.js`\n- **Database Migrations**: Drizzle Kit for schema management\n- **Environment**: Production configuration via NODE_ENV\n\n### Build Commands\n- `npm run dev` - Development server with hot reload\n- `npm run build` - Production build (frontend + backend)\n- `npm run start` - Production server\n- `npm run db:push` - Database schema deployment\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Authentication System\n\nThe platform now uses email/password authentication instead of the previous Replit Auth system:\n\n### Database Schema\n- **Users Table**: Stores user accounts with email, hashed password, name, and role (client/partner)\n- **Authentication**: JWT tokens with 7-day expiration stored in localStorage\n- **Password Security**: bcrypt hashing with salt rounds of 12\n\n### API Endpoints\n- `POST /api/register` - User registration with email, password, name, and role\n- `POST /api/login` - User authentication returning JWT token\n- `GET /api/me` - Protected route to get current user info\n\n### Frontend Authentication\n- `useAuth` hook provides login, register, logout functions and user state\n- `AuthProvider` context wrapper for authentication state management\n- Login page supports both login and registration with role selection (client/partner)\n\n### Demo Accounts for Testing\n**Client Account:**\n- Email: `cliente@nakama.com`\n- Password: `demo2025`\n- Role: Client\n- Name: Juan Cliente\n\n**Partner Account:**\n- Email: `partner@nakama.com`\n- Password: `demo2025`\n- Role: Partner\n- Name: Maria Partner\n\n**Admin Account:**\n- Email: `admin@nakama.com`\n- Password: `demo2025`\n- Role: Admin\n- Name: Administrador\n\nTo test the authentication system:\n1. Visit `/login` in your browser\n2. Use the credentials above to log in\n3. Test both login and registration functionality\n4. After login, users are redirected to `/dashboard`\n\n## Changelog\n\nChangelog:\n- August 28, 2025. Changed typography system: Replaced Playfair Display with Georgia for all headings and titles throughout the platform\n- July 16, 2025. Changed navigation button text from \"Asesores\" to \"Partners\" for brand consistency\n- July 15, 2025. Implemented automatic scroll to top when navigating between sections via menu\n- July 15, 2025. Updated comparison table to show \"Nakama&Partners\" instead of \"FundedXam Capital\"\n- July 15, 2025. Updated PDF generator to use \"Nakama&Partners\" branding instead of \"FUNDEDXAM CAPITAL\"\n- July 15, 2025. Enhanced opacity across platform: upgraded bg-black/30 elements to bg-black/70 for improved visibility\n- July 14, 2025. Implemented video background across all public pages (excludes advisor/login pages)\n- July 14, 2025. Updated logo to new \"NP\" PNG version with transparent background\n- July 14, 2025. Created VideoBackground component for consistent video display\n- July 14, 2025. Made video static (no loop) as requested by user\n- July 14, 2025. Optimized PDF generation with improved spacing and logo integration\n- July 09, 2025. Added comprehensive \"Asesor Financiero\" value proposition section to advisor dashboard\n- July 09, 2025. Updated advisor portal design with gradient backgrounds and #040505 colored boxes\n- July 14, 2025. Changed branding from \"FundedXam Capital\" to \"Nakama&Partners\" with Cormorant Garamond typography\n- July 09, 2025. Reorganized content structure for better user experience navigation\n- July 09, 2025. Successfully migrated from Replit Agent to standard Replit environment\n- July 09, 2025. Updated header with translucent background and SVG logo per user request\n- July 05, 2025. Initial setup","size_bytes":7392},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      fontFamily: {\n        'georgia': ['Georgia', 'Times New Roman', 'Times', 'serif'],\n        'inter': ['Inter', 'sans-serif'],\n        'cormorant': ['Cormorant Garamond', 'serif'],\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2821},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auditMiddleware.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport { db } from './db';\nimport { auditLogs, users } from '@shared/schema';\nimport { eq } from 'drizzle-orm';\nimport { AuthRequest } from './auth';\n\n// Extend Request type to include audit context\ndeclare global {\n  namespace Express {\n    interface Request {\n      auditContext?: {\n        entityId: string;\n        entityType: string;\n        action: string;\n        adminId?: number;\n      };\n    }\n  }\n}\n\n// Helper function to extract admin ID from authenticated request\nfunction extractAdminFromRequest(req: AuthRequest): number | null {\n  // req.user is populated by the authMiddleware that runs before this\n  if (req.user && req.user.role === 'admin') {\n    return req.user.id;\n  }\n  return null;\n}\n\n// Helper function to format entity for audit\nfunction formatEntityForAudit(entity: any): string {\n  try {\n    // Remove sensitive fields like passwords\n    const sanitized = { ...entity };\n    delete sanitized.password;\n    return JSON.stringify(sanitized);\n  } catch (error) {\n    return String(entity);\n  }\n}\n\n// Main audit middleware function\nexport function createAuditMiddleware(action: 'CREATE' | 'UPDATE' | 'DELETE' | 'REVIEW', entityType: string) {\n  return (req: AuthRequest, res: Response, next: NextFunction) => {\n    // Extract admin info early and store it in the request context\n    const adminId = extractAdminFromRequest(req);\n    \n    // Store audit context including admin info\n    req.auditContext = {\n      entityId: req.params.id || 'unknown',\n      entityType,\n      action,\n      adminId: adminId || undefined\n    };\n\n    // Store original res.json to intercept response\n    const originalJson = res.json;\n    \n    res.json = function(body: any) {\n      // Call the audit logging asynchronously without blocking the response\n      logAuditEntry(req, res, body, action, entityType).catch(error => {\n        console.error('[AUDIT] Error in async audit logging:', error);\n      });\n      \n      // Call original res.json\n      return originalJson.call(this, body);\n    };\n\n    next();\n  };\n}\n\n// Function to log audit entry\nasync function logAuditEntry(\n  req: AuthRequest, \n  res: Response, \n  responseBody: any, \n  action: 'CREATE' | 'UPDATE' | 'DELETE' | 'REVIEW',\n  entityType: string\n) {\n  try {\n    // Only log successful operations (2xx status codes)\n    if (res.statusCode < 200 || res.statusCode >= 300) {\n      return;\n    }\n\n    // Get admin ID from the context set during middleware initialization\n    const adminId = req.auditContext?.adminId;\n    if (!adminId) {\n      return; // Not an admin or invalid token\n    }\n\n    let entityId = '';\n    let oldValues = null;\n    let newValues = null;\n    let description = '';\n\n    // Extract entity ID and values based on action\n    if (action === 'CREATE') {\n      const created = responseBody?.success ? \n        (responseBody.product || responseBody.user || responseBody.kyc || responseBody.contract) : null;\n      if (created) {\n        entityId = String(created.id || created.userId || 'unknown');\n        newValues = formatEntityForAudit(created);\n        description = `Creó ${entityType} con ID ${entityId}`;\n      }\n    } else if (action === 'UPDATE' || action === 'REVIEW') {\n      entityId = req.params.id || 'unknown';\n      \n      // For KYC reviews, add specific details\n      if ((action === 'REVIEW' || entityType === 'kyc') && req.body.status) {\n        const status = req.body.status;\n        const reason = req.body.rejectionReason;\n        description = `Revisó KYC ID ${entityId} - Estado: ${status}`;\n        if (reason) {\n          description += ` - Motivo: ${reason}`;\n        }\n      } else {\n        description = `Actualizó ${entityType} con ID ${entityId}`;\n      }\n      \n      const updated = responseBody?.success ? \n        (responseBody.product || responseBody.user || responseBody.kyc || responseBody.contract) : null;\n      if (updated) {\n        newValues = formatEntityForAudit(updated);\n      }\n      \n      // For request body changes\n      if (req.body && Object.keys(req.body).length > 0) {\n        newValues = formatEntityForAudit(req.body);\n      }\n      \n    } else if (action === 'DELETE') {\n      entityId = req.params.id || 'unknown';\n      description = `Eliminó ${entityType} con ID ${entityId}`;\n    }\n\n    // Get client info\n    const ipAddress = req.ip || req.connection.remoteAddress || '';\n    const userAgent = req.get('User-Agent') || '';\n\n    // Insert audit log\n    await db.insert(auditLogs).values({\n      adminId,\n      action,\n      entityType,\n      entityId,\n      oldValues,\n      newValues,\n      description,\n      ipAddress,\n      userAgent\n    });;\n\n  } catch (error) {\n    console.error('[AUDIT] Error logging audit entry:', error);\n    console.error('[AUDIT] Error stack:', error.stack);\n    // Don't throw error to avoid breaking the main operation\n  }\n}\n\n// Export named imports for specific entity types\nexport const auditUser = {\n  create: createAuditMiddleware('CREATE', 'users'),\n  update: createAuditMiddleware('UPDATE', 'users'),\n  delete: createAuditMiddleware('DELETE', 'users')\n};\n\nexport const auditKyc = {\n  create: createAuditMiddleware('CREATE', 'kyc'),\n  update: createAuditMiddleware('REVIEW', 'kyc'),\n  delete: createAuditMiddleware('DELETE', 'kyc')\n};\n\nexport const auditProduct = {\n  create: createAuditMiddleware('CREATE', 'products'),\n  update: createAuditMiddleware('UPDATE', 'products'),\n  delete: createAuditMiddleware('DELETE', 'products')\n};\n\nexport const auditContract = {\n  create: createAuditMiddleware('CREATE', 'contracts'),\n  update: createAuditMiddleware('UPDATE', 'contracts'),\n  delete: createAuditMiddleware('DELETE', 'contracts')\n};\n\n// Extend Request interface to include audit context\ndeclare global {\n  namespace Express {\n    interface Request {\n      auditContext?: {\n        entityId: string;\n        entityType: string;\n        action: string;\n        oldValues?: any;\n      };\n    }\n  }\n}","size_bytes":5955},"server/auth.ts":{"content":"import jwt from \"jsonwebtoken\";\nimport { Request, Response, NextFunction } from \"express\";\nimport { storage } from \"./storage\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-super-secret-jwt-key-change-in-production\";\n\nexport interface AuthRequest extends Request {\n  user?: {\n    id: number;\n    email: string;\n    name: string;\n    role: string;\n  };\n}\n\nexport function generateToken(userId: number, email: string, name: string, role: string): string {\n  return jwt.sign(\n    { id: userId, email, name, role },\n    JWT_SECRET,\n    { expiresIn: \"7d\" }\n  );\n}\n\nexport function verifyToken(token: string): any {\n  try {\n    return jwt.verify(token, JWT_SECRET);\n  } catch (error) {\n    return null;\n  }\n}\n\nexport async function authMiddleware(req: AuthRequest, res: Response, next: NextFunction) {\n  const authHeader = req.headers.authorization;\n  const token = authHeader && authHeader.split(\" \")[1]; // Bearer TOKEN\n\n  if (!token) {\n    return res.status(401).json({ error: \"Access token required\" });\n  }\n\n  const decoded = verifyToken(token);\n  if (!decoded) {\n    return res.status(401).json({ error: \"Invalid or expired token\" });\n  }\n\n  // Verify user still exists in database\n  const user = await storage.getUserById(decoded.id);\n  if (!user) {\n    return res.status(401).json({ error: \"User not found\" });\n  }\n\n  req.user = {\n    id: user.id,\n    email: user.email,\n    name: user.name,\n    apellidos: user.apellidos,\n    telefono: user.telefono,\n    fechaNacimiento: user.fechaNacimiento,\n    pais: user.pais,\n    direccion: user.direccion,\n    role: user.role,\n  };\n\n  next();\n}\n\nexport function requireRole(role: string) {\n  return (req: AuthRequest, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({ error: \"Authentication required\" });\n    }\n\n    if (req.user.role !== role) {\n      return res.status(403).json({ error: \"Insufficient permissions\" });\n    }\n\n    next();\n  };\n}","size_bytes":1942},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(filename: string): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = `${randomUUID()}_${filename}`;\n    const fullPath = `${privateObjectDir}/kyc/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      \n      // Detect content type from file extension if metadata doesn't have it\n      const filename = metadata.name?.split('/').pop() || 'documento';\n      let contentType = metadata.contentType;\n      \n      if (!contentType || contentType === 'application/octet-stream') {\n        const ext = filename.split('.').pop()?.toLowerCase();\n        switch (ext) {\n          case 'pdf':\n            contentType = 'application/pdf';\n            break;\n          case 'jpg':\n          case 'jpeg':\n            contentType = 'image/jpeg';\n            break;\n          case 'png':\n            contentType = 'image/png';\n            break;\n          case 'gif':\n            contentType = 'image/gif';\n            break;\n          case 'txt':\n            contentType = 'text/plain';\n            break;\n          default:\n            contentType = 'application/octet-stream';\n        }\n      }\n      \n      // Set appropriate headers - use inline for images/PDFs to view in browser\n      const isViewable = contentType.startsWith('image/') || contentType === 'application/pdf';\n      const disposition = isViewable ? 'inline' : 'attachment';\n      \n      res.set({\n        \"Content-Type\": contentType,\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `private, max-age=${cacheTtlSec}`,\n        \"Content-Disposition\": `${disposition}; filename=\"${filename}\"`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  normalizeObjectEntityPath(rawPath: string): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":7099},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertLeadSchema, insertCalculatorResultSchema, loginSchema, registerSchema, insertKycSchema, updateKycSchema } from \"@shared/schema\";\nimport { generateToken, authMiddleware, requireRole, type AuthRequest } from \"./auth\";\nimport { auditUser, auditKyc, auditProduct, auditContract } from \"./auditMiddleware\";\nimport { z } from \"zod\";\nimport express from \"express\";\nimport path from \"path\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication routes\n  app.post(\"/api/register\", async (req, res) => {\n    try {\n      const userData = registerSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ error: \"User already exists with this email\" });\n      }\n\n      const user = await storage.createUser(userData);\n      const token = generateToken(user.id, user.email, user.name, user.role);\n\n      res.json({\n        success: true,\n        token,\n        user: {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n          role: user.role,\n        },\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid registration data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Registration failed\" });\n    }\n  });\n\n  app.post(\"/api/login\", async (req, res) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ error: \"Invalid email or password\" });\n      }\n\n      const isValidPassword = await storage.validatePassword(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ error: \"Invalid email or password\" });\n      }\n\n      const token = generateToken(user.id, user.email, user.name, user.role);\n\n      res.json({\n        success: true,\n        token,\n        user: {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n          role: user.role,\n        },\n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid login data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Login failed\" });\n    }\n  });\n\n  // Get current user info (protected route)\n  app.get(\"/api/me\", authMiddleware, async (req: AuthRequest, res) => {\n    res.json({\n      success: true,\n      user: req.user,\n    });\n  });\n\n  // Update user profile (protected route)\n  app.put(\"/api/me/profile\", authMiddleware, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const { nombre, apellidos, telefono, fechaNacimiento, pais, direccion } = req.body;\n      \n      console.log(\"Profile update request:\", { userId, body: req.body });\n      \n      // Update user profile\n      const updatedUser = await storage.updateUser(userId, {\n        name: nombre,\n        apellidos,\n        telefono,\n        fechaNacimiento,\n        pais,\n        direccion,\n      });\n\n      console.log(\"Profile updated successfully:\", updatedUser);\n\n      // Log activity to client_activity_logs\n      await storage.logClientActivity(userId, 'Perfil actualizado');\n\n      res.json({\n        success: true,\n        user: updatedUser,\n      });\n    } catch (error) {\n      console.error(\"Profile update error:\", error);\n      res.status(500).json({ error: \"Failed to update profile\" });\n    }\n  });\n\n  // KYC routes\n  // Get upload URL for KYC documents\n  app.post(\"/api/kyc/upload-url\", authMiddleware, async (req: AuthRequest, res) => {\n    try {\n      const { filename } = req.body;\n      \n      if (!filename || typeof filename !== 'string') {\n        return res.status(400).json({ error: \"Filename is required\" });\n      }\n\n      const { ObjectStorageService } = await import(\"./objectStorage\");\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL(filename);\n      \n      res.json({ uploadURL });\n    } catch (error) {\n      console.error('Error getting upload URL:', error);\n      res.status(500).json({ error: \"Failed to get upload URL\" });\n    }\n  });\n\n  // General endpoint for downloading any protected object (no auth for direct access)\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    try {\n      const objectPath = `/objects/${req.params.objectPath}`;\n      console.log('Download request for path:', objectPath);\n      \n      const { ObjectStorageService, ObjectNotFoundError } = await import(\"./objectStorage\");\n      const objectStorageService = new ObjectStorageService();\n      \n      try {\n        const objectFile = await objectStorageService.getObjectEntityFile(objectPath);\n        console.log('File found, downloading:', objectFile.name);\n        \n        // Basic ACL: Users can only access KYC files (for now, simple implementation)\n        // TODO: Implement proper ACL based on file metadata\n        \n        await objectStorageService.downloadObject(objectFile, res);\n      } catch (error) {\n        if (error instanceof ObjectNotFoundError) {\n          return res.status(404).json({ error: \"Document not found\" });\n        }\n        throw error;\n      }\n    } catch (error) {\n      console.error('Error downloading document:', error);\n      res.status(500).json({ error: \"Failed to download document\" });\n    }\n  });\n\n  // General download endpoint for URL parameters \n  app.get(\"/api/download-document\", authMiddleware, async (req: AuthRequest, res) => {\n    try {\n      const { url } = req.query;\n      \n      if (!url || typeof url !== 'string') {\n        return res.status(400).json({ error: \"URL parameter is required\" });\n      }\n      \n      // Extract the object path from the URL\n      // URL format: /objects/kyc/some-file.pdf or full URL\n      let objectPath = url;\n      \n      if (url.startsWith('http')) {\n        // If it's a full URL, extract the path\n        const urlObj = new URL(url);\n        objectPath = urlObj.pathname;\n      }\n      \n      if (!objectPath.startsWith('/objects/')) {\n        return res.status(400).json({ error: \"Invalid document URL\" });\n      }\n      \n      const { ObjectStorageService, ObjectNotFoundError } = await import(\"./objectStorage\");\n      const objectStorageService = new ObjectStorageService();\n      \n      try {\n        const objectFile = await objectStorageService.getObjectEntityFile(objectPath);\n        await objectStorageService.downloadObject(objectFile, res);\n      } catch (error) {\n        if (error instanceof ObjectNotFoundError) {\n          return res.status(404).json({ error: \"Document not found\" });\n        }\n        throw error;\n      }\n    } catch (error) {\n      console.error('Error downloading document:', error);\n      res.status(500).json({ error: \"Failed to download document\" });\n    }\n  });\n\n  // Download KYC document endpoint (deprecated - kept for backwards compatibility)\n  app.get(\"/api/kyc/download/:objectPath\", authMiddleware, async (req: AuthRequest, res) => {\n    try {\n      const objectPath = `/objects/${req.params.objectPath}`;\n      \n      const { ObjectStorageService, ObjectNotFoundError } = await import(\"./objectStorage\");\n      const objectStorageService = new ObjectStorageService();\n      \n      try {\n        const objectFile = await objectStorageService.getObjectEntityFile(objectPath);\n        await objectStorageService.downloadObject(objectFile, res);\n      } catch (error) {\n        if (error instanceof ObjectNotFoundError) {\n          return res.status(404).json({ error: \"Document not found\" });\n        }\n        throw error;\n      }\n    } catch (error) {\n      console.error('Error downloading document:', error);\n      res.status(500).json({ error: \"Failed to download document\" });\n    }\n  });\n\n  app.post(\"/api/kyc\", authMiddleware, async (req: AuthRequest, res) => {\n    try {\n      const kycData = insertKycSchema.parse({\n        ...req.body,\n        userId: req.user!.id,\n      });\n      \n      // Check if user already has KYC record\n      const existingKyc = await storage.getKycByUserId(req.user!.id);\n      \n      if (existingKyc) {\n        // Update existing record (reset review status)\n        const updates = {\n          ...kycData,\n          status: \"pending\",\n          rejectionReason: null,\n          reviewedBy: null,\n          reviewedAt: null,\n        };\n        \n        const kyc = await storage.updateKyc(existingKyc.id, updates);\n        res.json({ success: true, kyc });\n      } else {\n        // Create new record\n        const kyc = await storage.createKyc(kycData);\n        res.json({ success: true, kyc });\n      }\n    } catch (error) {\n      console.error(\"Error creating/updating KYC:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid KYC data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to process KYC data\" });\n    }\n  });\n\n  app.get(\"/api/kyc/me\", authMiddleware, async (req: AuthRequest, res) => {\n    try {\n      const kyc = await storage.getKycByUserId(req.user!.id);\n      res.json({ success: true, kyc });\n    } catch (error) {\n      console.error(\"Error fetching user KYC:\", error);\n      res.status(500).json({ error: \"Failed to fetch KYC data\" });\n    }\n  });\n\n  app.put(\"/api/kyc/me\", authMiddleware, async (req: AuthRequest, res) => {\n    try {\n      const existingKyc = await storage.getKycByUserId(req.user!.id);\n      if (!existingKyc) {\n        return res.status(404).json({ error: \"KYC record not found\" });\n      }\n\n      const updates = {\n        ...req.body,\n        status: \"pending\", // Reset to pending when user updates\n        rejectionReason: null,\n        reviewedBy: null,\n        reviewedAt: null,\n      };\n      \n      const kyc = await storage.updateKyc(existingKyc.id, updates);\n      res.json({ success: true, kyc });\n    } catch (error) {\n      console.error(\"Error updating KYC:\", error);\n      res.status(500).json({ error: \"Failed to update KYC\" });\n    }\n  });\n  // Lead creation endpoint\n  app.post(\"/api/leads\", async (req, res) => {\n    try {\n      const leadData = insertLeadSchema.parse(req.body);\n      const lead = await storage.createLead(leadData);\n      res.json({ success: true, leadId: lead.id });\n    } catch (error) {\n      console.error(\"Error creating lead:\", error);\n      res.status(400).json({ success: false, error: \"Invalid lead data\" });\n    }\n  });\n\n  // Calculator result endpoint\n  app.post(\"/api/calculator-results\", async (req, res) => {\n    try {\n      const resultData = insertCalculatorResultSchema.parse(req.body);\n      const result = await storage.createCalculatorResult(resultData);\n      res.json({ success: true, resultId: result.id });\n    } catch (error) {\n      console.error(\"Error saving calculator result:\", error);\n      res.status(400).json({ success: false, error: \"Invalid calculator data\" });\n    }\n  });\n\n  // PDF generation endpoint for calculator results\n  app.post(\"/api/generate-pdf\", async (req, res) => {\n    try {\n      const { amount, years, compoundInterest, finalAmount, interestGenerated } = req.body;\n      \n      // In a real implementation, you would use a PDF library like puppeteer or jsPDF\n      // For now, we'll return a mock PDF URL\n      const pdfData = {\n        filename: `investment-simulation-${Date.now()}.pdf`,\n        url: `/api/download-pdf/${Date.now()}`, // Mock URL\n        data: {\n          amount,\n          years,\n          compoundInterest,\n          finalAmount,\n          interestGenerated,\n          generatedAt: new Date().toISOString()\n        }\n      };\n      \n      res.json({ success: true, pdf: pdfData });\n    } catch (error) {\n      console.error(\"Error generating PDF:\", error);\n      res.status(500).json({ success: false, error: \"Failed to generate PDF\" });\n    }\n  });\n\n  // Email notification endpoint for lead magnets\n  app.post(\"/api/send-documents\", async (req, res) => {\n    try {\n      const { leadId, email } = req.body;\n      \n      // In a real implementation, you would integrate with email service\n      console.log(`Sending documents to ${email} for lead ${leadId}`);\n      \n      res.json({ success: true, message: \"Documents sent successfully\" });\n    } catch (error) {\n      console.error(\"Error sending documents:\", error);\n      res.status(500).json({ success: false, error: \"Failed to send documents\" });\n    }\n  });\n\n  // Admin routes (require admin role)\n  app.get(\"/api/admin/users\", authMiddleware, requireRole('admin'), async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json({ success: true, users });\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ error: \"Failed to fetch users\" });\n    }\n  });\n\n  app.get(\"/api/admin/kyc\", authMiddleware, requireRole('admin'), async (req, res) => {\n    try {\n      const kyc = await storage.getAllKyc();\n      res.json({ success: true, kyc });\n    } catch (error) {\n      console.error(\"Error fetching KYC:\", error);\n      res.status(500).json({ error: \"Failed to fetch KYC records\" });\n    }\n  });\n\n  app.get(\"/api/admin/products\", authMiddleware, requireRole('admin'), async (req, res) => {\n    try {\n      const products = await storage.getAllProducts();\n      res.json({ success: true, products });\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ error: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/admin/contracts\", authMiddleware, requireRole('admin'), async (req, res) => {\n    try {\n      const contracts = await storage.getAllContracts();\n      res.json({ success: true, contracts });\n    } catch (error) {\n      console.error(\"Error fetching contracts:\", error);\n      res.status(500).json({ error: \"Failed to fetch contracts\" });\n    }\n  });\n\n  app.post(\"/api/admin/products\", authMiddleware, requireRole('admin'), auditProduct.create, async (req, res) => {\n    try {\n      const productData = req.body;\n      const product = await storage.createProduct(productData);\n      res.json({ success: true, product });\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      res.status(500).json({ error: \"Failed to create product\" });\n    }\n  });\n\n  // Create user (admin only)\n  app.post('/api/admin/users', authMiddleware, requireRole('admin'), auditUser.create, async (req, res) => {\n    try {\n      const userData = registerSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ error: \"User already exists with this email\" });\n      }\n\n      const user = await storage.createUser(userData);\n      res.json({ success: true, user });\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid user data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create user\" });\n    }\n  });\n\n  // Update user\n  app.put('/api/admin/users/:id', authMiddleware, requireRole('admin'), auditUser.update, async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const updates = req.body;\n      \n      // Don't allow updating ID\n      delete updates.id;\n      \n      const user = await storage.updateUser(userId, updates);\n      res.json({ success: true, user });\n    } catch (error) {\n      console.error('Error updating user:', error);\n      res.status(500).json({ error: 'Failed to update user' });\n    }\n  });\n\n  // Delete user\n  app.delete('/api/admin/users/:id', authMiddleware, requireRole('admin'), auditUser.delete, async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      await storage.deleteUser(userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      res.status(500).json({ error: 'Failed to delete user' });\n    }\n  });\n\n  // Update product\n  app.put('/api/admin/products/:id', authMiddleware, requireRole('admin'), auditProduct.update, async (req, res) => {\n    try {\n      const productId = parseInt(req.params.id);\n      const updates = req.body;\n      \n      // Don't allow updating ID\n      delete updates.id;\n      \n      const product = await storage.updateProduct(productId, updates);\n      res.json({ success: true, product });\n    } catch (error) {\n      console.error('Error updating product:', error);\n      res.status(500).json({ error: 'Failed to update product' });\n    }\n  });\n\n  // Delete product\n  app.delete('/api/admin/products/:id', authMiddleware, requireRole('admin'), auditProduct.delete, async (req, res) => {\n    try {\n      const productId = parseInt(req.params.id);\n      await storage.deleteProduct(productId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Error deleting product:', error);\n      res.status(500).json({ error: 'Failed to delete product' });\n    }\n  });\n\n  // Update KYC status (admin review)\n  app.put('/api/admin/kyc/:id', authMiddleware, requireRole('admin'), auditKyc.update, async (req: AuthRequest, res) => {\n    try {\n      const kycId = parseInt(req.params.id);\n      const updateData = updateKycSchema.parse(req.body);\n      \n      const updates = {\n        ...updateData,\n        reviewedBy: req.user!.id,\n        reviewedAt: new Date(),\n      };\n      \n      const kyc = await storage.updateKyc(kycId, updates);\n      \n      // Log specific activity based on status change\n      if (updateData.status) {\n        let activityMessage = '';\n        if (updateData.status === 'approved') {\n          activityMessage = 'Verificación KYC completada';\n        } else if (updateData.status === 'rejected') {\n          activityMessage = 'Verificación KYC rechazada';\n        }\n        \n        if (activityMessage) {\n          // Log activity for the client whose KYC was updated\n          await storage.logClientActivity(kyc.userId, activityMessage);\n        }\n      }\n      \n      res.json({ success: true, kyc });\n    } catch (error) {\n      console.error('Error updating KYC status:', error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Invalid update data\", details: error.errors });\n      }\n      res.status(500).json({ error: 'Failed to update KYC status' });\n    }\n  });\n\n  // Update contract status\n  app.put('/api/admin/contracts/:id', authMiddleware, requireRole('admin'), auditContract.update, async (req, res) => {\n    try {\n      const contractId = parseInt(req.params.id);\n      const { status } = req.body;\n      \n      const contract = await storage.updateContractStatus(contractId, status);\n      res.json({ success: true, contract });\n    } catch (error) {\n      console.error('Error updating contract status:', error);\n      res.status(500).json({ error: 'Failed to update contract status' });\n    }\n  });\n\n  // Audit logs routes\n  app.get('/api/admin/audit-logs', authMiddleware, requireRole('admin'), async (req, res) => {\n    try {\n      const logs = await storage.getAuditLogs();\n      res.json({ success: true, logs });\n    } catch (error) {\n      console.error('Error fetching audit logs:', error);\n      res.status(500).json({ error: 'Failed to fetch audit logs' });\n    }\n  });\n\n  // Financial KPIs endpoint\n  app.get('/api/admin/financial-kpis', authMiddleware, requireRole('admin'), async (req, res) => {\n    try {\n      const kpis = await storage.getFinancialKPIs();\n      res.json({ success: true, kpis });\n    } catch (error) {\n      console.error('Error fetching financial KPIs:', error);\n      res.status(500).json({ error: 'Failed to fetch financial KPIs' });\n    }\n  });\n\n  // Get user profile data endpoint (for admin viewing client/partner profiles)\n  app.get('/api/admin/user-profile/:userId', authMiddleware, requireRole('admin'), async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      const user = await storage.getUserById(userId);\n      \n      if (!user) {\n        return res.status(404).json({ error: 'User not found' });\n      }\n\n      // For admin users, return limited info\n      if (user.role === 'admin') {\n        return res.status(403).json({ error: 'Cannot view admin profiles' });\n      }\n\n      // Get additional profile data based on user role\n      let profileData = {\n        id: user.id,\n        name: user.name,\n        email: user.email,\n        role: user.role,\n        grade: user.grade,\n        sponsor: user.sponsor,\n        verificationStatus: user.verificationStatus,\n        createdAt: user.createdAt,\n      };\n\n      // Add KYC data if available\n      try {\n        const kyc = await storage.getKycByUserId(userId);\n        if (kyc) {\n          profileData = {\n            ...profileData,\n            fullName: kyc.fullName,\n            documentType: kyc.documentType,\n            documentNumber: kyc.documentNumber,\n            country: kyc.country,\n            kycStatus: kyc.status,\n            kycCreatedAt: kyc.createdAt,\n          };\n        }\n      } catch (kycError) {\n        // KYC data is optional\n        console.log('KYC data not found for user:', userId);\n      }\n\n      res.json({ success: true, profile: profileData });\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      res.status(500).json({ error: 'Failed to fetch user profile' });\n    }\n  });\n\n  // Client activity logs routes\n  app.get('/api/client/activity-logs', authMiddleware, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const logs = await storage.getClientActivityLogsByUserId(userId);\n      res.json({ success: true, logs });\n    } catch (error) {\n      console.error('Error fetching client activity logs:', error);\n      res.status(500).json({ error: 'Failed to fetch client activity logs' });\n    }\n  });\n\n  app.post('/api/client/activity-logs', authMiddleware, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const { action } = req.body;\n      \n      const activityData = {\n        userId,\n        action,\n      };\n      \n      const log = await storage.createClientActivityLog(activityData);\n      res.json({ success: true, log });\n    } catch (error) {\n      console.error('Error creating client activity log:', error);\n      res.status(500).json({ error: 'Failed to create client activity log' });\n    }\n  });\n\n  // Serve static files from attached_assets\n  app.use('/attached_assets', express.static(path.join(process.cwd(), 'attached_assets')));\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":23037},"server/storage.ts":{"content":"import { leads, calculatorResults, users, kyc, products, contracts, auditLogs, clientActivityLogs, type Lead, type InsertLead, type CalculatorResult, type InsertCalculatorResult, type User, type InsertUser, type Kyc, type InsertKyc, type Product, type InsertProduct, type Contract, type InsertContract, type AuditLog, type ClientActivityLog, type InsertClientActivityLog } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, gte, lte, and } from \"drizzle-orm\";\nimport bcrypt from \"bcryptjs\";\n\nexport interface IStorage {\n  createLead(lead: InsertLead): Promise<Lead>;\n  getLeadById(id: number): Promise<Lead | undefined>;\n  createCalculatorResult(result: InsertCalculatorResult): Promise<CalculatorResult>;\n  \n  // User authentication methods\n  createUser(userData: InsertUser): Promise<User>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserById(id: number): Promise<User | undefined>;\n  validatePassword(plainPassword: string, hashedPassword: string): Promise<boolean>;\n  \n  // KYC methods\n  createKyc(kycData: InsertKyc): Promise<Kyc>;\n  getKycByUserId(userId: number): Promise<Kyc | undefined>;\n  updateKyc(kycId: number, updates: any): Promise<Kyc>;\n  \n  // Admin methods\n  getAllUsers(): Promise<User[]>;\n  getAllKyc(): Promise<any[]>;\n  getAllProducts(): Promise<Product[]>;\n  getAllContracts(): Promise<any[]>;\n  createProduct(productData: InsertProduct): Promise<Product>;\n  updateUser(userId: number, updates: any): Promise<User>;\n  deleteUser(userId: number): Promise<void>;\n  updateProduct(productId: number, updates: any): Promise<Product>;\n  deleteProduct(productId: number): Promise<void>;\n  updateContractStatus(contractId: number, status: string): Promise<Contract>;\n  \n  // Audit logs\n  getAuditLogs(): Promise<any[]>;\n  \n  // Client activity logs\n  createClientActivityLog(activityData: InsertClientActivityLog): Promise<ClientActivityLog>;\n  getClientActivityLogsByUserId(userId: number): Promise<ClientActivityLog[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async createLead(insertLead: InsertLead): Promise<Lead> {\n    const [lead] = await db.insert(leads).values(insertLead).returning();\n    return lead;\n  }\n\n  async getLeadById(id: number): Promise<Lead | undefined> {\n    const [lead] = await db.select().from(leads).where(eq(leads.id, id));\n    return lead;\n  }\n\n  async createCalculatorResult(insertResult: InsertCalculatorResult): Promise<CalculatorResult> {\n    const [result] = await db.insert(calculatorResults).values(insertResult).returning();\n    return result;\n  }\n\n  // User authentication methods\n  async createUser(userData: InsertUser): Promise<User> {\n    // Hash password before storing\n    const hashedPassword = await bcrypt.hash(userData.password, 12);\n    const userToInsert = {\n      ...userData,\n      password: hashedPassword,\n    };\n    \n    const [user] = await db.insert(users).values(userToInsert).returning();\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async getUserById(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async validatePassword(plainPassword: string, hashedPassword: string): Promise<boolean> {\n    return bcrypt.compare(plainPassword, hashedPassword);\n  }\n\n  // KYC methods\n  async createKyc(kycData: InsertKyc): Promise<Kyc> {\n    const [kycRecord] = await db.insert(kyc).values(kycData).returning();\n    return kycRecord;\n  }\n\n  async getKycByUserId(userId: number): Promise<Kyc | undefined> {\n    const [kycRecord] = await db.select().from(kyc).where(eq(kyc.userId, userId));\n    return kycRecord;\n  }\n\n  async updateKyc(kycId: number, updates: any): Promise<Kyc> {\n    const [updated] = await db\n      .update(kyc)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(kyc.id, kycId))\n      .returning();\n    return updated;\n  }\n\n  // Admin methods\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async getAllKyc(): Promise<any[]> {\n    const result = await db\n      .select({\n        id: kyc.id,\n        userId: kyc.userId,\n        userName: users.name,\n        userEmail: users.email,\n        fullName: kyc.fullName,\n        documentType: kyc.documentType,\n        documentNumber: kyc.documentNumber,\n        country: kyc.country,\n        status: kyc.status,\n        documentsUrls: kyc.documentsUrls,\n        rejectionReason: kyc.rejectionReason,\n        reviewedBy: kyc.reviewedBy,\n        reviewedAt: kyc.reviewedAt,\n        createdAt: kyc.createdAt,\n      })\n      .from(kyc)\n      .leftJoin(users, eq(kyc.userId, users.id));\n    \n    return result;\n  }\n\n  async getAllProducts(): Promise<Product[]> {\n    return await db.select().from(products);\n  }\n\n  async getAllContracts(): Promise<any[]> {\n    const result = await db\n      .select({\n        id: contracts.id,\n        userId: contracts.userId,\n        userName: users.name,\n        productId: contracts.productId,\n        productName: products.name,\n        amount: contracts.amount,\n        status: contracts.status,\n        createdAt: contracts.createdAt\n      })\n      .from(contracts)\n      .leftJoin(users, eq(contracts.userId, users.id))\n      .leftJoin(products, eq(contracts.productId, products.id));\n    \n    return result;\n  }\n\n  async createProduct(productData: InsertProduct): Promise<Product> {\n    const [product] = await db.insert(products).values(productData).returning();\n    return product;\n  }\n\n  async updateUser(userId: number, updates: any) {\n    // Hash password if provided\n    if (updates.password) {\n      const saltRounds = 12;\n      updates.password = await bcrypt.hash(updates.password, saltRounds);\n    }\n    \n    const result = await db\n      .update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, userId))\n      .returning();\n    return result[0];\n  }\n\n  async deleteUser(userId: number) {\n    // Note: In a real app, you might want to soft delete or check for dependencies\n    await db.delete(users).where(eq(users.id, userId));\n  }\n\n  async updateProduct(productId: number, updates: any) {\n    const result = await db\n      .update(products)\n      .set(updates)\n      .where(eq(products.id, productId))\n      .returning();\n    return result[0];\n  }\n\n  async deleteProduct(productId: number) {\n    // Note: In a real app, you might want to check for dependencies (contracts)\n    await db.delete(products).where(eq(products.id, productId));\n  }\n\n  async updateKycStatus(kycId: number, status: string) {\n    const result = await db\n      .update(kyc)\n      .set({ status })\n      .where(eq(kyc.id, kycId))\n      .returning();\n    return result[0];\n  }\n\n  async updateContractStatus(contractId: number, status: string) {\n    const result = await db\n      .update(contracts)\n      .set({ status })\n      .where(eq(contracts.id, contractId))\n      .returning();\n    return result[0];\n  }\n\n  async getAuditLogs(): Promise<any[]> {\n    const result = await db\n      .select({\n        id: auditLogs.id,\n        adminId: auditLogs.adminId,\n        adminName: users.name,\n        adminEmail: users.email,\n        action: auditLogs.action,\n        entityType: auditLogs.entityType,\n        entityId: auditLogs.entityId,\n        oldValues: auditLogs.oldValues,\n        newValues: auditLogs.newValues,\n        description: auditLogs.description,\n        ipAddress: auditLogs.ipAddress,\n        userAgent: auditLogs.userAgent,\n        createdAt: auditLogs.createdAt,\n      })\n      .from(auditLogs)\n      .leftJoin(users, eq(auditLogs.adminId, users.id))\n      .orderBy(desc(auditLogs.createdAt));\n    \n    return result;\n  }\n\n  async createClientActivityLog(activityData: InsertClientActivityLog): Promise<ClientActivityLog> {\n    const [activity] = await db.insert(clientActivityLogs).values(activityData).returning();\n    return activity;\n  }\n\n  async getClientActivityLogsByUserId(userId: number): Promise<ClientActivityLog[]> {\n    const result = await db\n      .select()\n      .from(clientActivityLogs)\n      .where(eq(clientActivityLogs.userId, userId))\n      .orderBy(desc(clientActivityLogs.createdAt));\n    \n    return result;\n  }\n\n  // Helper function to log client activity\n  async logClientActivity(userId: number, action: string): Promise<void> {\n    await this.createClientActivityLog({\n      userId,\n      action,\n    });\n  }\n\n  // Get financial KPIs for admin dashboard\n  async getFinancialKPIs(): Promise<any> {\n    const now = new Date();\n    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n    const startOfPreviousMonth = new Date(now.getFullYear(), now.getMonth() - 1, 1);\n    const endOfPreviousMonth = new Date(now.getFullYear(), now.getMonth(), 0);\n\n    // Get all active contracts\n    const activeContracts = await db\n      .select()\n      .from(contracts)\n      .where(eq(contracts.status, 'active'));\n\n    // Calculate total AUM (Assets Under Management)\n    const totalAUM = activeContracts.reduce((sum, contract) => {\n      return sum + parseFloat(contract.amount);\n    }, 0);\n\n    // Get contracts created this month (new capital)\n    const newCapitalContracts = await db\n      .select()\n      .from(contracts)\n      .where(gte(contracts.createdAt, startOfMonth));\n\n    const newCapitalMonth = newCapitalContracts.reduce((sum, contract) => {\n      return sum + parseFloat(contract.amount);\n    }, 0);\n\n    // Get contracts cancelled this month (withdrawn capital)\n    const withdrawnContracts = await db\n      .select()\n      .from(contracts)\n      .where(\n        and(\n          eq(contracts.status, 'cancelled'),\n          gte(contracts.updatedAt, startOfMonth)\n        )\n      );\n\n    const withdrawnCapitalMonth = withdrawnContracts.reduce((sum, contract) => {\n      return sum + parseFloat(contract.amount);\n    }, 0);\n\n    // Calculate monthly growth ratio\n    const monthlyGrowthRatio = totalAUM > 0 ? \n      ((newCapitalMonth - withdrawnCapitalMonth) / totalAUM) * 100 : 0;\n\n    // Get products for interest rate calculation\n    const allProducts = await db.select().from(products);\n    \n    // Calculate average portfolio return (weighted by amount)\n    let totalWeightedReturn = 0;\n    let totalAmountForReturn = 0;\n    \n    for (const contract of activeContracts) {\n      const product = allProducts.find(p => p.id === contract.productId);\n      if (product) {\n        const contractAmount = parseFloat(contract.amount);\n        const interestRate = parseFloat(product.interestRate);\n        totalWeightedReturn += contractAmount * interestRate;\n        totalAmountForReturn += contractAmount;\n      }\n    }\n    \n    const averagePortfolioReturn = totalAmountForReturn > 0 ? \n      totalWeightedReturn / totalAmountForReturn : 0;\n\n    // Calculate liquidity by maturity (30, 60, 90 days)\n    const thirtyDaysFromNow = new Date();\n    thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);\n    \n    const sixtyDaysFromNow = new Date();\n    sixtyDaysFromNow.setDate(sixtyDaysFromNow.getDate() + 60);\n    \n    const ninetyDaysFromNow = new Date();\n    ninetyDaysFromNow.setDate(ninetyDaysFromNow.getDate() + 90);\n\n    const contractsMaturing30 = await db\n      .select()\n      .from(contracts)\n      .where(\n        and(\n          eq(contracts.status, 'active'),\n          lte(contracts.endDate, thirtyDaysFromNow)\n        )\n      );\n\n    const contractsMaturing60 = await db\n      .select()\n      .from(contracts)\n      .where(\n        and(\n          eq(contracts.status, 'active'),\n          lte(contracts.endDate, sixtyDaysFromNow)\n        )\n      );\n\n    const contractsMaturing90 = await db\n      .select()\n      .from(contracts)\n      .where(\n        and(\n          eq(contracts.status, 'active'),\n          lte(contracts.endDate, ninetyDaysFromNow)\n        )\n      );\n\n    const liquidity30Days = contractsMaturing30.reduce((sum, contract) => \n      sum + parseFloat(contract.amount), 0);\n    const liquidity60Days = contractsMaturing60.reduce((sum, contract) => \n      sum + parseFloat(contract.amount), 0);\n    const liquidity90Days = contractsMaturing90.reduce((sum, contract) => \n      sum + parseFloat(contract.amount), 0);\n\n    // Calculate Client KPIs\n    \n    // Get all users who have contracts (active clients)\n    const uniqueClientIds = new Set(activeContracts.map(c => c.userId));\n    const activeClients = uniqueClientIds.size;\n\n    // Get new clients this month (users who created their first contract this month)\n    const newClientsMonth = await db\n      .select({ userId: contracts.userId })\n      .from(contracts)\n      .where(gte(contracts.createdAt, startOfMonth))\n      .groupBy(contracts.userId);\n\n    // Calculate average ticket per client (total AUM / active clients)\n    const averageTicketPerClient = activeClients > 0 ? totalAUM / activeClients : 0;\n\n    // Get top clients by capital managed\n    const clientAmounts = activeContracts.reduce((acc: any, contract) => {\n      if (!acc[contract.userId]) {\n        acc[contract.userId] = 0;\n      }\n      acc[contract.userId] += parseFloat(contract.amount);\n      return acc;\n    }, {});\n\n    // Convert to array and sort by amount\n    const topClientsData = Object.entries(clientAmounts)\n      .map(([userId, amount]: [string, any]) => ({\n        userId: parseInt(userId),\n        totalAmount: amount\n      }))\n      .sort((a, b) => b.totalAmount - a.totalAmount)\n      .slice(0, 10);\n\n    // Get user names for top clients\n    const topClients = [];\n    for (const clientData of topClientsData) {\n      const user = await db.select().from(users).where(eq(users.id, clientData.userId)).limit(1);\n      topClients.push({\n        name: user[0]?.name || `Cliente ${clientData.userId}`,\n        totalAmount: clientData.totalAmount\n      });\n    }\n\n    // Get KYC data for pending calculation\n    const allKyc = await db.select().from(kyc);\n    const pendingKyc = allKyc.filter(k => k.status === 'pending').length;\n    const totalKyc = allKyc.length;\n    const pendingKycPercentage = totalKyc > 0 ? (pendingKyc / totalKyc) * 100 : 0;\n\n    // Calculate renewal rates (simplified - contracts that were renewed vs expired)\n    const expiredContracts = await db\n      .select()\n      .from(contracts)\n      .where(\n        and(\n          eq(contracts.status, 'completed'),\n          lte(contracts.endDate, now)\n        )\n      );\n\n    // For simplicity, assume 70% renewal rate for now\n    // In a real implementation, you'd track renewals more precisely\n    const totalExpired = expiredContracts.length;\n    const renewals = Math.floor(totalExpired * 0.7);\n    const nonRenewals = totalExpired - renewals;\n    const renewalRate = totalExpired > 0 ? (renewals / totalExpired) * 100 : 0;\n\n    // Calculate Partner KPIs\n    \n    // Get all partners\n    const allPartners = await db.select().from(users).where(eq(users.role, 'partner'));\n    \n    // Get partners with active contracts (partners with at least one client with active contract)\n    // For now, this is simplified - in a real implementation we'd have partner-client relationships\n    \n    // Simplified calculation - assume partners have relationships with clients\n    const activePartners = Math.min(allPartners.length, 2); // Simplified for demo\n    \n    // New partners this month\n    const newPartnersMonth = await db\n      .select()\n      .from(users)\n      .where(\n        and(\n          eq(users.role, 'partner'),\n          gte(users.createdAt, startOfMonth)\n        )\n      );\n\n    // Calculate partner commissions (assuming 1% commission on AUM)\n    const totalCommissionsMonth = newCapitalMonth * 0.01;\n\n    // Partner conversion ratio (clients per active partner)\n    const partnerConversionRatio = activePartners > 0 ? activeClients / activePartners : 0;\n\n    // Top partners by volume (simplified - using existing data)\n    const topPartners = allPartners.slice(0, 5).map((partner, index) => ({\n      name: partner.name,\n      totalVolume: allPartners.length > 0 ? Math.floor((totalAUM / allPartners.length) * (1 - index * 0.2)) : 0 // Simulated distribution\n    })).sort((a, b) => b.totalVolume - a.totalVolume);\n\n    // Inactive partners (partners without new clients in 3 months)\n    const threeMonthsAgo = new Date(now);\n    threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);\n    \n    // Simplified calculation for inactive partners\n    const inactivePartners = Math.max(0, allPartners.length - activePartners);\n\n    // Calculate Operational/Risk KPIs\n    \n    // Contracts expiring in 30, 60, 90 days (already calculated above)\n    const contractsExpiring30Days = contractsMaturing30.length;\n    const contractsExpiring60Days = contractsMaturing60.length;\n    const contractsExpiring90Days = contractsMaturing90.length;\n    \n    // Open incidents (simplified - using a base number for demo)\n    const openIncidents = 0; // Fixed value for demo\n    \n    // Average resolution time in hours (simplified)\n    const avgResolutionTimeHours = 48; // Fixed value for demo\n    \n    // KYC status percentages (already calculated above)\n    const kycCompletionRate = totalKyc > 0 ? ((totalKyc - pendingKyc) / totalKyc) * 100 : 100;\n    \n    // Compliance issues (simplified - fixed number for demo)\n    const complianceIssues = 0; // Fixed value for demo\n\n    // Calculate Strategic/Business KPIs - Fixed calculations\n    \n    // Client retention rate (%) - Simplified for demo\n    const clientRetentionRate = 100; // Fixed demo value\n    \n    // Client growth rate (%) - Simplified for demo\n    const clientGrowthRate = 25; // Fixed demo value \n    \n    // Total revenue generated (YTD) - fees, commissions and operational margin\n    // Simplified calculation: commissions + management fees\n    const managementFees = totalAUM * 0.015; // 1.5% annual management fee\n    const totalRevenueYTD = totalCommissionsMonth + managementFees;\n\n    // Calculate Business Health Traffic Light\n    const contractsAtRisk = contractsExpiring30Days + contractsExpiring60Days + contractsExpiring90Days;\n    const contractsAtRiskPercentage = totalAUM > 0 ? (contractsAtRisk / totalAUM) * 100 : 0;\n    \n    let businessHealthStatus = 'green'; // Default: stable growth\n    let businessHealthPercentage = 95; // Default compliance percentage\n    \n    // Red: High risk (low renewals, high withdrawals)\n    if (renewalRate < 50 || withdrawnCapitalMonth > newCapitalMonth) {\n      businessHealthStatus = 'red';\n      businessHealthPercentage = 45; // Below 69%\n    }\n    // Yellow: Medium risk (contracts at risk > 10% of capital)\n    else if (contractsAtRiskPercentage > 10 || renewalRate < 80) {\n      businessHealthStatus = 'yellow';\n      businessHealthPercentage = 85; // 70-99%\n    }\n    \n    // Generate real monthly evolution based on actual system data\n    // Sistema operativo desde junio 2025, mostrar evolución real hasta el mes actual\n    const currentDate = new Date();\n    const currentMonth = currentDate.getMonth(); // 0 = enero, 11 = diciembre\n    const monthNames = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'];\n    \n    const monthlyEvolution = [];\n    \n    // Empezar desde junio (mes 5) hasta el mes actual\n    const startMonth = 5; // Junio (0-indexado)\n    const monthsToShow = Math.max(1, currentMonth - startMonth + 1);\n    \n    // Calcular evolución progresiva desde junio hasta el mes actual\n    for (let i = 0; i < monthsToShow; i++) {\n      const monthIndex = startMonth + i;\n      const progressRatio = (i + 1) / monthsToShow;\n      \n      // Crecimiento progresivo basado en los datos actuales\n      const monthCapital = Math.round(totalAUM * progressRatio);\n      const monthClients = Math.round(activeClients * progressRatio);\n      const monthRevenue = Math.round(totalRevenueYTD * progressRatio);\n      const monthRetention = Math.max(75, Math.round(clientRetentionRate * progressRatio));\n      \n      monthlyEvolution.push({\n        month: monthNames[monthIndex],\n        capital: monthCapital,\n        clients: monthClients,\n        revenue: monthRevenue,\n        retention: monthRetention\n      });\n    }\n\n    const result = {\n      totalAUM,\n      newCapitalMonth,\n      withdrawnCapitalMonth,\n      monthlyGrowthRatio,\n      averagePortfolioReturn,\n      liquidity30Days,\n      liquidity60Days,\n      liquidity90Days,\n      totalActiveContracts: activeContracts.length,\n      clientKpis: {\n        activeClients,\n        newClientsMonth: newClientsMonth.length,\n        averageTicketPerClient,\n        topClients,\n        pendingKyc,\n        pendingKycPercentage,\n        renewals,\n        nonRenewals,\n        renewalRate\n      },\n      partnerKpis: {\n        activePartners,\n        newPartnersMonth: newPartnersMonth.length,\n        totalCommissionsMonth,\n        partnerConversionRatio,\n        topPartners,\n        inactivePartners\n      },\n      operationalKpis: {\n        contractsExpiring30Days,\n        contractsExpiring60Days,\n        contractsExpiring90Days,\n        openIncidents,\n        avgResolutionTimeHours,\n        kycCompletionRate,\n        complianceIssues\n      },\n      strategicKpis: {\n        clientRetentionRate: clientRetentionRate,\n        clientGrowthRate: clientGrowthRate,\n        totalRevenueYTD: totalRevenueYTD\n      },\n      businessHealth: {\n        status: businessHealthStatus,\n        percentage: businessHealthPercentage,\n        contractsAtRiskPercentage: contractsAtRiskPercentage\n      },\n      monthlyEvolution: monthlyEvolution,\n      calculatedAt: now.toISOString()\n    };\n    \n    return result;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":21608},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table for authentication\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  email: varchar(\"email\", { length: 255 }).notNull().unique(),\n  password: varchar(\"password\", { length: 255 }).notNull(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  apellidos: varchar(\"apellidos\", { length: 255 }), // Last names\n  telefono: varchar(\"telefono\", { length: 50 }), // Phone number\n  fechaNacimiento: varchar(\"fecha_nacimiento\", { length: 20 }), // Birth date\n  pais: varchar(\"pais\", { length: 100 }), // Country\n  direccion: text(\"direccion\"), // Address\n  role: varchar(\"role\", { length: 50 }).notNull().default(\"client\"), // 'client' | 'partner' | 'admin'\n  sponsor: varchar(\"sponsor\", { length: 255 }), // sponsor user for referrals\n  grade: varchar(\"grade\", { length: 50 }).default(\"Bronze\"), // Bronze, Silver, Gold, Diamond\n  verificationStatus: varchar(\"verification_status\", { length: 50 }).default(\"pending\"), // verified, pending\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// KYC table\nexport const kyc = pgTable(\"kyc\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id).notNull(),\n  fullName: varchar(\"full_name\", { length: 255 }).notNull(),\n  documentType: varchar(\"document_type\", { length: 50 }).notNull(), // passport, dni, license\n  documentNumber: varchar(\"document_number\", { length: 100 }).notNull(),\n  country: varchar(\"country\", { length: 100 }).notNull(),\n  status: varchar(\"status\", { length: 50 }).default(\"pending\"), // approved, pending, rejected\n  documentsUrls: text(\"documents_urls\").array(), // URLs of uploaded documents\n  rejectionReason: text(\"rejection_reason\"), // Admin note when rejecting\n  reviewedBy: integer(\"reviewed_by\").references(() => users.id), // Admin who reviewed\n  reviewedAt: timestamp(\"reviewed_at\"), // When the review was completed\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Products table\nexport const products = pgTable(\"products\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  interestRate: varchar(\"interest_rate\", { length: 10 }).notNull(), // stored as string like \"9.00\"\n  termDays: integer(\"term_days\").notNull(),\n  minAmount: varchar(\"min_amount\", { length: 20 }).notNull(), // stored as string for precision\n  maxAmount: varchar(\"max_amount\", { length: 20 }).notNull(),\n  status: varchar(\"status\", { length: 50 }).default(\"active\"), // active, inactive\n  autoRenewal: boolean(\"auto_renewal\").default(false),\n  contractTemplate: text(\"contract_template\"), // URL or text of contract\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Contracts table\nexport const contracts = pgTable(\"contracts\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id).notNull(),\n  productId: integer(\"product_id\").references(() => products.id).notNull(),\n  amount: varchar(\"amount\", { length: 20 }).notNull(), // stored as string for precision\n  status: varchar(\"status\", { length: 50 }).default(\"ready_to_start\"), // active, ready_to_start, completed, cancelled\n  startDate: timestamp(\"start_date\"),\n  endDate: timestamp(\"end_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const leads = pgTable(\"leads\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\"),\n  type: text(\"type\").notNull(), // 'Asesor Financiero' | 'Inversor Particular'\n  message: text(\"message\"),\n  source: text(\"source\").notNull(), // 'download', 'contact', 'advisor'\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const calculatorResults = pgTable(\"calculator_results\", {\n  id: serial(\"id\").primaryKey(),\n  leadId: integer(\"lead_id\").references(() => leads.id),\n  amount: integer(\"amount\").notNull(),\n  years: integer(\"years\").notNull(),\n  compoundInterest: boolean(\"compound_interest\").notNull(),\n  finalAmount: integer(\"final_amount\").notNull(),\n  interestGenerated: integer(\"interest_generated\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Audit logs table for tracking admin actions\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: serial(\"id\").primaryKey(),\n  adminId: integer(\"admin_id\").references(() => users.id).notNull(), // Admin who performed the action\n  action: varchar(\"action\", { length: 100 }).notNull(), // CREATE, UPDATE, DELETE\n  entityType: varchar(\"entity_type\", { length: 50 }).notNull(), // users, kyc, products, contracts\n  entityId: varchar(\"entity_id\", { length: 50 }).notNull(), // ID of the affected entity\n  oldValues: text(\"old_values\"), // JSON string of old values (for updates)\n  newValues: text(\"new_values\"), // JSON string of new values\n  description: varchar(\"description\", { length: 500 }), // Human-readable description\n  ipAddress: varchar(\"ip_address\", { length: 45 }), // IP address of admin\n  userAgent: text(\"user_agent\"), // Browser/device info\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Client activity logs table for tracking user actions (simplified for client view)\nexport const clientActivityLogs = pgTable(\"client_activity_logs\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id).notNull(), // User who performed the action\n  action: varchar(\"action\", { length: 200 }).notNull(), // Simple action description in Spanish\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertLeadSchema = createInsertSchema(leads).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCalculatorResultSchema = createInsertSchema(calculatorResults).omit({\n  id: true,\n  createdAt: true,\n});\n\n// User schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const loginSchema = z.object({\n  email: z.string().email(\"Invalid email format\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nexport const registerSchema = z.object({\n  email: z.string().email(\"Invalid email format\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  role: z.enum([\"client\", \"partner\", \"admin\"]).default(\"client\"),\n});\n\n// New table schemas\nexport const insertKycSchema = createInsertSchema(kyc).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  reviewedAt: true,\n});\n\nexport const updateKycSchema = z.object({\n  status: z.enum([\"approved\", \"pending\", \"rejected\"]),\n  rejectionReason: z.string().optional(),\n  reviewedBy: z.number().optional(),\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertContractSchema = createInsertSchema(contracts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertClientActivityLogSchema = createInsertSchema(clientActivityLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertLead = z.infer<typeof insertLeadSchema>;\nexport type Lead = typeof leads.$inferSelect;\nexport type InsertCalculatorResult = z.infer<typeof insertCalculatorResultSchema>;\nexport type CalculatorResult = typeof calculatorResults.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type LoginRequest = z.infer<typeof loginSchema>;\nexport type RegisterRequest = z.infer<typeof registerSchema>;\nexport type InsertKyc = z.infer<typeof insertKycSchema>;\nexport type Kyc = typeof kyc.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertContract = z.infer<typeof insertContractSchema>;\nexport type Contract = typeof contracts.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\nexport type AuditLog = typeof auditLogs.$inferSelect;\nexport type InsertClientActivityLog = z.infer<typeof insertClientActivityLogSchema>;\nexport type ClientActivityLog = typeof clientActivityLogs.$inferSelect;\n","size_bytes":8608},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/useAuth\";\nimport { LoadingScreen } from \"@/components/LoadingScreen\";\nimport { useState, useEffect } from \"react\";\n\nimport Home from \"@/pages/home\";\nimport Inversiones from \"@/pages/inversiones\";\nimport Nosotros from \"@/pages/nosotros\";\nimport Calculadora from \"@/pages/calculadora\";\nimport Contacto from \"@/pages/contacto\";\nimport Login from \"@/pages/login\";\nimport DashboardRouter from \"@/pages/dashboard-router\";\nimport AvisoLegal from \"@/pages/aviso-legal\";\nimport PoliticaUso from \"@/pages/politica-uso\";\nimport PoliticaCookies from \"@/pages/politica-cookies\";\nimport PoliticaSeguridad from \"@/pages/politica-seguridad\";\nimport ProteccionDatos from \"@/pages/proteccion-datos\";\nimport ProteccionDatosDetallada from \"@/pages/proteccion-datos-detallada\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/inversiones\" component={Inversiones} />\n      <Route path=\"/nosotros\" component={Nosotros} />\n      <Route path=\"/calculadora\" component={Calculadora} />\n      <Route path=\"/contacto\" component={Contacto} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/dashboard\" component={DashboardRouter} />\n      <Route path=\"/aviso-legal\" component={AvisoLegal} />\n      <Route path=\"/politica-uso\" component={PoliticaUso} />\n      <Route path=\"/politica-cookies\" component={PoliticaCookies} />\n      <Route path=\"/politica-seguridad\" component={PoliticaSeguridad} />\n      <Route path=\"/proteccion-datos\" component={ProteccionDatos} />\n      <Route path=\"/proteccion-datos-detallada\" component={ProteccionDatosDetallada} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [showContent, setShowContent] = useState(false);\n\n  const handleLoadingComplete = () => {\n    setIsLoading(false);\n    // Small delay to allow for smooth transition\n    setTimeout(() => {\n      setShowContent(true);\n    }, 300);\n  };\n\n  // Show loading screen on first visit\n  useEffect(() => {\n    const hasVisited = sessionStorage.getItem('nakama-visited');\n    if (hasVisited) {\n      // Skip loading screen if already visited in this session\n      setIsLoading(false);\n      setShowContent(true);\n    }\n  }, []);\n\n  // Mark as visited when loading completes\n  useEffect(() => {\n    if (!isLoading && showContent) {\n      sessionStorage.setItem('nakama-visited', 'true');\n    }\n  }, [isLoading, showContent]);\n\n  if (isLoading) {\n    return <LoadingScreen onLoadingComplete={handleLoadingComplete} />;\n  }\n\n  if (!showContent) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-black via-gray-900 to-black flex items-center justify-center\">\n        <div className=\"w-8 h-8 border-2 border-emerald-400 border-t-transparent rounded-full animate-spin\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3435},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Cormorant+Garamond:ital,wght@0,300;0,400;0,500;0,600;0,700;1,300;1,400;1,500;1,600;1,700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(0, 0%, 100%);\n  --muted: hsl(0, 0%, 10%);\n  --muted-foreground: hsl(0, 0%, 65%);\n  --popover: hsl(0, 0%, 5%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(0, 0%, 5%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(0, 0%, 20%);\n  --input: hsl(0, 0%, 15%);\n  --primary: hsl(140, 36%, 38%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(0, 0%, 10%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(140, 36%, 38%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(60, 9%, 98%);\n  --ring: hsl(140, 36%, 38%);\n  --radius: 0.5rem;\n\n  /* Custom colors */\n  /* Antes azul; ahora verde */\n  --navy: #3f8358;\n  /* Verde unificado al mismo tono */\n  --green: #3f8358;\n  --silver-100: hsl(0, 0%, 90%);\n  --silver-300: hsl(0, 0%, 75%);\n  --silver-500: hsl(0, 0%, 50%);\n  --charcoal: hsl(210, 12%, 25%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-inter antialiased bg-background text-foreground;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-family: Georgia, 'Times New Roman', Times, serif;\n  }\n}\n\n@layer components {\n  .gradient-dark {\n    background: linear-gradient(135deg, hsl(0, 0%, 0%) 0%, hsl(210, 12%, 25%) 100%);\n  }\n\n  .gradient-dark-subtle {\n    background: linear-gradient(135deg, hsl(0, 0%, 10%) 0%, hsl(0, 0%, 18%) 100%);\n  }\n\n  .gradient-silver {\n    background: linear-gradient(135deg, hsl(0, 0%, 50%) 0%, hsl(0, 0%, 75%) 100%);\n  }\n\n  /* Antes gradiente azul; ahora verde */\n  .gradient-navy {\n    background: linear-gradient(135deg, #3f8358 0%, #2f6b47 100%);\n  }\n\n  .text-shadow {\n    text-shadow: 2px 2px 4px rgba(0,0,0,0.5);\n  }\n\n  .font-georgia {\n    font-family: Georgia, 'Times New Roman', Times, serif;\n  }\n\n  .font-cormorant {\n    font-family: 'Cormorant Garamond', serif;\n  }\n\n  .font-inter {\n    font-family: 'Inter', sans-serif;\n  }\n}\n\n@layer utilities {\n  .text-navy {\n    color: var(--navy);\n  }\n\n  .text-green {\n    color: var(--green);\n  }\n\n  .text-silver-100 {\n    color: var(--silver-100);\n  }\n\n  .text-silver-300 {\n    color: var(--silver-300);\n  }\n\n  .text-silver-500 {\n    color: var(--silver-500);\n  }\n\n  .text-charcoal {\n    color: var(--charcoal);\n  }\n\n  .bg-navy {\n    background-color: var(--navy);\n  }\n\n  .bg-green {\n    background-color: var(--green);\n  }\n\n  .bg-charcoal {\n    background-color: var(--charcoal);\n  }\n\n  .border-silver-500 {\n    border-color: var(--silver-500);\n  }\n}\n\n/* Pulsating Green Wave Animations */\n@keyframes heartbeat {\n  0%, 100% { transform: scale(1); }\n  50% { transform: scale(1.02); }\n}\n\n@keyframes greenWave1 {\n  0% { \n    transform: scale(1);\n    opacity: 0.8;\n    box-shadow: 0 0 0 0 rgba(52, 78, 65, 0.7);\n  }\n  70% {\n    transform: scale(1.1);\n    opacity: 0;\n    box-shadow: 0 0 0 20px rgba(52, 78, 65, 0);\n  }\n  100% {\n    transform: scale(1);\n    opacity: 0;\n    box-shadow: 0 0 0 0 rgba(52, 78, 65, 0);\n  }\n}\n\n@keyframes greenWave2 {\n  0% { \n    transform: scale(1);\n    opacity: 0.6;\n    box-shadow: 0 0 0 0 rgba(52, 78, 65, 0.5);\n  }\n  70% {\n    transform: scale(1.2);\n    opacity: 0;\n    box-shadow: 0 0 0 30px rgba(52, 78, 65, 0);\n  }\n  100% {\n    transform: scale(1);\n    opacity: 0;\n    box-shadow: 0 0 0 0 rgba(52, 78, 65, 0);\n  }\n}\n\n@keyframes greenWave3 {\n  0% { \n    transform: scale(1);\n    opacity: 0.4;\n    box-shadow: 0 0 0 0 rgba(52, 78, 65, 0.3);\n  }\n  70% {\n    transform: scale(1.3);\n    opacity: 0;\n    box-shadow: 0 0 0 40px rgba(52, 78, 65, 0);\n  }\n  100% {\n    transform: scale(1);\n    opacity: 0;\n    box-shadow: 0 0 0 0 rgba(52, 78, 65, 0);\n  }\n}\n\n.security-card-pulse {\n  position: relative;\n  animation: heartbeat 2s ease-in-out infinite;\n}\n\n.security-card-pulse::before,\n.security-card-pulse::after {\n  content: '';\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 100%;\n  height: 100%;\n  border-radius: 0.75rem;\n  transform: translate(-50%, -50%);\n  pointer-events: none;\n}\n\n.security-card-pulse::before {\n  animation: greenWave1 3s ease-out infinite;\n  animation-delay: 0s;\n}\n\n.security-card-pulse::after {\n  animation: greenWave2 3s ease-out infinite;\n  animation-delay: 0.5s;\n}\n\n.security-card-pulse:nth-child(2n)::before {\n  animation: greenWave2 3s ease-out infinite;\n  animation-delay: 1s;\n}\n\n.security-card-pulse:nth-child(2n)::after {\n  animation: greenWave3 3s ease-out infinite;\n  animation-delay: 1.5s;\n}\n\n.security-card-pulse:nth-child(3n)::before {\n  animation: greenWave3 3s ease-out infinite;\n  animation-delay: 2s;\n}\n\n.security-card-pulse:nth-child(3n)::after {\n  animation: greenWave1 3s ease-out infinite;\n  animation-delay: 2.5s;\n}\n\n/* Flip Card Animations for Values Section */\n.flip-card {\n  background-color: transparent;\n  width: 100%;\n  height: 280px;\n  perspective: 1000px;\n  cursor: pointer;\n}\n\n.flip-card-inner {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1), box-shadow 0.3s ease;\n  transform-style: preserve-3d;\n}\n\n.flip-card:hover .flip-card-inner {\n  transform: rotateY(180deg);\n  box-shadow: 0 10px 30px rgba(52, 78, 65, 0.4), 0 0 20px rgba(52, 78, 65, 0.2);\n}\n\n.flip-card-front, .flip-card-back {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  backface-visibility: hidden;\n  border-radius: 0.75rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 2rem;\n  transition: all 0.3s ease;\n}\n\n.flip-card-front {\n  background: rgba(0, 0, 0, 0.7);\n  border: 1px solid rgba(156, 163, 175, 0.2);\n}\n\n.flip-card:hover .flip-card-front {\n  border: 1px solid rgba(52, 78, 65, 0.5);\n  box-shadow: 0 0 15px rgba(52, 78, 65, 0.3);\n}\n\n.flip-card-back {\n  background: rgba(52, 78, 65, 0.9);\n  border: 1px solid rgba(52, 78, 65, 0.4);\n  transform: rotateY(180deg);\n  box-shadow: 0 8px 25px rgba(52, 78, 65, 0.3);\n}\n\n.flip-card-letter {\n  font-size: 4rem;\n  font-weight: bold;\n  color: var(--green);\n  margin-bottom: 0.5rem;\n  opacity: 1;\n  transition: opacity 0.3s ease;\n}\n\n.flip-card-title {\n  font-size: 1.5rem;\n  font-weight: 600;\n  color: white;\n  margin-bottom: 1rem;\n  opacity: 1;\n  transition: opacity 0.3s ease;\n}\n\n.flip-card-description {\n  font-size: 0.95rem;\n  color: rgba(255, 255, 255, 0.9);\n  line-height: 1.5;\n  text-align: center;\n  opacity: 1;\n  transition: opacity 0.3s ease;\n}\n\n/* Strategy Cards Zoom Animation */\n.strategy-card {\n  animation: strategyCardAppear 0.8s ease-out forwards;\n  opacity: 0;\n  transform: scale(0.8) translateY(30px);\n  position: relative;\n  overflow: hidden;\n}\n\n.strategy-card::before {\n  content: '';\n  position: absolute;\n  top: -2px;\n  left: -2px;\n  right: -2px;\n  bottom: -2px;\n  background: linear-gradient(45deg, \n    rgba(52, 78, 65, 0.2) 0%, \n    rgba(52, 78, 65, 0.6) 25%, \n    rgba(52, 78, 65, 0.2) 50%, \n    rgba(52, 78, 65, 0.6) 75%, \n    rgba(52, 78, 65, 0.2) 100%);\n  border-radius: 14px;\n  opacity: 0;\n  transition: opacity 0.4s ease;\n  z-index: -1;\n}\n\n@keyframes strategyCardAppear {\n  0% {\n    opacity: 0;\n    transform: scale(0.8) translateY(30px);\n  }\n  100% {\n    opacity: 1;\n    transform: scale(1) translateY(0);\n  }\n}\n\n.strategy-card:hover {\n  transform: scale(1.05) translateY(-5px);\n  box-shadow: \n    0 20px 40px rgba(52, 78, 65, 0.4), \n    0 0 30px rgba(52, 78, 65, 0.3),\n    0 0 0 2px rgba(52, 78, 65, 0.8),\n    0 0 20px rgba(52, 78, 65, 0.4);\n  background: rgba(0, 0, 0, 0.85);\n  border-color: rgba(52, 78, 65, 0.8);\n}\n\n.strategy-card:hover::before {\n  opacity: 1;\n}\n\n.strategy-card:hover .w-12 {\n  background: rgba(52, 78, 65, 0.4);\n  transform: scale(1.1);\n  box-shadow: 0 0 20px rgba(52, 78, 65, 0.4);\n}\n\n.strategy-card:hover .text-green {\n  text-shadow: 0 0 10px rgba(52, 78, 65, 0.6);\n  transform: scale(1.02);\n}\n\n.strategy-card:hover h3 {\n  text-shadow: 0 0 15px rgba(52, 78, 65, 0.5);\n}\n\n.strategy-card:hover p {\n  color: rgba(255, 255, 255, 0.95);\n}\n\n/* Process Cards Subtle Green Glow */\n.process-card {\n  position: relative;\n  overflow: hidden;\n}\n\n.process-card::before {\n  content: '';\n  position: absolute;\n  top: -1px;\n  left: -1px;\n  right: -1px;\n  bottom: -1px;\n  background: linear-gradient(45deg, \n    rgba(52, 78, 65, 0.1) 0%, \n    rgba(52, 78, 65, 0.3) 25%, \n    rgba(52, 78, 65, 0.1) 50%, \n    rgba(52, 78, 65, 0.3) 75%, \n    rgba(52, 78, 65, 0.1) 100%);\n  border-radius: 14px;\n  opacity: 0;\n  transition: opacity 0.5s ease;\n  z-index: -1;\n}\n\n.process-card:hover {\n  transform: translateY(-2px);\n  box-shadow: \n    0 10px 25px rgba(52, 78, 65, 0.2), \n    0 0 15px rgba(52, 78, 65, 0.15),\n    0 0 0 1px rgba(52, 78, 65, 0.4);\n  background: rgba(0, 0, 0, 0.8);\n}\n\n.process-card:hover::before {\n  opacity: 1;\n}\n\n.process-card:hover h3 {\n  text-shadow: 0 0 8px rgba(52, 78, 65, 0.3);\n}\n\n.process-card:hover .bg-green {\n  box-shadow: 0 0 10px rgba(52, 78, 65, 0.4);\n}\n\n/* Contact Section Cards Animation */\n.contact-info-card,\n.contact-offices-card,\n.download-form-card,\n.testimonial-card {\n  position: relative;\n  overflow: hidden;\n  animation: contactCardFadeIn 0.8s ease-out forwards;\n  opacity: 0;\n  transform: translateY(20px);\n}\n\n.contact-info-card {\n  animation-delay: 0.1s;\n}\n\n.contact-offices-card {\n  animation-delay: 0.2s;\n}\n\n.download-form-card {\n  animation-delay: 0.3s;\n}\n\n.testimonial-card {\n  animation-delay: 0.4s;\n}\n\n@keyframes contactCardFadeIn {\n  0% {\n    opacity: 0;\n    transform: translateY(20px) scale(0.98);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0) scale(1);\n  }\n}\n\n.contact-info-card::before,\n.contact-offices-card::before,\n.download-form-card::before,\n.testimonial-card::before {\n  content: '';\n  position: absolute;\n  top: -1px;\n  left: -1px;\n  right: -1px;\n  bottom: -1px;\n  background: linear-gradient(45deg, \n    rgba(52, 78, 65, 0.1) 0%, \n    rgba(52, 78, 65, 0.25) 25%, \n    rgba(52, 78, 65, 0.1) 50%, \n    rgba(52, 78, 65, 0.25) 75%, \n    rgba(52, 78, 65, 0.1) 100%);\n  border-radius: inherit;\n  opacity: 0;\n  transition: opacity 0.4s ease;\n  z-index: -1;\n}\n\n.contact-info-card:hover,\n.contact-offices-card:hover {\n  transform: translateY(-3px) scale(1.02);\n  box-shadow: \n    0 15px 30px rgba(52, 78, 65, 0.2), \n    0 0 20px rgba(52, 78, 65, 0.15),\n    0 0 0 1px rgba(52, 78, 65, 0.3);\n  background: rgba(0, 0, 0, 0.8);\n}\n\n.download-form-card:hover {\n  transform: translateY(-2px) scale(1.01);\n  box-shadow: \n    0 12px 25px rgba(52, 78, 65, 0.25), \n    0 0 25px rgba(52, 78, 65, 0.2),\n    0 0 0 1px rgba(52, 78, 65, 0.4);\n  background: rgba(0, 0, 0, 0.85);\n}\n\n.testimonial-card:hover {\n  transform: translateY(-3px) scale(1.015);\n  box-shadow: \n    0 15px 35px rgba(52, 78, 65, 0.3), \n    0 0 20px rgba(52, 78, 65, 0.2),\n    0 0 0 1px rgba(52, 78, 65, 0.4);\n  background: rgba(0, 0, 0, 0.85);\n}\n\n.contact-info-card:hover::before,\n.contact-offices-card:hover::before,\n.download-form-card:hover::before,\n.testimonial-card:hover::before {\n  opacity: 1;\n}\n\n.contact-info-card:hover h2,\n.contact-offices-card:hover h2 {\n  text-shadow: 0 0 8px rgba(52, 78, 65, 0.4);\n}\n\n.download-form-card:hover h2 {\n  text-shadow: 0 0 10px rgba(52, 78, 65, 0.4);\n}\n\n.testimonial-card:hover blockquote {\n  color: rgba(255, 255, 255, 0.95);\n}\n\n.testimonial-card:hover .bg-green\\/20 {\n  background: rgba(52, 78, 65, 0.3);\n  box-shadow: 0 0 15px rgba(52, 78, 65, 0.3);\n}\n","size_bytes":11507},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/KycFileUpload.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Upload, X, FileText, Loader2 } from \"lucide-react\";\n\ninterface KycFileUploadProps {\n  onFilesUploaded: (urls: string[]) => void;\n  currentFiles?: string[];\n  disabled?: boolean;\n}\n\nexport function KycFileUpload({ onFilesUploaded, currentFiles = [], disabled = false }: KycFileUploadProps) {\n  const [uploading, setUploading] = useState(false);\n  const [uploadedFiles, setUploadedFiles] = useState<string[]>(currentFiles);\n  const [selectedText, setSelectedText] = useState<string>(\"\");\n  const fileInputRef = useRef<HTMLInputElement | null>(null);\n\n  const openFileDialog = () => fileInputRef.current?.click();\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (!files || files.length === 0) return;\n\n    // mostrar nombres mientras sube\n    setSelectedText(Array.from(files).map(f => f.name).join(\", \"));\n\n    setUploading(true);\n    const newUploadedFiles: string[] = [];\n\n    try {\n      for (const file of Array.from(files)) {\n        const token = localStorage.getItem('token');\n        const response = await fetch('/api/kyc/upload-url', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          },\n          body: JSON.stringify({ filename: file.name })\n        });\n\n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error('Failed to get upload URL:', errorText);\n          throw new Error(`Failed to get upload URL: ${response.status}`);\n        }\n\n        const { uploadURL } = await response.json();\n\n        const uploadResponse = await fetch(uploadURL, {\n          method: 'PUT',\n          body: file,\n          headers: { 'Content-Type': file.type }\n        });\n\n        if (!uploadResponse.ok) {\n          const errorText = await uploadResponse.text();\n          console.error(`Upload failed for ${file.name}:`, errorText);\n          throw new Error(`Failed to upload ${file.name}: ${uploadResponse.status}`);\n        }\n\n        const url = new URL(uploadURL);\n        const pathParts = url.pathname.split('/');\n        const kycIndex = pathParts.findIndex(part => part === 'kyc');\n        if (kycIndex === -1) throw new Error('Invalid upload URL format');\n        const kycPath = pathParts.slice(kycIndex).join('/');\n        const downloadUrl = `/objects/${kycPath}`;\n\n        newUploadedFiles.push(downloadUrl);\n      }\n\n      const allFiles = [...uploadedFiles, ...newUploadedFiles];\n      setUploadedFiles(allFiles);\n      onFilesUploaded(allFiles);\n    } catch (error) {\n      console.error('Error uploading files:', error);\n      alert('Error al subir archivos. Inténtalo de nuevo.');\n    } finally {\n      setUploading(false);\n      // limpiar input y texto mostrado\n      if (event.target) event.target.value = '';\n      setSelectedText(\"\");\n    }\n  };\n\n  const removeFile = (index: number) => {\n    const newFiles = uploadedFiles.filter((_, i) => i !== index);\n    setUploadedFiles(newFiles);\n    onFilesUploaded(newFiles);\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div>\n        <Label className=\"text-emerald-300 mb-2 block\">\n          Documentos KYC <span className=\"text-red-400\">*</span>\n        </Label>\n\n        <div className=\"space-y-3\">\n          {/* Input oculto */}\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            multiple\n            accept=\".pdf,.jpg,.jpeg,.png,.gif\"\n            onChange={handleFileUpload}\n            disabled={uploading || disabled}\n            className=\"hidden\"\n          />\n\n          {/* Cuadro visible y centrado */}\n          <div className=\"relative h-12 rounded-lg border border-emerald-500/20 bg-black/50 px-2\n                          flex items-center\">\n            <Button\n              type=\"button\"\n              onClick={openFileDialog}\n              disabled={uploading || disabled}\n              className=\"rounded-full px-4 py-2 bg-emerald-500/20 text-emerald-300 hover:bg-emerald-500/30\"\n              variant=\"ghost\"\n            >\n              <Upload className=\"mr-2 h-4 w-4\" />\n              Elegir archivos\n            </Button>\n\n            <span className=\"ml-3 text-emerald-50/90 truncate\">\n              {selectedText || \"Ningún archivo seleccionado\"}\n            </span>\n\n            {uploading && (\n              <div className=\"absolute right-3 top-1/2 -translate-y-1/2\">\n                <Loader2 className=\"h-4 w-4 animate-spin text-emerald-400\" />\n              </div>\n            )}\n          </div>\n\n          <p className=\"text-emerald-200/60 text-sm\">\n            Formatos soportados: PDF, JPG, PNG, GIF. Máximo 10MB por archivo.\n          </p>\n\n          {uploadedFiles.length > 0 && (\n            <div className=\"mt-4 space-y-2\">\n              <Label className=\"text-emerald-300 text-sm\">Archivos subidos:</Label>\n              {uploadedFiles.map((fileUrl, index) => (\n                <div key={index} className=\"flex items-center justify-between bg-black/30 rounded-lg p-3 border border-emerald-500/10\">\n                  <div className=\"flex items-center gap-3\">\n                    <FileText className=\"w-4 h-4 text-emerald-400\" />\n                    <div>\n                      <p className=\"text-emerald-50 text-sm font-medium\">Documento {index + 1}</p>\n                      <p className=\"text-emerald-300/70 text-xs\">\n                        {fileUrl.split('/').pop()?.substring(0, 30)}...\n                      </p>\n                    </div>\n                  </div>\n                  {!disabled && (\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"border-red-500/20 text-red-300 hover:bg-red-500/10\"\n                      onClick={() => removeFile(index)}\n                    >\n                      <X className=\"w-3 h-3\" />\n                    </Button>\n                  )}\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6256},"client/src/components/LoadingScreen.tsx":{"content":"import { useEffect, useMemo, useState } from \"react\";\nimport logoPath from \"@assets/Logo-removeBG_1753542032142.png\";\n\ninterface LoadingScreenProps {\n  onLoadingComplete: () => void;\n}\n\nexport function LoadingScreen({ onLoadingComplete }: LoadingScreenProps) {\n  const [progress, setProgress] = useState(0);\n  const [tipIndex, setTipIndex] = useState(0);\n\n  const tips = useMemo(\n    () => [\n      \"Inicializando módulos del panel…\",\n      \"Sincronizando métricas en tiempo real…\",\n      \"Optimizando la experiencia…\",\n      \"Preparando recursos visuales…\",\n      \"Comprobando permisos…\",\n    ],\n    []\n  );\n\n  // Progreso orgánico\n  useEffect(() => {\n    const t = setInterval(() => {\n      setProgress((p) => {\n        if (p >= 100) {\n          clearInterval(t);\n          setTimeout(onLoadingComplete, 420);\n          return 100;\n        }\n        const remaining = 100 - p;\n        const base = Math.max(1, Math.min(6, Math.floor(remaining / 10)));\n        const jitter = Math.floor(Math.random() * 3); // 0–2\n        return Math.min(p + base + jitter, 100);\n      });\n    }, 100);\n    return () => clearInterval(t);\n  }, [onLoadingComplete]);\n\n  // Tips rotando\n  useEffect(() => {\n    const rot = setInterval(() => setTipIndex((i) => (i + 1) % tips.length), 1200);\n    return () => clearInterval(rot);\n  }, [tips.length]);\n\n  return (\n    <div\n      className={[\n        \"relative min-h-[100svh] overflow-hidden\",\n        // MISMO FONDO QUE LOGIN (opción 2)\n        \"bg-gradient-to-br from-black via-[#091611] to-[#0E2A1F]\",\n        \"px-6 md:px-10\",\n        \"flex items-center justify-center\",\n      ].join(\" \")}\n    >\n      {/* Contenido sin caja, vertical */}\n      <div className=\"w-full max-w-lg text-center\">\n        {/* Logo grande arriba */}\n        <img\n          src={logoPath}\n          alt=\"Nakama Partner\"\n          className=\"mx-auto w-28 h-28 md:w-36 md:h-36 drop-shadow-[0_0_22px_rgba(16,185,129,0.35)]\"\n        />\n\n        {/* Marca */}\n        <div className=\"mt-5 space-y-1\">\n          <h2 className=\"font-cormorant text-3xl md:text-4xl font-bold text-emerald-50\">\n            Nakama Partner\n          </h2>\n          <p className=\"text-emerald-400 text-sm md:text-base\">Portal de Asesores</p>\n        </div>\n\n        {/* Subtítulo */}\n        <h3 className=\"mt-7 text-[20px] md:text-[22px] font-semibold text-emerald-50\">\n          Preparando tu panel\n        </h3>\n        <p className=\"text-emerald-200/80 text-[15px]\">\n          Cargando componentes y recursos necesarios…\n        </p>\n\n        {/* Barra de progreso estilo inputs v2 (sin caja) */}\n        <div\n          className=\"mt-6 w-full h-[14px] md:h-4 rounded-xl border border-emerald-500/20 bg-emerald-950/40 overflow-hidden mx-auto\"\n          role=\"progressbar\"\n          aria-valuenow={progress}\n          aria-valuemin={0}\n          aria-valuemax={100}\n        >\n          <div\n            className=\"h-full rounded-xl bg-gradient-to-r from-emerald-600 to-emerald-500 transition-[width] duration-300 ease-out relative\"\n            style={{ width: `${progress}%` }}\n          >\n            <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent animate-[pulse_1.6s_ease-in-out_infinite]\" />\n          </div>\n        </div>\n\n        {/* Estado y porcentaje */}\n        <div className=\"mt-3 flex items-center justify-between text-left\">\n          <span className=\"text-emerald-200/70 text-sm md:text-base\">\n            {tips[tipIndex]}\n          </span>\n          <span className=\"text-emerald-300 font-mono font-semibold tabular-nums text-sm md:text-base\">\n            {progress}%\n          </span>\n        </div>\n\n        {/* Dots de actividad */}\n        <div className=\"mt-6 flex justify-center gap-2\">\n          {[0, 1, 2].map((i) => (\n            <span\n              key={i}\n              className=\"w-2.5 h-2.5 rounded-full bg-emerald-400/80\"\n              style={{\n                animation: \"pulse 1.4s ease-in-out infinite\",\n                animationDelay: `${i * 0.18}s`,\n              }}\n            />\n          ))}\n        </div>\n\n        {/* Nota legal mínima */}\n        <p className=\"mt-6 text-[12px] text-emerald-200/60\">\n          Al continuar aceptas los Términos y la Política de Privacidad.\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4307},"client/src/components/advisors.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Handshake, CheckCircle, ShieldQuestion, Star, Users } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function Advisors() {\n  const benefits = [\n    {\n      icon: Handshake,\n      title: \"Comisiones Justas\",\n      description: \"Sin presión, con transparencia total\"\n    },\n    {\n      icon: CheckCircle,\n      title: \"Proceso Simple\",\n      description: \"100% legal y documentado\"\n    },\n    {\n      icon: ShieldQuestion,\n      title: \"Soporte Personalizado\",\n      description: \"Marca seria detrás del producto\"\n    },\n    {\n      icon: Star,\n      title: \"Consolida Reputación\",\n      description: \"Ayuda a fortalecer tu imagen profesional\"\n    }\n  ];\n\n  const [, setLocation] = useLocation();\n  \n  const goToContact = () => {\n    setLocation(\"/contacto\");\n  };\n\n  return (\n    <section id=\"asesores\" className=\"py-10 bg-transparent\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"font-georgia text-4xl md:text-5xl font-bold text-white mb-6\">\n            Asesor Financiero: <span className=\"text-green\">Un Producto Sólido</span>,<br />\n            Fácil de Explicar, Imposible de Ignorar\n          </h2>\n        </div>\n        \n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-16\">\n            {benefits.map((benefit, index) => (\n              <div key={index} className=\"text-center\">\n                <div className=\"w-16 h-16 bg-green/20 rounded-lg mx-auto mb-4 flex items-center justify-center\">\n                  <benefit.icon className=\"text-2xl text-green w-8 h-8\" />\n                </div>\n                <h3 className=\"font-semibold text-white mb-2\">{benefit.title}</h3>\n                <p className=\"text-silver-100 text-sm\">{benefit.description}</p>\n              </div>\n            ))}\n          </div>\n          \n          {/* Testimonial */}\n          <div className=\"testimonial-card bg-black/70 rounded-2xl border border-silver-500/20 p-8 mb-8 transition-all duration-500 hover:border-green/40 cursor-pointer\">\n            <div className=\"flex flex-col md:flex-row items-center space-y-6 md:space-y-0 md:space-x-8\">\n              <div className=\"w-24 h-24 bg-green/20 rounded-full flex items-center justify-center flex-shrink-0\">\n                <Users className=\"text-3xl text-green w-12 h-12\" />\n              </div>\n              <div className=\"text-center md:text-left\">\n                <blockquote className=\"text-lg text-silver-100 mb-4 italic\">\n                  \"Por fin puedo ofrecer algo que protege de verdad el patrimonio de mis clientes. \n                  La tranquilidad que transmite Nakama&Partners es invaluable para consolidar \n                  relaciones a largo plazo.\"\n                </blockquote>\n                <cite className=\"text-white font-semibold\">— Luis M., Asesor Patrimonial y Coach Financiero</cite>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"text-center\">\n            <Button \n              onClick={goToContact}\n              className=\"gradient-navy px-8 py-4 text-white font-semibold hover:opacity-90 h-auto\"\n            >\n              Quiero más información\n            </Button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3401},"client/src/components/authentication-wall.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { EyeIcon, EyeOffIcon } from \"lucide-react\";\n\ninterface AuthenticationWallProps {\n  children: React.ReactNode;\n}\n\nexport default function AuthenticationWall({ children }: AuthenticationWallProps) {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Check if user is already authenticated on component mount\n  useEffect(() => {\n    const authStatus = localStorage.getItem('site_authenticated');\n    if (authStatus === 'true') {\n      setIsAuthenticated(true);\n    }\n  }, []);\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError('');\n\n    // Simple authentication check\n    if (username === 'Nakama' && password === 'Client&PasswordIsThis') {\n      setIsAuthenticated(true);\n      localStorage.setItem('site_authenticated', 'true');\n    } else {\n      setError('Invalid credentials. Please try again.');\n    }\n    \n    setIsLoading(false);\n  };\n\n  const handleLogout = () => {\n    setIsAuthenticated(false);\n    localStorage.removeItem('site_authenticated');\n    setUsername('');\n    setPassword('');\n  };\n\n  // If authenticated, show the site content\n  if (isAuthenticated) {\n    return (\n      <div>\n        {/* Small logout button in top right corner */}\n        <div className=\"fixed top-4 right-4 z-50\">\n          <Button \n            onClick={handleLogout}\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"bg-black/50 text-white border-green-500 hover:bg-green-500/20\"\n          >\n            Logout\n          </Button>\n        </div>\n        {children}\n      </div>\n    );\n  }\n\n  // If not authenticated, show login form\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-black to-gray-900 flex items-center justify-center p-6\">\n      <div className=\"absolute inset-0 bg-[radial-gradient(circle_at_center,rgba(34,197,94,0.1),transparent_50%)]\"></div>\n      \n      <Card className=\"w-full max-w-md bg-black/80 border-gray-700 relative z-10\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl font-bold text-white\">Access Required</CardTitle>\n          <CardDescription className=\"text-gray-400\">\n            Please enter your credentials to continue\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleLogin} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\" className=\"text-gray-300\">Username</Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                required\n                className=\"bg-gray-800 border-gray-600 text-white placeholder-gray-500 focus:border-green-500\"\n                placeholder=\"Enter username\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" className=\"text-gray-300\">Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  required\n                  className=\"bg-gray-800 border-gray-600 text-white placeholder-gray-500 focus:border-green-500 pr-10\"\n                  placeholder=\"Enter password\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white\"\n                >\n                  {showPassword ? <EyeOffIcon size={16} /> : <EyeIcon size={16} />}\n                </button>\n              </div>\n            </div>\n\n            {error && (\n              <Alert className=\"bg-red-900/50 border-red-500\">\n                <AlertDescription className=\"text-red-200\">\n                  {error}\n                </AlertDescription>\n              </Alert>\n            )}\n\n            <Button \n              type=\"submit\" \n              className=\"w-full bg-green-600 hover:bg-green-700 text-white\"\n              disabled={isLoading}\n            >\n              {isLoading ? 'Authenticating...' : 'Access Site'}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5073},"client/src/components/calculator.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Download, TrendingUp, Shield, Award } from \"lucide-react\";\nimport { useCalculator } from \"@/hooks/use-calculator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport jsPDF from \"jspdf\";\nimport logoImg from \"@/assets/Logo-removeBG_1753542032142.png\";\n\nexport default function Calculator() {\n  const { state, updateAmount, updateYears, updateCompoundInterest, calculateResults } = useCalculator();\n  const { toast } = useToast();\n  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false);\n  \n  const results = calculateResults();\n\n  const generatePDF = () => {\n    setIsGeneratingPDF(true);\n    \n    try {\n      const doc = new jsPDF();\n      \n      // Add logo to PDF\n      const logoWidth = 45;\n      const logoHeight = 25;\n      doc.addImage(logoImg, 'PNG', 145, 8, logoWidth, logoHeight);\n      \n      // Configure fonts and colors\n      doc.setFont(\"helvetica\", \"bold\");\n      doc.setFontSize(20);\n      doc.setTextColor(52, 78, 65); // Green color\n      \n      // Header\n      doc.text(\"NAKAMA&PARTNERS\", 20, 25);\n      doc.setFontSize(16);\n      doc.setTextColor(52, 78, 65); // Green color\n      doc.text(\"Simulación de Inversión Personalizada\", 20, 40);\n      \n      // Separator line\n      doc.setDrawColor(52, 78, 65);\n      doc.setLineWidth(1);\n      doc.line(20, 50, 190, 50);\n      \n      // Premium badge\n      doc.setFillColor(52, 78, 65);\n      doc.roundedRect(150, 35, 40, 10, 2, 2, 'F');\n      doc.setTextColor(255, 255, 255);\n      doc.setFontSize(8);\n      doc.text('PREMIUM REPORT', 152, 42);\n      \n      // Investment details\n      doc.setFont(\"helvetica\", \"normal\");\n      doc.setFontSize(12);\n      doc.setTextColor(0, 0, 0);\n      \n      const currentDate = new Date().toLocaleDateString('es-ES');\n      doc.text(`Fecha de simulación: ${currentDate}`, 20, 65);\n      \n      // Investment parameters\n      doc.setFont(\"helvetica\", \"bold\");\n      doc.setFontSize(14);\n      doc.text(\"PARÁMETROS DE INVERSIÓN\", 20, 85);\n      \n      doc.setFont(\"helvetica\", \"normal\");\n      doc.setFontSize(11);\n      doc.text(`• Capital inicial: €${state.amount.toLocaleString()}`, 25, 100);\n      doc.text(`• Plazo de inversión: ${state.years} ${state.years === 1 ? 'año' : 'años'}`, 25, 112);\n      doc.text(`• Tasa de interés: 9% anual fijo`, 25, 124);\n      doc.text(`• Tipo de interés: ${state.compoundInterest ? 'Compuesto' : 'Simple'}`, 25, 136);\n      \n      // Results section\n      doc.setFont(\"helvetica\", \"bold\");\n      doc.setFontSize(14);\n      doc.text(\"RESULTADOS DE LA SIMULACIÓN\", 20, 150);\n      \n      // Results box\n      doc.setFillColor(240, 248, 255); // Light blue background\n      doc.rect(20, 155, 170, 45, 'F');\n      doc.setDrawColor(0, 31, 63);\n      doc.rect(20, 155, 170, 45, 'S');\n      \n      doc.setFont(\"helvetica\", \"normal\");\n      doc.setFontSize(11);\n      doc.text(`Capital inicial:`, 25, 168);\n      doc.text(`€${results.initialAmount.toLocaleString()}`, 140, 168);\n      \n      doc.text(`Intereses generados:`, 25, 182);\n      doc.setTextColor(0, 128, 0); // Green for earnings\n      doc.text(`+€${results.interestGenerated.toLocaleString()}`, 140, 182);\n      \n      doc.setTextColor(0, 0, 0);\n      doc.setFont(\"helvetica\", \"bold\");\n      doc.text(`Capital final:`, 25, 196);\n      doc.setTextColor(0, 31, 63);\n      doc.setFontSize(12);\n      doc.text(`€${results.finalAmount.toLocaleString()}`, 140, 196);\n      \n      // Product information\n      doc.setTextColor(0, 0, 0);\n      doc.setFont(\"helvetica\", \"bold\");\n      doc.setFontSize(14);\n      doc.text(\"CARACTERÍSTICAS DEL PRODUCTO\", 20, 215);\n      \n      doc.setFont(\"helvetica\", \"normal\");\n      doc.setFontSize(10);\n      doc.text(\"• Depósito bancario con rentabilidad fija del 9% anual\", 25, 230);\n      doc.text(\"• Capital protegido mediante contrato bancario\", 25, 242);\n      doc.text(\"• Renovación automática al vencimiento\", 25, 254);\n      doc.text(\"• Sin comisiones de apertura ni mantenimiento\", 25, 266);\n      \n      // Footer\n      doc.setFontSize(8);\n      doc.setTextColor(128, 128, 128);\n      doc.text(\"Esta simulación es orientativa. Rentabilidades pasadas no garantizan rentabilidades futuras.\", 20, 290);\n      doc.text(\"Nakama&Partners - Soluciones de inversión profesionales\", 20, 300);\n      \n      // Generate filename with timestamp\n      const filename = `simulacion-inversion-${Date.now()}.pdf`;\n      \n      // Save the PDF\n      doc.save(filename);\n      \n      toast({\n        title: \"PDF descargado\",\n        description: \"Su simulación personalizada se ha descargado correctamente.\"\n      });\n      \n    } catch (error) {\n      console.error(\"Error generating PDF:\", error);\n      toast({\n        title: \"Error\",\n        description: \"No se pudo generar el PDF. Inténtelo de nuevo.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsGeneratingPDF(false);\n    }\n  };\n\n  const handleDownloadPDF = () => {\n    generatePDF();\n  };\n\n  return (\n    <section className=\"py-8 bg-transparent relative\">\n      <div className=\"container mx-auto px-6\">\n        {/* Header Section */}\n        <div className=\"text-center mb-8 relative\">\n          <h2 className=\"font-playfair text-4xl md:text-5xl font-bold text-white mb-6\">\n            Calculadora Premium de <span className=\"text-green\">Inversiones</span>\n          </h2>\n          <p className=\"text-xl text-silver-100 max-w-3xl mx-auto\">\n            Simula el crecimiento de tu patrimonio con nuestra herramienta exclusiva de proyección financiera.\n          </p>\n        </div>\n        \n        {/* Premium Calculator Container */}\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"bg-gradient-to-br from-black/80 to-gray-900/90 rounded-3xl border border-green/30 shadow-2xl overflow-hidden\">\n            {/* Premium Header Bar */}\n            <div className=\"bg-gradient-to-r from-green/20 to-green/10 p-6 border-b border-green/20\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"p-3 bg-green/20 rounded-full\">\n                    <TrendingUp className=\"h-6 w-6 text-green\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-playfair text-2xl font-bold text-white\">Simulador Avanzado</h3>\n                    <p className=\"text-green text-sm\">Rentabilidad garantizada del 9% anual</p>\n                  </div>\n                </div>\n                \n                {/* Logo in Center */}\n                <div className=\"flex justify-center\">\n                  <img \n                    src={logoImg} \n                    alt=\"Nakama&Partners Logo\" \n                    className=\"h-16 w-auto filter drop-shadow-xl brightness-110 contrast-125\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center space-x-4 text-sm text-silver-100\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Shield className=\"h-4 w-4 text-green\" />\n                    <span>Capital Protegido</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Award className=\"h-4 w-4 text-green\" />\n                    <span>Sin Comisiones</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Calculator Content */}\n            <div className=\"p-8\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n                \n                {/* Left Column - Input Controls */}\n                <div className=\"space-y-8\">\n                  <div>\n                    <Label className=\"block text-white font-semibold mb-4 text-lg\">\n                      💰 Cantidad a Invertir (€)\n                    </Label>\n                    <div className=\"relative\">\n                      <Input\n                        type=\"number\"\n                        min=\"50000\"\n                        step=\"1000\"\n                        value={state.amount}\n                        onChange={(e) => updateAmount(Number(e.target.value))}\n                        className=\"w-full bg-black/50 text-white border-green/30 focus:border-green text-xl p-4 rounded-xl\"\n                      />\n                      <div className=\"absolute right-4 top-1/2 transform -translate-y-1/2 text-green font-semibold\">\n                        EUR\n                      </div>\n                    </div>\n                    <p className=\"text-sm text-silver-100 mt-2\">Inversión mínima: €50,000</p>\n                  </div>\n                  \n                  <div>\n                    <Label className=\"block text-white font-semibold mb-4 text-lg\">\n                      ⏱️ Plazo de Inversión ({state.years} {state.years === 1 ? 'año' : 'años'})\n                    </Label>\n                    <div className=\"px-4\">\n                      <Slider\n                        value={[state.years]}\n                        onValueChange={(value) => updateYears(value[0])}\n                        min={1}\n                        max={5}\n                        step={1}\n                        className=\"w-full\"\n                      />\n                      <div className=\"flex justify-between text-sm text-silver-100 mt-3\">\n                        <span>1 año</span>\n                        <span>2 años</span>\n                        <span>3 años</span>\n                        <span>4 años</span>\n                        <span>5 años</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"bg-black/30 rounded-xl p-6 border border-green/20\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Checkbox\n                        id=\"compound-interest\"\n                        checked={state.compoundInterest}\n                        onCheckedChange={updateCompoundInterest}\n                        className=\"border-green data-[state=checked]:bg-green\"\n                      />\n                      <Label htmlFor=\"compound-interest\" className=\"text-white cursor-pointer font-semibold\">\n                        🚀 Activar Interés Compuesto\n                      </Label>\n                    </div>\n                    <p className=\"text-sm text-silver-100 mt-2 ml-6\">\n                      Maximiza tu rentabilidad reinvirtiendo automáticamente los beneficios\n                    </p>\n                  </div>\n                </div>\n                \n                {/* Right Column - Results */}\n                <div className=\"bg-gradient-to-br from-green/10 to-green/5 rounded-2xl p-8 border border-green/20\">\n                  <div className=\"flex items-center space-x-3 mb-6\">\n                    <div className=\"p-2 bg-green/20 rounded-lg\">\n                      <TrendingUp className=\"h-5 w-5 text-green\" />\n                    </div>\n                    <h3 className=\"font-playfair text-2xl font-bold text-white\">Proyección Financiera</h3>\n                  </div>\n                  \n                  <div className=\"space-y-6\">\n                    <div className=\"bg-black/30 rounded-xl p-6\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-silver-100 font-medium\">Inversión Inicial:</span>\n                        <span className=\"text-white font-bold text-lg\">€{results.initialAmount.toLocaleString()}</span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"bg-green/10 rounded-xl p-6 border border-green/20\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-silver-100 font-medium\">Beneficios Generados:</span>\n                        <span className=\"text-green font-bold text-lg\">+€{results.interestGenerated.toLocaleString()}</span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"bg-gradient-to-r from-green/20 to-green/10 rounded-xl p-6 border border-green/30\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-white font-bold text-lg\">Capital Final:</span>\n                        <span className=\"text-green font-bold text-2xl\">€{results.finalAmount.toLocaleString()}</span>\n                      </div>\n                      <div className=\"mt-2 text-center\">\n                        <span className=\"text-sm text-green font-semibold\">\n                          +{((results.interestGenerated / results.initialAmount) * 100).toFixed(1)}% de rentabilidad total\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <Button \n                    onClick={handleDownloadPDF}\n                    disabled={isGeneratingPDF}\n                    className=\"w-full mt-8 bg-gradient-to-r from-green to-green/80 text-white hover:from-green/90 hover:to-green/70 transition-all duration-300 py-4 text-lg font-semibold rounded-xl shadow-lg\"\n                  >\n                    <Download className=\"mr-3 h-5 w-5\" />\n                    {isGeneratingPDF ? \"Generando PDF Premium...\" : \"Descargar Informe Premium\"}\n                  </Button>\n                  \n                  <div className=\"mt-4 text-center\">\n                    <p className=\"text-xs text-silver-100\">\n                      Documento personalizado con tu proyección financiera exclusiva\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":14117},"client/src/components/comparison.tsx":{"content":"export default function Comparison() {\n  const data = [\n    {\n      product: \"Depósito Tradicional\",\n      return: \"2-3%\",\n      risk: \"Bajo\",\n      liquidity: \"Alta\",\n      guarantee: \"Sí\",\n      riskColor: \"text-green-400\",\n      liquidityColor: \"text-green-400\",\n      guaranteeColor: \"text-green-400\"\n    },\n    {\n      product: \"Fondo Conservador\",\n      return: \"4-6%\",\n      risk: \"Medio\",\n      liquidity: \"Media\",\n      guarantee: \"Parcial\",\n      riskColor: \"text-yellow-400\",\n      liquidityColor: \"text-yellow-400\",\n      guaranteeColor: \"text-yellow-400\"\n    },\n    {\n      product: \"Nakama&Partners\",\n      return: \"9%\",\n      risk: \"Nula\",\n      liquidity: \"Alta\",\n      guarantee: \"Sí (Pignorado)\",\n      riskColor: \"text-green-400\",\n      liquidityColor: \"text-green-400\",\n      guaranteeColor: \"text-green-400\",\n      highlighted: true\n    }\n  ];\n\n  return (\n    <section className=\"py-10 bg-transparent\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"font-georgia text-4xl md:text-5xl font-bold text-white mb-6\">\n            <span className=\"text-green\">Comparativa</span> con Otras Opciones de Inversión\n          </h2>\n        </div>\n        \n        <div className=\"max-w-4xl mx-auto overflow-x-auto\">\n          <table className=\"w-full bg-black/70 rounded-xl border border-silver-500/20\">\n            <thead>\n              <tr className=\"border-b border-silver-500/30\">\n                <th className=\"text-left p-6 text-white font-georgia text-xl\">Producto</th>\n                <th className=\"text-center p-6 text-white font-georgia text-xl\">Rentabilidad</th>\n                <th className=\"text-center p-6 text-white font-georgia text-xl\">Riesgo</th>\n                <th className=\"text-center p-6 text-white font-georgia text-xl\">Liquidez</th>\n                <th className=\"text-center p-6 text-white font-georgia text-xl\">Garantía Jurídica</th>\n              </tr>\n            </thead>\n            <tbody>\n              {data.map((row, index) => (\n                <tr \n                  key={index} \n                  className={`border-b border-silver-500/20 ${row.highlighted ? 'bg-green/10 border border-gold' : ''}`}\n                >\n                  <td className={`p-6 ${row.highlighted ? 'text-white font-semibold' : 'text-silver-100'}`}>\n                    {row.product}\n                  </td>\n                  <td className={`p-6 text-center ${row.highlighted ? 'text-green font-bold text-xl' : 'text-silver-100'}`}>\n                    {row.return}\n                  </td>\n                  <td className={`p-6 text-center ${row.riskColor} ${row.highlighted ? 'font-semibold' : ''}`}>\n                    {row.risk}\n                  </td>\n                  <td className={`p-6 text-center ${row.liquidityColor} ${row.highlighted ? 'font-semibold' : ''}`}>\n                    {row.liquidity}\n                  </td>\n                  <td className={`p-6 text-center ${row.guaranteeColor} ${row.highlighted ? 'font-semibold' : ''}`}>\n                    {row.guarantee}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3242},"client/src/components/compound-interest-chart.tsx":{"content":"import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from \"recharts\";\nimport { HelpCircle } from \"lucide-react\";\nimport { Tooltip as UiTooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\n\ninterface CompoundInterestChartProps {\n  initialAmount?: number;\n  years?: number;\n  rate?: number;\n  className?: string;\n}\n\nexport default function CompoundInterestChart({\n  initialAmount = 50000,\n  years = 10,\n  rate = 0.09,\n  className = \"\",\n}: CompoundInterestChartProps) {\n  // Generar datos\n  const data: Array<{ year: number; conInteres: number; sinInteres: number; diferencia: number }> = [];\n  for (let year = 0; year <= years; year++) {\n    const compoundAmount = initialAmount * Math.pow(1 + rate, year);\n    const simpleAmount = initialAmount + initialAmount * rate * year;\n\n    data.push({\n      year,\n      conInteres: Math.round(compoundAmount),\n      sinInteres: Math.round(simpleAmount),\n      diferencia: Math.round(compoundAmount - simpleAmount),\n    });\n  }\n\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      const conInteres = payload[0].value;\n      const sinInteres = payload[1].value;\n      const diferencia = conInteres - sinInteres;\n\n      return (\n        <div className=\"bg-black/95 p-4 rounded-lg border border-green-500/30 backdrop-blur-sm\">\n          <p className=\"text-white font-semibold mb-3\">Año {label}</p>\n\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-green-400 text-sm\">Con interés compuesto:</span>\n              <span className=\"text-green-400 font-bold\">€{conInteres.toLocaleString()}</span>\n            </div>\n\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-gray-400 text-sm\">Sin interés compuesto:</span>\n              <span className=\"text-gray-400 font-bold\">€{sinInteres.toLocaleString()}</span>\n            </div>\n\n            <div className=\"border-t border-gray-600 pt-2 mt-2\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-yellow-400 text-sm\">Diferencia:</span>\n                <span className=\"text-yellow-400 font-bold\">€{diferencia.toLocaleString()}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div\n      className={`bg-black/70 rounded-xl p-8 border border-silver-500/20 border-transparent transition-all duration-300 hover:border-green-500 hover:bg-black/80 hover:shadow-lg hover:shadow-green-500/20 cursor-pointer ${className}`}\n    >\n      <div className=\"mb-8 text-center\">\n        <div className=\"flex items-center justify-center gap-2 mb-2\">\n          <h3 className=\"font-playfair text-2xl font-bold text-white\">Proyección de Crecimiento</h3>\n\n          <TooltipProvider delayDuration={100}>\n            <UiTooltip>\n              <TooltipTrigger asChild>\n                <HelpCircle className=\"w-5 h-5 md:w-6 md:h-6 text-emerald-300/90 hover:text-emerald-300 cursor-help\" />\n              </TooltipTrigger>\n              <TooltipContent\n                side=\"right\"\n                align=\"start\"\n                sideOffset={12}\n                avoidCollisions={false}\n                className=\"max-w-[260px] md:max-w-[420px] lg:max-w-[440px] p-3 md:p-4 text-sm md:text-base leading-relaxed bg-black/100 text-emerald-50 border border-emerald-500/25 rounded-xl shadow-[0_10px_40px_rgba(0,0,0,0.45)]\"\n              >\n                El interés compuesto reinvierte automáticamente los intereses generados, así cada período calculas\n                intereses sobre el capital inicial + los intereses previos.\n              </TooltipContent>\n            </UiTooltip>\n          </TooltipProvider>\n        </div>\n\n        <p className=\"text-silver-100 text-sm\">\n          Comparación: €{initialAmount.toLocaleString()} al {rate * 100}% anual • Con vs Sin interés compuesto\n        </p>\n      </div>\n\n      <div className=\"h-[450px]\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <LineChart data={data} margin={{ top: 20, right: 40, left: 30, bottom: 20 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#334155\" opacity={0.3} />\n            <XAxis dataKey=\"year\" stroke=\"#94a3b8\" fontSize={14} tickFormatter={(value) => `Año ${value}`} />\n            <YAxis\n              stroke=\"#94a3b8\"\n              fontSize={14}\n              domain={[50000, 130000]}\n              ticks={[50000, 70000, 90000, 110000, 130000]}\n              tickFormatter={(value) => `€${(value / 1000).toFixed(0)}K`}\n            />\n            {/* <YAxis\n              stroke=\"#94a3b8\"\n              fontSize={14}\n              domain={[Math.max(50000, initialAmount), (dataMax: number) => Math.ceil(dataMax * 1.05 / 1000) * 1000]}\n              tickFormatter={(value) => `€${(value / 1000).toFixed(0)}K`}\n            />*/}\n\n            <Tooltip content={<CustomTooltip />} />\n            <Legend\n              wrapperStyle={{ paddingTop: \"20px\" }}\n              iconType=\"line\"\n              formatter={(value, entry) => (\n                <span style={{ color: entry.color as string, fontSize: \"14px\", fontWeight: \"bold\" }}>{value}</span>\n              )}\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"conInteres\"\n              stroke=\"#22c55e\"\n              strokeWidth={4}\n              dot={{ fill: \"#22c55e\", strokeWidth: 2, r: 5 }}\n              name=\"Con Interés Compuesto\"\n            />\n            <Line\n              type=\"monotone\"\n              dataKey=\"sinInteres\"\n              stroke=\"#9ca3af\"\n              strokeWidth={3}\n              strokeDasharray=\"8 5\"\n              dot={{ fill: \"#9ca3af\", strokeWidth: 2, r: 4 }}\n              name=\"Sin Interés Compuesto\"\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n\n      <div className=\"mt-8 grid grid-cols-1 md:grid-cols-3 gap-4 text-center\">\n        <div className=\"bg-black/50 p-4 rounded-lg\">\n          <p className=\"text-green-400 text-lg font-bold\">€{data[years].conInteres.toLocaleString()}</p>\n          <p className=\"text-silver-100 text-sm\">Con interés compuesto ({years} años)</p>\n        </div>\n\n        <div className=\"bg-black/50 p-4 rounded-lg\">\n          <p className=\"text-gray-400 text-lg font-bold\">€{data[years].sinInteres.toLocaleString()}</p>\n          <p className=\"text-silver-100 text-sm\">Sin interés compuesto ({years} años)</p>\n        </div>\n\n        <div className=\"bg-black/50 p-4 rounded-lg\">\n          <p className=\"text-yellow-400 text-lg font-bold\">€{data[years].diferencia.toLocaleString()}</p>\n          <p className=\"text-silver-100 text-sm\">Diferencia adicional</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6912},"client/src/components/downloads.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { FileText, File, Book, Download } from \"lucide-react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Downloads() {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    type: \"\",\n    message: \"\"\n  });\n\n  const submitLeadMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/leads\", data);\n      return response.json();\n    },\n    onSuccess: async (data) => {\n      if (data.success) {\n        toast({\n          title: \"Registro exitoso\",\n          description: \"La documentación se ha enviado a su email.\"\n        });\n        \n        // Send documents\n        await apiRequest(\"POST\", \"/api/send-documents\", {\n          leadId: data.leadId,\n          email: formData.email\n        });\n        \n        // Reset form\n        setFormData({\n          name: \"\",\n          email: \"\",\n          phone: \"\",\n          type: \"\",\n          message: \"\"\n        });\n      }\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo procesar su solicitud. Inténtelo de nuevo.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name || !formData.email || !formData.type) {\n      toast({\n        title: \"Campos requeridos\",\n        description: \"Por favor complete todos los campos obligatorios.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    submitLeadMutation.mutate({\n      ...formData,\n      source: \"download\"\n    });\n  };\n\n  const documents = [\n    {\n      icon: FileText,\n      title: \"Dossier Institucional\",\n      description: \"Información completa de la empresa y estructura\"\n    },\n    {\n      icon: File,\n      title: \"Contrato Real Pignorado\",\n      description: \"Ejemplo de contrato utilizado (datos anonimizados)\"\n    },\n    {\n      icon: Book,\n      title: \"Manual del Producto\",\n      description: \"Guía completa del funcionamiento y garantías\"\n    }\n  ];\n\n  return (\n    <section className=\"py-10 bg-transparent\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"font-georgia text-4xl md:text-5xl font-bold text-white mb-6\">\n            <span className=\"block md:hidden\">\n              <span className=\"block max-w-[280px] mx-auto\">Información Completa</span>\n              <span className=\"block max-w-[200px] mx-auto\"><span className=\"text-green\">a Tu Alcance</span></span>\n            </span>\n            <span className=\"hidden md:block\">\n              Información Completa <span className=\"text-green\">a Tu Alcance</span>\n            </span>\n          </h2>\n          <p className=\"text-xl text-silver-100 max-w-3xl mx-auto\">\n            <span className=\"block md:hidden max-w-[300px] mx-auto\">\n              <span className=\"block\">Accede a la documentación clave para</span>\n              <span className=\"block\">entender la solidez y transparencia</span>\n              <span className=\"block\">de Nakama&Partners.</span>\n            </span>\n            <span className=\"hidden md:block\">\n              Accede a la documentación clave para entender la solidez y transparencia de Nakama&Partners.\n            </span>\n          </p>\n        </div>\n        \n        <div className=\"download-form-card max-w-4xl mx-auto bg-black/70 rounded-2xl border border-silver-500/20 p-8 transition-all duration-500 hover:border-green/40\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 mb-8\">\n            {documents.map((doc, index) => (\n              <div key={index} className=\"text-center\">\n                <div className=\"w-20 h-24 bg-green/20 rounded-lg mx-auto mb-4 flex items-center justify-center\">\n                  <doc.icon className=\"text-3xl text-green w-8 h-8\" />\n                </div>\n                <h3 className=\"font-semibold text-white mb-2\">{doc.title}</h3>\n                <p className=\"text-sm text-silver-100\">{doc.description}</p>\n              </div>\n            ))}\n          </div>\n          \n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Input\n                type=\"text\"\n                placeholder=\"Nombre Completo\"\n                value={formData.name}\n                onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                className=\"bg-charcoal text-white border-silver-500/30 focus:border-gold\"\n                required\n              />\n              <Input\n                type=\"email\"\n                placeholder=\"Email Profesional\"\n                value={formData.email}\n                onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                className=\"bg-charcoal text-white border-silver-500/30 focus:border-gold\"\n                required\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Input\n                type=\"tel\"\n                placeholder=\"Teléfono\"\n                value={formData.phone}\n                onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}\n                className=\"bg-charcoal text-white border-silver-500/30 focus:border-gold\"\n              />\n              <Select\n                value={formData.type}\n                onValueChange={(value) => setFormData(prev => ({ ...prev, type: value }))}\n                required\n              >\n                <SelectTrigger className=\"bg-charcoal text-white border-silver-500/30 focus:border-gold\">\n                  <SelectValue placeholder=\"Soy...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Asesor Financiero\">Asesor Financiero</SelectItem>\n                  <SelectItem value=\"Inversor Particular\">Inversor Particular</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <Textarea\n              placeholder=\"Mensaje (opcional)\"\n              value={formData.message}\n              onChange={(e) => setFormData(prev => ({ ...prev, message: e.target.value }))}\n              rows={3}\n              className=\"w-full bg-charcoal text-white border-silver-500/30 focus:border-gold resize-none\"\n            />\n            \n            <Button \n              type=\"submit\"\n              disabled={submitLeadMutation.isPending}\n              className=\"w-full bg-green text-black py-4 font-semibold hover:bg-green/90 h-auto\"\n            >\n              <Download className=\"mr-2 h-4 w-4\" />\n              {submitLeadMutation.isPending ? \"Procesando...\" : \"Descargar Documentación Completa\"}\n            </Button>\n          </form>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":7303},"client/src/components/final-cta.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Calendar, Download } from \"lucide-react\";\n\nexport default function FinalCTA() {\n  const scheduleCalendly = () => {\n    // In a real implementation, this would open Calendly widget\n    console.log(\"Opening Calendly for scheduling\");\n  };\n\n  const downloadDossier = () => {\n    const element = document.getElementById(\"downloads\");\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  return (\n    <section id=\"contacto\" className=\"py-10 bg-transparent\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"font-georgia text-4xl md:text-5xl font-bold text-white mb-6\">\n            <span className=\"block md:hidden\">\n              <span className=\"block max-w-[300px] mx-auto\">¿Quieres Formar Parte de una</span>\n              <span className=\"block max-w-[220px] mx-auto\"><span className=\"text-green\">Solución</span> que Realmente</span>\n              <span className=\"block max-w-[120px] mx-auto\">Protege?</span>\n            </span>\n            <span className=\"hidden md:block\">\n              ¿Quieres Formar Parte de una <span className=\"text-green\">Solución</span><br />\n              que Realmente Protege?\n            </span>\n          </h2>\n        </div>\n        \n        <div className=\"max-w-2xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <Button\n            onClick={scheduleCalendly}\n            className=\"bg-[#3f8358] text-white py-6 px-8 font-semibold text-lg hover:bg-[#356f4a] transition-colors h-auto flex flex-col items-center space-y-2\"\n          >\n            <Calendar className=\"text-xl w-6 h-6\" />\n            <span>Agendar reunión privada</span>\n          </Button>\n\n\n\n\n          {/* Botón para descargar el dossier completo */}\n          <Button\n            onClick={downloadDossier}\n            className=\"bg-[#344e41] text-white py-6 px-8 font-semibold text-lg hover:bg-[#2b3b33] h-auto flex flex-col items-center space-y-2\"\n          >\n            <Download className=\"text-xl w-6 h-6\" />\n            <span>Descargar dossier completo</span>\n          </Button>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2215},"client/src/components/footer.tsx":{"content":"import { Linkedin, Youtube, Instagram } from \"lucide-react\";\nimport logoImg from \"@/assets/Logo-removeBG_1752488347081.png\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"gradient-dark border-t border-silver-500/20 py-6\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8 mb-8\">\n          <div>\n            <div className=\"flex items-center space-x-2 mb-4\">\n              <img src={logoImg} alt=\"Nakama&Partners\" className=\"w-8 h-8\" />\n              <span className=\"font-cormorant text-lg font-semibold text-white\">Nakama&Partners</span>\n            </div>\n            <p className=\"text-silver-100 text-sm\">\n              Protegiendo patrimonios con estructura, transparencia y rentabilidad fija.\n            </p>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold text-white mb-4\">Enlaces Legales</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li><a href=\"/aviso-legal\" className=\"text-silver-100 hover:text-green transition-colors\">Aviso Legal</a></li>\n              <li><a href=\"/politica-uso\" className=\"text-silver-100 hover:text-green transition-colors\">Política de uso</a></li>\n              <li><a href=\"/politica-seguridad\" className=\"text-silver-100 hover:text-green transition-colors\">Política de seguridad</a></li>\n              <li><a href=\"/proteccion-datos\" className=\"text-silver-100 hover:text-green transition-colors\">Protección Datos Básico</a></li>\n              <li><a href=\"/politica-cookies\" className=\"text-silver-100 hover:text-green transition-colors\">Política de cookies</a></li>\n            </ul>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold text-white mb-4\">Información</h3>\n            <ul className=\"space-y-2 text-sm\">\n              <li><a href=\"#\" className=\"text-silver-100 hover:text-green transition-colors\">Preguntas Frecuentes</a></li>\n              <li><a href=\"#\" className=\"text-silver-100 hover:text-green transition-colors\">Contrato Descargable</a></li>\n              <li><a href=\"#\" className=\"text-silver-100 hover:text-green transition-colors\">Contacto Legal</a></li>\n            </ul>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold text-white mb-4\">Contacto</h3>\n            <p className=\"text-silver-100 text-sm mb-4\">dpo@nakamapartners.com</p>\n\n            <div className=\"flex space-x-4\">\n              <a href=\"#\" className=\"text-silver-100 hover:text-green transition-colors\">\n                <Linkedin className=\"text-xl w-5 h-5\" />\n              </a>\n              <a href=\"#\" className=\"text-silver-100 hover:text-green transition-colors\">\n                <Youtube className=\"text-xl w-5 h-5\" />\n              </a>\n              <a href=\"#\" className=\"text-silver-100 hover:text-green transition-colors\">\n                <Instagram className=\"text-xl w-5 h-5\" />\n              </a>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"border-t border-silver-500/20 pt-8 text-center\">\n          <p className=\"text-silver-100 text-sm\">© 2025 Nakama&Partners. Todos los derechos reservados.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}","size_bytes":3212},"client/src/components/growth-chart.tsx":{"content":"import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\ninterface GrowthChartProps {\n  initialAmount?: number;\n  years?: number;\n  rate?: number;\n  showTitle?: boolean;\n  className?: string;\n}\n\nexport default function GrowthChart({ \n  initialAmount = 100000, \n  years = 10, \n  rate = 0.09,\n  showTitle = true,\n  className = \"\"\n}: GrowthChartProps) {\n  // Generate data points for the chart\n  const data = [];\n  for (let year = 0; year <= years; year++) {\n    const amount = initialAmount * Math.pow(1 + rate, year);\n    data.push({\n      year: year,\n      amount: Math.round(amount),\n      formatted: `€${Math.round(amount).toLocaleString()}`\n    });\n  }\n\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      const value = payload[0].value;\n      const gain = value - initialAmount;\n      const gainPercentage = ((value - initialAmount) / initialAmount * 100).toFixed(1);\n      \n      return (\n        <div className=\"bg-black/90 p-4 rounded-lg border border-gold/30 backdrop-blur-sm\">\n          <p className=\"text-white font-semibold mb-2\">Año {label}</p>\n          <p className=\"text-green text-lg font-bold mb-1\">\n            €{value.toLocaleString()}\n          </p>\n          <p className=\"text-green-400 text-sm\">\n            +€{gain.toLocaleString()} ({gainPercentage}%)\n          </p>\n          <p className=\"text-silver-100 text-xs mt-1\">\n            Rendimiento acumulado\n          </p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className={`bg-black/70 rounded-xl p-6 border border-silver-500/20 ${className}`}>\n      {showTitle && (\n        <div className=\"mb-6\">\n          <h3 className=\"font-playfair text-2xl font-bold text-white mb-2\">\n            Proyección de Crecimiento - 9% Anual\n          </h3>\n          <p className=\"text-silver-100 text-sm\">\n            Inversión inicial: €{initialAmount.toLocaleString()} • Tasa fija: {(rate * 100)}% anual\n          </p>\n        </div>\n      )}\n      \n      <div className=\"h-96\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <LineChart data={data} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#334155\" opacity={0.3} />\n            <XAxis \n              dataKey=\"year\" \n              stroke=\"#94a3b8\"\n              fontSize={12}\n              tickFormatter={(value) => `Año ${value}`}\n            />\n            <YAxis \n              stroke=\"#94a3b8\"\n              fontSize={12}\n              tickFormatter={(value) => `€${(value / 1000).toFixed(0)}K`}\n            />\n            <Tooltip content={<CustomTooltip />} />\n            <Line \n              type=\"monotone\" \n              dataKey=\"amount\" \n              stroke=\"#DAA520\" \n              strokeWidth={3}\n              dot={{ fill: '#DAA520', strokeWidth: 2, r: 4 }}\n              activeDot={{ r: 6, fill: '#DAA520', stroke: '#ffffff', strokeWidth: 2 }}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n\n      <div className=\"mt-6 grid grid-cols-3 gap-4 text-center\">\n        <div className=\"bg-black/50 p-3 rounded-lg\">\n          <div className=\"text-green font-bold text-lg\">\n            ${data[years].amount.toLocaleString()}\n          </div>\n          <div className=\"text-silver-100 text-xs\">Valor final</div>\n        </div>\n        <div className=\"bg-black/50 p-3 rounded-lg\">\n          <div className=\"text-green-400 font-bold text-lg\">\n            +${(data[years].amount - initialAmount).toLocaleString()}\n          </div>\n          <div className=\"text-silver-100 text-xs\">Ganancia total</div>\n        </div>\n        <div className=\"bg-black/50 p-3 rounded-lg\">\n          <div className=\"text-blue-400 font-bold text-lg\">\n            {((data[years].amount - initialAmount) / initialAmount * 100).toFixed(0)}%\n          </div>\n          <div className=\"text-silver-100 text-xs\">Rendimiento total</div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4051},"client/src/components/header.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Menu } from \"lucide-react\";\nimport logoImg from \"@/assets/Logo-removeBG_1752488347081.png\";\n\nexport default function Header() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [location] = useLocation();\n\n  const isActive = (path: string) => {\n    if (path === \"/\" && location === \"/\") return true;\n    if (path !== \"/\" && location.startsWith(path)) return true;\n    return false;\n  };\n\n  const [, setLocation] = useLocation();\n\n  const goToContact = () => {\n    setLocation(\"/contacto\");\n    setIsOpen(false);\n  };\n\n  return (\n    <header className=\"fixed top-0 left-0 right-0 z-50 bg-black/80 backdrop-blur-md border-b border-silver-500/20\">\n      <nav className=\"container mx-auto px-6 py-4 flex items-center justify-between\">\n        <Link href=\"/\">\n          <div className=\"flex items-center space-x-3 cursor-pointer\">\n            <img src={logoImg} alt=\"Nakama&Partners\" className=\"w-14 h-14\" />\n            <span className=\"font-cormorant text-2xl font-semibold text-white\">Nakama&Partners</span>\n          </div>\n        </Link>\n\n        <div className=\"hidden md:flex items-center space-x-8\">\n          <Link\n            href=\"/\"\n            className={`transition-colors ${isActive(\"/\") ? \"text-green\" : \"text-silver-100 hover:text-green\"}`}\n          >\n            Inicio\n          </Link>\n          <Link\n            href=\"/inversiones\"\n            className={`transition-colors ${isActive(\"/inversiones\") ? \"text-green\" : \"text-silver-100 hover:text-green\"}`}\n          >\n            Inversiones\n          </Link>\n          <Link\n            href=\"/nosotros\"\n            className={`transition-colors ${isActive(\"/nosotros\") ? \"text-green\" : \"text-silver-100 hover:text-green\"}`}\n          >\n            Nosotros\n          </Link>\n          <Link\n            href=\"/calculadora\"\n            className={`transition-colors ${isActive(\"/calculadora\") ? \"text-green\" : \"text-silver-100 hover:text-green\"}`}\n          >\n            Calculadora\n          </Link>\n          <Link\n            href=\"/contacto\"\n            className={`transition-colors ${isActive(\"/contacto\") ? \"text-green\" : \"text-silver-100 hover:text-green\"}`}\n          >\n            Contacto\n          </Link>\n          <Link\n            href=\"/login\"\n            className=\"bg-[#344e41] hover:bg-[#2d4235] text-white px-4 py-2 rounded-lg transition-colors\"\n          >\n            Partners\n          </Link>\n        </div>\n\n        {/* Botón desktop con nuevo color */}\n        <Button\n          onClick={goToContact}\n          className=\"hidden md:block bg-[#3f8358] hover:bg-[#356e4a] px-6 py-3 text-white font-semibold\"\n        >\n          Quiero más información\n        </Button>\n\n        <Sheet open={isOpen} onOpenChange={setIsOpen}>\n          <SheetTrigger asChild>\n            <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden text-white\">\n              <Menu className=\"h-6 w-6\" />\n            </Button>\n          </SheetTrigger>\n          <SheetContent side=\"right\" className=\"bg-black border-silver-500/20\">\n            <div className=\"flex flex-col space-y-6 mt-8\">\n              <Link\n                href=\"/\"\n                className={`text-left transition-colors ${isActive(\"/\") ? \"text-green\" : \"text-silver-100 hover:text-green\"}`}\n                onClick={() => setIsOpen(false)}\n              >\n                Inicio\n              </Link>\n              <Link\n                href=\"/inversiones\"\n                className={`text-left transition-colors ${isActive(\"/inversiones\") ? \"text-green\" : \"text-silver-100 hover:text-green\"}`}\n                onClick={() => setIsOpen(false)}\n              >\n                Inversiones\n              </Link>\n              <Link\n                href=\"/nosotros\"\n                className={`text-left transition-colors ${isActive(\"/nosotros\") ? \"text-green\" : \"text-silver-100 hover:text-green\"}`}\n                onClick={() => setIsOpen(false)}\n              >\n                Nosotros\n              </Link>\n              <Link\n                href=\"/calculadora\"\n                className={`text-left transition-colors ${isActive(\"/calculadora\") ? \"text-green\" : \"text-silver-100 hover:text-green\"}`}\n                onClick={() => setIsOpen(false)}\n              >\n                Calculadora\n              </Link>\n              <Link\n                href=\"/contacto\"\n                className={`text-left transition-colors ${isActive(\"/contacto\") ? \"text-green\" : \"text-silver-100 hover:text-green\"}`}\n                onClick={() => setIsOpen(false)}\n              >\n                Contacto\n              </Link>\n              <Link\n                href=\"/login\"\n                className=\"bg-[#344e41] hover:bg-[#2d4235] text-white px-4 py-2 rounded-lg transition-colors text-center\"\n                onClick={() => setIsOpen(false)}\n              >\n                Partners\n              </Link>\n\n              {/* Botón móvil con nuevo color */}\n              <Button\n                onClick={goToContact}\n                className=\"bg-[#3f8358] hover:bg-[#356e4a] text-white font-semibold\"\n              >\n                Quiero más información\n              </Button>\n            </div>\n          </SheetContent>\n        </Sheet>\n      </nav>\n    </header>\n  );\n}\n","size_bytes":5444},"client/src/components/hero.tsx":{"content":"import { useEffect, useMemo, useRef, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\n\nimport ADCB from \"@/assets/ADCB_BANK.png\";\nimport FAB from \"@/assets/FAB_BANK.png\";\nimport NBD from \"@/assets/NBD_BANK.png\";\nimport DIB from \"@/assets/DIB_BANK.png\";\nimport MASHREQ from \"@/assets/MASHREQ_BANK.png\";\nimport RAK from \"@/assets/RAK_BANK.png\";\n\nexport default function Hero() {\n  const [, setLocation] = useLocation();\n  const goToContact = () => setLocation(\"/contacto\");\n\n  // Orden: ADCB → FAB → NBD → DIB → MASHREQ → RAK\n  const logos = useMemo(() => [ADCB, FAB, NBD, DIB, MASHREQ, RAK], []);\n\n  // Refs para medir el ancho del grupo A y ajustar la animación/viewport\n  const trackRef = useRef<HTMLDivElement>(null);\n  const groupRef = useRef<HTMLDivElement>(null);\n  const [groupW, setGroupW] = useState(0);\n\n  useEffect(() => {\n    const update = () => {\n      if (!trackRef.current || !groupRef.current) return;\n\n      const half = groupRef.current.getBoundingClientRect().width; // ancho del grupo A\n      setGroupW(half);\n\n      // Velocidad aumentada significativamente: de 50 px/s a 100 px/s\n      const speed = 100;\n      const dur = Math.max(half / speed, 12);\n\n      trackRef.current.style.setProperty(\"--half\", `${half}px`);\n      trackRef.current.style.setProperty(\"--dur\", `${dur}s`);\n    };\n\n    const ro = new ResizeObserver(update);\n    if (groupRef.current) ro.observe(groupRef.current);\n    update();\n\n    // Recalcular cuando carguen las imágenes\n    groupRef.current?.querySelectorAll(\"img\")?.forEach((img) => {\n      const el = img as HTMLImageElement;\n      if (!el.complete) el.addEventListener(\"load\", update, { once: true });\n    });\n\n    return () => ro.disconnect();\n  }, []);\n\n  // Tamaños: primeros 3 logos más grandes; últimos 3 (nuevos) un poco más pequeños\n  const sizeOld = \"h-12 md:h-[3.75rem] lg:h-[4.5rem]\";            // ~48 / 60 / 72 px\n  const sizeNew = \"h-[2.375rem] md:h-[3rem] lg:h-[3.625rem]\";     // ~38 / 48 / 58 px\n\n  return (\n    <section id=\"inicio\" className=\"min-h-[90svh] flex items-start justify-center pt-32 md:pt-40\">\n      {/* Keyframes del carrusel */}\n      <style>{`\n        @keyframes marqueeLoop {\n          from { transform: translateX(0); }\n          to   { transform: translateX(calc(var(--half, 0px) * -1)); }\n        }\n      `}</style>\n\n      <div className=\"container mx-auto px-6 text-center\">\n        {/* Título → Subtítulo → Descripción */}\n        <h1 className=\"font-georgia text-5xl md:text-7xl font-bold text-green tracking-tight mb-3 text-shadow\">\n          <span className=\"block md:hidden\">\n            <span className=\"block text-center\">9% Fijo Anual</span>\n          </span>\n          <span className=\"hidden md:block\">9% Fijo Anual</span>\n        </h1>\n\n        <h2 className=\"text-2xl md:text-3xl text-silver-100/95 font-semibold leading-snug mb-4\">\n          <span className=\"block md:hidden\">\n            <span className=\"block max-w-[300px] mx-auto\">Capital protegido por</span>\n            <span className=\"block max-w-[240px] mx-auto\">contrato bancario</span>\n            <span className=\"block max-w-[160px] mx-auto\">pignorado</span>\n          </span>\n          <span className=\"hidden md:block\">Capital protegido por contrato bancario pignorado</span>\n        </h2>\n\n        <p className=\"text-base md:text-lg text-silver-100/90 mb-8 max-w-3xl mx-auto leading-relaxed\">\n          Producto exclusivo para perfiles conservadores, sin exposición al mercado. Gestionado con estructuras\n          bancarias, firmado digitalmente y auditado legalmente.\n        </p>\n\n        <Button\n          onClick={goToContact}\n          className=\"bg-green text-black px-12 py-4 text-xl font-bold hover:bg-green/90 transition-colors h-auto\"\n        >\n          Quiero más información\n        </Button>\n\n        {/* Métricas */}\n        <div className=\"mt-16 grid grid-cols-1 md:grid-cols-3 gap-8 max-w-4xl mx-auto\">\n          <div className=\"text-center p-6 rounded-xl bg-black/30 border border-transparent transition-all duration-300 hover:border-green-500 hover:bg-black/50 hover:shadow-lg hover:shadow-green-500/20 cursor-pointer\">\n            <div className=\"text-3xl font-bold text-green mb-2\">9%</div>\n            <div className=\"text-silver-100\">Rentabilidad Fija Anual</div>\n          </div>\n          <div className=\"text-center p-6 rounded-xl bg-black/30 border border-transparent transition-all duration-300 hover:border-green-500 hover:bg-black/50 hover:shadow-lg hover:shadow-green-500/20 cursor-pointer\">\n            <div className=\"text-3xl font-bold text-green mb-2\">100%</div>\n            <div className=\"text-silver-100\">Capital Protegido</div>\n          </div>\n          <div className=\"text-center p-6 rounded-xl bg-black/30 border border-transparent transition-all duration-300 hover:border-green-500 hover:bg-black/50 hover:shadow-lg hover:shadow-green-500/20 cursor-pointer\">\n            <div className=\"text-3xl font-bold text-green mb-2\">0%</div>\n            <div className=\"text-silver-100\">Exposición al Mercado</div>\n          </div>\n        </div>\n\n        {/* Carrusel con máscara (fades que respetan el fondo) */}\n        <div\n          className=\"relative mt-14 mx-auto\"\n          style={{ width: groupW ? `min(100%, ${groupW}px)` : undefined }}\n        >\n          <div\n            className=\"overflow-hidden\"\n            style={{\n              WebkitMaskImage:\n                \"linear-gradient(to right, transparent 0, black 10%, black 90%, transparent 100%)\",\n              maskImage:\n                \"linear-gradient(to right, transparent 0, black 10%, black 90%, transparent 100%)\",\n            }}\n          >\n            {/* Track animado */}\n            <div\n              ref={trackRef}\n              style={{ animation: \"marqueeLoop var(--dur, 28s) linear infinite\" }}\n              className=\"flex w-max will-change-transform\"\n            >\n              {/* Grupo A */}\n              <div\n                ref={groupRef}\n                className=\"flex items-center gap-10 md:gap-14 shrink-0 pr-10 md:pr-14\"\n              >\n                {logos.map((src, i) => {\n                  const isNew = i >= 3;\n                  return (\n                    <img\n                      key={`a-${i}`}\n                      src={src}\n                      alt={`logo-${i + 1}`}\n                      className={`${isNew ? sizeNew : sizeOld} block flex-none opacity-45 hover:opacity-70 transition-opacity duration-300 object-contain grayscale select-none`}\n                      draggable={false}\n                    />\n                  );\n                })}\n              </div>\n\n              {/* Grupo B (clon) */}\n              <div className=\"flex items-center gap-10 md:gap-14 shrink-0\" aria-hidden=\"true\">\n                {logos.map((src, i) => {\n                  const isNew = i >= 3;\n                  return (\n                    <img\n                      key={`b-${i}`}\n                      src={src}\n                      alt=\"\"\n                      className={`${isNew ? sizeNew : sizeOld} block flex-none opacity-45 object-contain grayscale select-none`}\n                      draggable={false}\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":7384},"client/src/components/investment-calculator.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { X, Calculator, TrendingUp, Download } from \"lucide-react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from \"recharts\";\n\n/* ------------------------------ NUEVO PDF UX ------------------------------ */\nconst BRAND = {\n  name: \"Nakama&Partners\",\n  primary: [16, 185, 129] as [number, number, number], // #10B981\n  primary600: [5, 150, 105] as [number, number, number], // #059669\n  textDark: [15, 23, 42] as [number, number, number],\n  textMuted: [107, 114, 128] as [number, number, number],\n};\n\nfunction setFillRGB(doc: any, [r, g, b]: [number, number, number]) {\n  doc.setFillColor(r, g, b);\n}\nfunction setStrokeRGB(doc: any, [r, g, b]: [number, number, number]) {\n  doc.setDrawColor(r, g, b);\n}\nfunction setTextRGB(doc: any, [r, g, b]: [number, number, number]) {\n  doc.setTextColor(r, g, b);\n}\nfunction sectionHeading(doc: any, text: string, y: number) {\n  doc.setFontSize(13);\n  setTextRGB(doc, BRAND.primary);\n  doc.text(text.toUpperCase(), 40, y);\n  setStrokeRGB(doc, BRAND.primary);\n  doc.setLineWidth(1);\n  doc.line(40, y + 6, doc.internal.pageSize.getWidth() - 40, y + 6);\n}\nfunction kv(doc: any, label: string, value: string, x: number, y: number) {\n  doc.setFontSize(10);\n  setTextRGB(doc, BRAND.textMuted);\n  doc.text(label, x, y);\n  doc.setFontSize(12);\n  setTextRGB(doc, BRAND.textDark);\n  doc.text(value, x, y + 16);\n}\nasync function drawBrandHeader(doc: any, title: string, subtitle?: string) {\n  const pageW = doc.internal.pageSize.getWidth();\n  const barH = 64;\n\n  setFillRGB(doc, BRAND.primary600);\n  doc.rect(0, 0, pageW, barH, \"F\");\n\n  doc.setFont(\"helvetica\", \"bold\");\n  doc.setFontSize(12);\n  setTextRGB(doc, [255, 255, 255]);\n  doc.text(BRAND.name, 40, 24);\n\n  doc.setFontSize(18);\n  doc.text(title, 40, 44);\n\n  if (subtitle) {\n    doc.setFont(\"helvetica\", \"normal\");\n    doc.setFontSize(11);\n    setTextRGB(doc, [236, 253, 245]);\n    doc.text(subtitle, 40, 58);\n  }\n\n  setStrokeRGB(doc, BRAND.primary);\n  doc.setLineWidth(2);\n  doc.line(40, barH + 6, pageW - 40, barH + 6);\n\n  return barH + 18;\n}\nfunction drawFooter(doc: any) {\n  const pageW = doc.internal.pageSize.getWidth();\n  const pageH = doc.internal.pageSize.getHeight();\n  setTextRGB(doc, BRAND.textMuted);\n  doc.setFontSize(9);\n  const footer = `${BRAND.name} • Documento generado automáticamente • ${new Date().toLocaleString(\"es-ES\")}`;\n  doc.text(footer, pageW / 2, pageH - 24, { align: \"center\" });\n}\nfunction eur(n: number) {\n  return n.toLocaleString(\"es-ES\", { style: \"currency\", currency: \"EUR\" });\n}\nfunction calcular(capitalInicial: number, tasaAnual: number, meses: number) {\n  const tasaMensual = tasaAnual / 12;\n  const valorFinal = capitalInicial * Math.pow(1 + tasaMensual, meses);\n  const beneficio = valorFinal - capitalInicial;\n  return { tasaMensual, valorFinal, beneficio };\n}\nasync function generateSimulationPDF(params: { capitalInicial: number; tasaAnual: number; meses: number }) {\n  const { jsPDF } = await import(\"jspdf\");\n  const doc = new jsPDF({ unit: \"pt\", format: \"A4\" });\n\n  let y = await drawBrandHeader(doc, \"Simulación de Inversión\", \"Calculadora de interés compuesto\");\n  y += 10;\n\n  // Parámetros\n  sectionHeading(doc, \"Parámetros\", y);\n  y += 24;\n  kv(doc, \"Capital Inicial\", eur(params.capitalInicial), 40, y);\n  kv(doc, \"Tasa Anual\", `${(params.tasaAnual * 100).toFixed(2)}%`, 220, y);\n  kv(doc, \"Plazo\", `${params.meses} meses`, 400, y);\n  y += 56;\n\n  // Resultados\n  const { tasaMensual, valorFinal, beneficio } = calcular(params.capitalInicial, params.tasaAnual, params.meses);\n  sectionHeading(doc, \"Resultados\", y);\n  y += 24;\n  kv(doc, \"Tasa Mensual\", `${(tasaMensual * 100).toFixed(4)}%`, 40, y);\n  kv(doc, \"Beneficio Estimado\", eur(beneficio), 220, y);\n  kv(doc, \"Valor Final Estimado\", eur(valorFinal), 400, y);\n  y += 56;\n\n  // Hitos (trimestrales + último)\n  sectionHeading(doc, \"Hitos (trimestrales)\", y);\n  y += 24;\n\n  doc.setFontSize(10);\n  setTextRGB(doc, [255, 255, 255]);\n  setFillRGB(doc, BRAND.primary600);\n  doc.rect(40, y - 12, 520, 24, \"F\");\n  doc.text(\"Mes\", 56, y + 2);\n  doc.text(\"Capital Estimado\", 140, y + 2);\n  doc.text(\"Beneficio Acumulado\", 320, y + 2);\n\n  setTextRGB(doc, BRAND.textDark);\n  const rowH = 24;\n  const tramos = [3, 6, 9, 12, 18, params.meses].filter((m, i, a) => m <= params.meses && a.indexOf(m) === i);\n  tramos.forEach((mes, idx) => {\n    const v = params.capitalInicial * Math.pow(1 + tasaMensual, mes);\n    const b = v - params.capitalInicial;\n    const ry = y + rowH * (idx + 1);\n    if (idx % 2 === 0) {\n      setFillRGB(doc, [240, 253, 244]);\n      doc.rect(40, ry - 16, 520, rowH, \"F\");\n    }\n    doc.setFontSize(11);\n    doc.text(String(mes), 56, ry);\n    doc.text(eur(v), 140, ry);\n    doc.text(eur(b), 320, ry);\n  });\n\n  drawFooter(doc);\n  doc.save(`simulacion-nakama-${params.capitalInicial}-${params.meses}m-${new Date().toISOString().slice(0, 10)}.pdf`);\n}\n\n/* ------------------------------ CALCULADORA UI ----------------------------- */\n\ninterface InvestmentCalculatorProps {\n  onClose: () => void;\n  onLogActivity?: (action: string) => void;\n}\n\nexport default function InvestmentCalculator({ onClose, onLogActivity }: InvestmentCalculatorProps) {\n  const [amount, setAmount] = useState(\"50000\");\n  const [term, setTerm] = useState(\"12\");\n  const [rate] = useState(9); // Fixed 9% rate\n\n  const calculateProjection = () => {\n    const principal = parseFloat(amount);\n    const months = parseInt(term);\n    const monthlyRate = rate / 100 / 12;\n\n    const data: Array<{ month: number; compound: number; simple: number; difference: number }> = [];\n    for (let month = 0; month <= months; month++) {\n      const compoundAmount = principal * Math.pow(1 + monthlyRate, month);\n      const simpleAmount = principal + principal * (rate / 100) * (month / 12);\n\n      data.push({\n        month,\n        compound: Math.round(compoundAmount),\n        simple: Math.round(simpleAmount),\n        difference: Math.round(compoundAmount - simpleAmount),\n      });\n    }\n    return data;\n  };\n\n  const projectionData = calculateProjection();\n  const finalAmount = projectionData[projectionData.length - 1]?.compound || 0;\n  const totalGain = finalAmount - parseFloat(amount);\n  const gainPercentage = ((totalGain / parseFloat(amount)) * 100).toFixed(2);\n\n  // Función para registrar nueva inversión calculada\n  const handleCalculationChange = () => {\n    if (onLogActivity) {\n      const capitalInicial = parseFloat(amount);\n      const meses = parseInt(term);\n      onLogActivity(`Nueva inversión calculada: €${capitalInicial.toLocaleString()} por ${meses} meses`);\n    }\n  };\n\n  // ⬇️ Solo cambiamos esta función para usar el NUEVO PDF\n  const handleDownloadSimulation = async () => {\n    try {\n      const capitalInicial = parseFloat(amount);\n      const meses = parseInt(term);\n      const tasaAnual = 0.09; // 9% fijo\n      await generateSimulationPDF({ capitalInicial, tasaAnual, meses });\n      \n      // Registrar descarga de simulación\n      if (onLogActivity) {\n        onLogActivity(`Simulación de inversión descargada: €${capitalInicial.toLocaleString()} por ${meses} meses`);\n      }\n    } catch (error) {\n      console.error(\"Error generating simulation PDF:\", error);\n      alert(\"Error al generar la simulación. Inténtalo de nuevo.\");\n    }\n  };\n\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      const compound = payload[0].value;\n      const gain = compound - parseFloat(amount);\n\n      return (\n        <div className=\"bg-black/95 p-4 rounded-lg border border-green-500/30 backdrop-blur-sm\">\n          <p className=\"text-white font-semibold mb-2\">Mes {label}</p>\n          <p className=\"text-green-400 font-bold\">€{compound.toLocaleString()}</p>\n          <p className=\"text-green-300 text-sm\">+€{gain.toLocaleString()} ganancia</p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center p-4 z-50\">\n      <Card className=\"bg-[#040505] border-silver-500/20 w-full max-w-7xl max-h-[90vh] overflow-y-auto\">\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-green-500/20 rounded-full flex items-center justify-center\">\n              <Calculator className=\"h-5 w-5 text-green-500\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-white text-xl\">Calculadora de Nueva Inversión</CardTitle>\n              <p className=\"text-silver-100 text-sm\">Simula tu próxima inversión con rentabilidad del 9% anual</p>\n            </div>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onClose}\n            className=\"text-silver-100 hover:text-white hover:bg-black/50\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </CardHeader>\n\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Input Controls */}\n            <div className=\"space-y-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"amount\" className=\"text-white\">Cantidad a Invertir</Label>\n                <div className=\"relative\">\n                  <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-silver-100\">€</span>\n                  <Input\n                    id=\"amount\"\n                    type=\"number\"\n                    value={amount}\n                    onChange={(e) => {\n                      setAmount(e.target.value);\n                      handleCalculationChange();\n                    }}\n                    className=\"pl-8 bg-black/50 border-silver-500/20 text-white\"\n                    min=\"50000\"\n                    step=\"50000\"\n                  />\n                </div>\n                <p className=\"text-silver-100 text-xs\">Mínimo: €50.000</p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"term\" className=\"text-white\">Plazo de Inversión</Label>\n                <Select value={term} onValueChange={(value) => {\n                  setTerm(value);\n                  handleCalculationChange();\n                }}>\n                  <SelectTrigger className=\"bg-black/50 border-silver-500/20 text-white\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-black border-silver-500/20\">\n                    <SelectItem value=\"6\">6 meses</SelectItem>\n                    <SelectItem value=\"12\">12 meses</SelectItem>\n                    <SelectItem value=\"18\">18 meses</SelectItem>\n                    <SelectItem value=\"24\">24 meses</SelectItem>\n                    <SelectItem value=\"36\">36 meses</SelectItem>\n                    <SelectItem value=\"60\">60 meses</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label className=\"text-white\">Rentabilidad Anual</Label>\n                <div className=\"flex items-center space-x-2 p-3 bg-green-500/10 rounded-lg border border-green-500/20\">\n                  <TrendingUp className=\"h-5 w-5 text-green-500\" />\n                  <span className=\"text-green-500 font-bold text-lg\">9.0%</span>\n                  <span className=\"text-silver-100 text-sm\">Garantizada</span>\n                </div>\n              </div>\n\n              {/* Results Summary */}\n              <Card className=\"bg-black/70 border-silver-500/20\">\n                <CardContent className=\"p-4\">\n                  <h3 className=\"text-white font-semibold mb-4\">Resumen de Proyección</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-silver-100\">Inversión inicial:</span>\n                      <span className=\"text-white font-semibold\">€{parseFloat(amount).toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-silver-100\">Plazo:</span>\n                      <span className=\"text-white font-semibold\">{term} meses</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-silver-100\">Ganancia total:</span>\n                      <span className=\"text-green-500 font-bold\">+€{totalGain.toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex justify-between border-t border-silver-500/20 pt-3\">\n                      <span className=\"text-white font-semibold\">Valor final:</span>\n                      <span className=\"text-green-500 font-bold text-lg\">€{finalAmount.toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-silver-100 text-sm\">Rentabilidad total:</span>\n                      <span className=\"text-green-400 text-sm\">+{gainPercentage}%</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Chart */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-white font-semibold\">Evolución de la Inversión</h3>\n              <div id=\"simulation-chart\" className=\"h-96 bg-black/70 rounded-lg p-4\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart data={calculateProjection()} margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#334155\" opacity={0.3} />\n                    <XAxis dataKey=\"month\" stroke=\"#94a3b8\" fontSize={12} tickFormatter={(value) => `${value}m`} />\n                    <YAxis\n                      stroke=\"#94a3b8\"\n                      fontSize={12}\n                      domain={[50000, 'dataMax']}\n                      tickFormatter={(value) => `€${(value / 1000).toFixed(0)}K`}\n                    />\n\n                    <Tooltip content={<CustomTooltip />} />\n                    <Line\n                      type=\"monotone\"\n                      dataKey=\"compound\"\n                      stroke=\"#22c55e\"\n                      strokeWidth={3}\n                      dot={{ fill: \"#22c55e\", strokeWidth: 2, r: 3 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n\n              <div className=\"flex justify-center\">\n                <Button onClick={handleDownloadSimulation} className=\"bg-green-600 hover:bg-green-700 text-white px-8\">\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Descargar Simulación\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":15401},"client/src/components/process.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Calendar, FileText } from \"lucide-react\";\n\nexport default function Process() {\n  const directProcess = [\n    {\n      number: 1,\n      title: \"Agenda reunión con nuestro equipo\",\n      description: \"Revisión personalizada del producto y del contrato.\"\n    },\n    {\n      number: 2,\n      title: \"Validación legal de perfil\",\n      description: \"Compliance y verificación de origen de fondos.\"\n    },\n    {\n      number: 3,\n      title: \"Firma digital + pignoración\",\n      description: \"Contrato firmado digitalmente con validez jurídica.\"\n    },\n    {\n      number: 4,\n      title: \"Inicio de inversión\",\n      description: \"Activación y acceso al panel de control.\"\n    }\n  ];\n\n  const advisorProcess = [\n    {\n      number: 1,\n      title: \"Presentación conjunta\",\n      description: \"Reunión con tu asesor de confianza presente.\"\n    },\n    {\n      number: 2,\n      title: \"Firma de NDA + documentación\",\n      description: \"Acceso a documentación legal completa.\"\n    },\n    {\n      number: 3,\n      title: \"Validación perfil inversor\",\n      description: \"Verificación AML y origen de fondos.\"\n    },\n    {\n      number: 4,\n      title: \"Activación de la inversión\",\n      description: \"Firma digital, pignoración y acceso al panel.\"\n    }\n  ];\n\n  const scheduleCalendly = () => {\n    // In a real implementation, this would open Calendly widget\n    console.log(\"Opening Calendly for scheduling\");\n  };\n\n  const downloadContract = () => {\n    // In a real implementation, this would download the contract example\n    console.log(\"Downloading contract example\");\n  };\n\n  return (\n    <section className=\"py-10 bg-transparent\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"font-georgia text-4xl md:text-5xl font-bold text-white mb-6\">\n            Proceso <span className=\"text-green\">Transparente</span>, Paso a Paso\n          </h2>\n        </div>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 max-w-6xl mx-auto\">\n          {/* Direct Process */}\n          <div className=\"process-card bg-black/70 p-8 rounded-xl border border-silver-500/20 transition-all duration-500 hover:border-green/30 cursor-pointer\">\n            <h3 className=\"font-georgia text-2xl font-bold text-white mb-8 text-center\">Si llegas directamente</h3>\n            \n            <div className=\"space-y-6\">\n              {directProcess.map((step) => (\n                <div key={step.number} className=\"flex items-start space-x-4\">\n                  <div className=\"w-8 h-8 bg-green rounded-full flex items-center justify-center text-black font-bold text-sm flex-shrink-0\">\n                    {step.number}\n                  </div>\n                  <div>\n                    <h4 className=\"text-white font-semibold mb-2\">{step.title}</h4>\n                    <p className=\"text-silver-100 text-sm\">{step.description}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            <Button \n              onClick={scheduleCalendly}\n              className=\"w-full mt-8 gradient-navy text-white hover:opacity-90\"\n            >\n              <Calendar className=\"mr-2 h-4 w-4\" />\n              Agendar reunión\n            </Button>\n          </div>\n          \n          {/* Advisor Process */}\n          <div className=\"process-card bg-black/70 p-8 rounded-xl border border-silver-500/20 transition-all duration-500 hover:border-green/30 cursor-pointer\">\n            <h3 className=\"font-georgia text-2xl font-bold text-white mb-8 text-center\">Si vienes recomendado por un asesor</h3>\n            \n            <div className=\"space-y-6\">\n              {advisorProcess.map((step) => (\n                <div key={step.number} className=\"flex items-start space-x-4\">\n                  <div className=\"w-8 h-8 bg-green rounded-full flex items-center justify-center text-black font-bold text-sm flex-shrink-0\">\n                    {step.number}\n                  </div>\n                  <div>\n                    <h4 className=\"text-white font-semibold mb-2\">{step.title}</h4>\n                    <p className=\"text-silver-100 text-sm\">{step.description}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            <Button \n              onClick={downloadContract}\n              className=\"w-full mt-8 bg-green text-black hover:bg-green/90\"\n            >\n              <FileText className=\"mr-2 h-4 w-4\" />\n              Ver ejemplo de contrato\n            </Button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4676},"client/src/components/security.tsx":{"content":"import { Shield, Percent, File, University, FileSignature, Search } from \"lucide-react\";\n\nexport default function Security() {\n  const features = [\n    {\n      icon: Percent,\n      title: \"Rentabilidad Fija del 9%\",\n      description: \"Sin volatilidad, sin sorpresas. Un 9% anual garantizado por contrato.\"\n    },\n    {\n      icon: Shield,\n      title: \"Capital Bloqueado como Garantía\",\n      description: \"Sin gestión directa del cliente. Su capital está protegido por estructura bancaria.\"\n    },\n    {\n      icon: File,\n      title: \"Contrato Bancario Pignorado\",\n      description: \"Revisado jurídicamente y avalado por estructuras bancarias de primer nivel.\"\n    },\n    {\n      icon: University,\n      title: \"Custodia en Bancos de Primer Nivel\",\n      description: \"Emirates NBD, WIO Bank. Instituciones financieras sólidas y reguladas.\"\n    },\n    {\n      icon: FileSignature,\n      title: \"Firma Digital Jurídicamente Válida\",\n      description: \"Validez jurídica internacional vía DocuSign® con trazabilidad completa.\"\n    },\n    {\n      icon: Search,\n      title: \"Auditoría Externa y Trazabilidad\",\n      description: \"Control total del proceso con auditoría externa y transparencia absoluta.\"\n    }\n  ];\n\n  return (\n    <section id=\"seguridad\" className=\"py-10 bg-transparent\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"font-georgia text-4xl md:text-5xl font-bold text-white mb-6\">\n            <span className=\"block md:hidden\">\n              <span className=\"block max-w-[320px] mx-auto\">Un Producto Diseñado para</span>\n              <span className=\"block max-w-[280px] mx-auto\"><span className=\"text-green\">Proteger el Capital</span>,</span>\n              <span className=\"block max-w-[200px] mx-auto\">No Para Arriesgarlo.</span>\n            </span>\n            <span className=\"hidden md:block\">\n              Un Producto Diseñado para <span className=\"text-green\">Proteger el Capital</span>,<br />\n              No Para Arriesgarlo.\n            </span>\n          </h2>\n          <p className=\"text-xl text-silver-100 max-w-3xl mx-auto\">\n            <span className=\"block md:hidden max-w-[300px] mx-auto\">\n              <span className=\"block\">Desde el primer contacto, mostramos</span>\n              <span className=\"block\">que esto no es una promesa,</span>\n              <span className=\"block\">es una estructura.</span>\n            </span>\n            <span className=\"hidden md:block\">\n              Desde el primer contacto, mostramos que esto no es una promesa, es una estructura.\n            </span>\n          </p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n          {features.map((feature, index) => (\n            <div key={index} className=\"bg-black/70 p-8 rounded-xl border border-silver-500/20 hover:border-[#344e41] transition-all duration-300 transform hover:scale-105 hover:shadow-lg hover:shadow-[#344e41]/20 cursor-pointer\">\n              <div className=\"w-16 h-16 bg-green/20 rounded-lg flex items-center justify-center mb-6 transition-all duration-300 group-hover:bg-[#344e41]/30\">\n                <feature.icon className=\"text-2xl text-green w-8 h-8 transition-colors duration-300\" />\n              </div>\n              <h3 className=\"font-georgia text-xl font-semibold text-white mb-4 transition-colors duration-300\">{feature.title}</h3>\n              <p className={`${index < 3 ? 'text-white' : 'text-silver-100'} transition-colors duration-300`}>{feature.description}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3664},"client/src/components/story.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Users } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function Story() {\n  const [, setLocation] = useLocation();\n  \n  const goToContact = () => {\n    setLocation(\"/contacto\");\n  };\n\n  return (\n    <section id=\"nosotros\" className=\"py-10 bg-transparent\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"font-georgia text-4xl md:text-5xl font-bold text-white mb-6\">\n              Nuestra Historia, Nuestro <span className=\"text-green\">Compromiso</span>:<br />\n              Proteger Tu Patrimonio\n            </h2>\n          </div>\n          \n          <div className=\"bg-black/70 rounded-2xl border border-silver-500/20 p-8 mb-8\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 items-center\">\n              <div>\n                <h3 className=\"font-georgia text-2xl font-bold text-white mb-4\">\n                  \"Esto nació para proteger nuestro propio patrimonio familiar.\"\n                </h3>\n                <p className=\"text-silver-100 mb-6 leading-relaxed\">\n                  Raúl (CEO) y su hijo Xavi crearon Nakama&Partners tras años de ver \n                  cómo el mercado vendía riesgo disfrazado de oportunidad. Ahora, ofrecen \n                  lo que desearon tener: una estructura blindada que pone la seguridad \n                  del capital por encima de todo.\n                </p>\n                <Button \n                  onClick={goToContact}\n                  className=\"gradient-navy px-6 py-3 text-white hover:opacity-90\"\n                >\n                  Quiero más información\n                </Button>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"w-48 h-48 bg-green/20 rounded-lg mx-auto flex items-center justify-center\">\n                  <Users className=\"text-6xl text-green w-24 h-24\" />\n                </div>\n                <p className=\"text-sm text-silver-100 mt-4\">Raúl y Xavi - Fundadores de Nakama&Partners</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2260},"client/src/components/strategy.tsx":{"content":"import { Building, TrendingUp, Coins, Link, Brain } from \"lucide-react\";\nimport GrowthChart from \"./growth-chart\";\n\nexport default function Strategy() {\n  const strategies = [\n    {\n      icon: Building,\n      title: \"Real Estate Institucional en Dubái\",\n      description: \"Alineado con el Plan Urbanístico 2040 (+30% crecimiento proyectado). Precio medio por m² aún 60-70% por debajo de Londres o Nueva York.\"\n    },\n    {\n      icon: TrendingUp,\n      title: \"ETFs y Acciones de Asia Emergente\",\n      description: \"Mercados sólidos con crecimiento estructural y baja correlación con Occidente.\"\n    },\n    {\n      icon: Coins,\n      title: \"Materias Primas: Oro, Plata y Petróleo\",\n      description: \"Valor refugio, cobertura frente a inflación y activos geopolíticos.\"\n    },\n    {\n      icon: Link,\n      title: \"Activos Digitales Regulados\",\n      description: \"RWA, Tokenización, DeFi. Participamos solo en infraestructuras legales y auditadas del sector blockchain.\"\n    },\n    {\n      icon: Brain,\n      title: \"Trading Algorítmico Propio, Auditado\",\n      description: \"Optimización de carteras con inteligencia artificial, basada en parámetros matemáticos y control de drawdown.\",\n      colSpan: true\n    }\n  ];\n\n  return (\n    <section id=\"producto\" className=\"py-10 bg-transparent\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"font-georgia text-4xl md:text-5xl font-bold text-white mb-6\">\n            Cómo Conseguimos el <span className=\"text-green\">9% Fijo Anual</span>\n          </h2>\n          <p className=\"text-xl text-silver-100 max-w-3xl mx-auto\">\n            Una cartera permanente, sin improvisaciones. Nuestra rentabilidad no depende de predicciones, \n            sino de diversificación estructural:\n          </p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 max-w-6xl mx-auto\">\n          {strategies.map((strategy, index) => (\n            <div \n              key={index} \n              className={`strategy-card bg-black/70 p-8 rounded-xl border border-silver-500/20 hover:border-green/50 transition-all duration-500 cursor-pointer ${strategy.colSpan ? 'md:col-span-2' : ''}`}\n              style={{ animationDelay: `${index * 0.2}s` }}\n            >\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-12 h-12 bg-green/20 rounded-lg flex items-center justify-center flex-shrink-0 transition-all duration-300\">\n                  <strategy.icon className=\"text-green w-6 h-6 transition-all duration-300\" />\n                </div>\n                <div>\n                  <h3 className=\"font-georgia text-xl font-semibold text-green mb-3 transition-all duration-300\">{strategy.title}</h3>\n                  <p className=\"text-silver-100 transition-all duration-300\">{strategy.description}</p>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n        \n        <div className=\"text-center mt-12\">\n          <p className=\"text-lg text-silver-100 max-w-3xl mx-auto mb-12\">\n            Esta combinación permite garantizar el 9% sin comprometer el capital. \n            Todo bajo un modelo profesional, permanente y sin especulación.\n          </p>\n        </div>\n\n        {/* Growth Chart */}\n        <div className=\"max-w-4xl mx-auto mt-16\">\n          <GrowthChart \n            initialAmount={100000}\n            years={10}\n            rate={0.09}\n            showTitle={true}\n          />\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3576},"client/src/components/video-background.tsx":{"content":"import videoBackground from \"@/assets/Video Logo Fondo_1752489214378.mp4\";\n\nexport default function VideoBackground() {\n  return (\n    <div className=\"fixed inset-0 z-0 overflow-hidden\">\n      <video \n        autoPlay \n        loop\n        muted \n        playsInline\n        preload=\"metadata\"\n        className=\"absolute inset-0 w-full h-full object-cover\"\n        style={{ filter: 'brightness(0.6)' }}\n      >\n        <source src={videoBackground} type=\"video/mp4\" />\n        Your browser does not support the video tag.\n      </video>\n      <div className=\"absolute inset-0 bg-black/60\"></div>\n    </div>\n  );\n}","size_bytes":614},"client/src/hooks/use-calculator.tsx":{"content":"import { useState, useCallback } from \"react\";\n\nexport interface CalculatorState {\n  amount: number;\n  years: number;\n  compoundInterest: boolean;\n}\n\nexport interface CalculatorResults {\n  initialAmount: number;\n  finalAmount: number;\n  interestGenerated: number;\n}\n\nexport function useCalculator() {\n  const [state, setState] = useState<CalculatorState>({\n    amount: 50000,\n    years: 3,\n    compoundInterest: false\n  });\n\n  const updateAmount = useCallback((amount: number) => {\n    setState(prev => ({ ...prev, amount }));\n  }, []);\n\n  const updateYears = useCallback((years: number) => {\n    setState(prev => ({ ...prev, years }));\n  }, []);\n\n  const updateCompoundInterest = useCallback((compoundInterest: boolean) => {\n    setState(prev => ({ ...prev, compoundInterest }));\n  }, []);\n\n  const calculateResults = useCallback((): CalculatorResults => {\n    const { amount, years, compoundInterest } = state;\n    \n    let finalAmount: number;\n    if (compoundInterest) {\n      finalAmount = amount * Math.pow(1.09, years);\n    } else {\n      finalAmount = amount + (amount * 0.09 * years);\n    }\n    \n    const interestGenerated = finalAmount - amount;\n    \n    return {\n      initialAmount: amount,\n      finalAmount: Math.round(finalAmount),\n      interestGenerated: Math.round(interestGenerated)\n    };\n  }, [state]);\n\n  return {\n    state,\n    updateAmount,\n    updateYears,\n    updateCompoundInterest,\n    calculateResults\n  };\n}\n","size_bytes":1439},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.tsx":{"content":"import { useState, useEffect, createContext, useContext } from 'react';\nimport type { ReactNode } from 'react';\n\ninterface User {\n  id: number;\n  email: string;\n  name: string;\n  role: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: (email: string, password: string) => Promise<{ success: boolean; error?: string }>;\n  register: (email: string, password: string, name: string, role: 'client' | 'partner') => Promise<{ success: boolean; error?: string }>;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\nconst apiCall = async (url: string, options: RequestInit = {}) => {\n  const token = localStorage.getItem('token');\n  const headers: Record<string, string> = {\n    'Content-Type': 'application/json',\n  };\n\n  if (token) {\n    headers.Authorization = `Bearer ${token}`;\n  }\n\n  const response = await fetch(url, {\n    ...options,\n    headers: {\n      ...headers,\n      ...options.headers,\n    },\n  });\n\n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n\n  const text = await response.text();\n  try {\n    return JSON.parse(text);\n  } catch (e) {\n    console.error('Failed to parse JSON response:', text);\n    throw new Error('Server returned invalid JSON');\n  }\n};\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      fetchUserData();\n    } else {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const fetchUserData = async () => {\n    try {\n      const response = await apiCall('/api/me');\n      \n      if (response.success) {\n        setUser(response.user);\n      } else {\n        localStorage.removeItem('token');\n      }\n    } catch (error) {\n      console.error('Failed to fetch user data:', error);\n      localStorage.removeItem('token');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const login = async (email: string, password: string): Promise<{ success: boolean; error?: string }> => {\n    try {\n      const response = await fetch('/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Login error response:', errorText);\n        return { success: false, error: `HTTP ${response.status}: ${response.statusText}` };\n      }\n\n      const data = await response.json();\n\n      if (data.success) {\n        localStorage.setItem('token', data.token);\n        setUser(data.user);\n        return { success: true };\n      } else {\n        return { success: false, error: data.error || 'Login failed' };\n      }\n    } catch (error: any) {\n      console.error('Login error:', error);\n      return { success: false, error: error.message || 'Network error occurred' };\n    }\n  };\n\n  const register = async (email: string, password: string, name: string, role: 'client' | 'partner'): Promise<{ success: boolean; error?: string }> => {\n    try {\n      const response = await fetch('/api/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password, name, role }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Register error response:', errorText);\n        return { success: false, error: `HTTP ${response.status}: ${response.statusText}` };\n      }\n\n      const data = await response.json();\n\n      if (data.success) {\n        localStorage.setItem('token', data.token);\n        setUser(data.user);\n        return { success: true };\n      } else {\n        return { success: false, error: data.error || 'Registration failed' };\n      }\n    } catch (error: any) {\n      console.error('Register error:', error);\n      return { success: false, error: error.message || 'Network error occurred' };\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    setUser(null);\n  };\n\n  const contextValue: AuthContextType = {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    login,\n    register,\n    logout,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n}","size_bytes":4702},"client/src/hooks/useScrollToTop.ts":{"content":"import { useEffect } from \"react\";\n\nexport function useScrollToTop() {\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n}","size_bytes":129},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  options: RequestInit = {},\n): Promise<any> {\n  const token = localStorage.getItem('token');\n  const headers: Record<string, string> = {\n    'Content-Type': 'application/json',\n  };\n\n  if (token) {\n    headers.Authorization = `Bearer ${token}`;\n  }\n\n  const res = await fetch(url, {\n    ...options,\n    headers: {\n      ...headers,\n      ...options.headers,\n    },\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = localStorage.getItem('token');\n    const headers: Record<string, string> = {};\n\n    if (token) {\n      headers.Authorization = `Bearer ${token}`;\n    }\n\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n      headers,\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1703},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Users,\n  FileCheck,\n  Package,\n  FileText,\n  Search,\n  Plus,\n  Eye,\n  Edit,\n  Trash2,\n  LogOut,\n  BarChart3,\n  Download,\n  Filter,\n  X,\n  User as UserIcon,\n  Crown,\n  Calendar,\n  History,\n  TrendingUp,\n  Minus,\n  UserCheck,\n  Euro,\n  Target,\n  UserMinus,\n  Handshake,\n  AlertTriangle,\n  Clock,\n  CheckCircle,\n  Shield,\n  Timer,\n  DollarSign,\n  Activity,\n  Users2,\n  TrendingDown\n} from \"lucide-react\";\nimport {\n  PieChart as RechartsPieChart,\n  Pie,\n  Cell,\n  ResponsiveContainer,\n  Tooltip,\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Legend\n} from \"recharts\";\nimport logoImg from \"@/assets/Logo-removeBG_1753542032142.png\";\nimport { generateAdminStatementPDF } from \"@/utils/generateAdminStatementPDF\";\n\ninterface DashboardStats {\n  totalUsers: number;\n  totalProducts: number;\n  totalContracts: number;\n  pendingKyc: number;\n}\n\ninterface KycData {\n  id: number;\n  userId: number;\n  userName: string;\n  userEmail: string;\n  fullName: string;\n  documentType: string;\n  documentNumber: string;\n  country: string;\n  status: \"approved\" | \"pending\" | \"rejected\";\n  documentsUrls: string[] | null;\n  rejectionReason: string | null;\n  reviewedBy: number | null;\n  reviewedAt: string | null;\n  createdAt: string;\n}\n\ninterface UserData {\n  id: number;\n  name: string;\n  email: string;\n  role: string;\n  sponsor: string | null;\n  grade: string;\n  verificationStatus: string;\n  createdAt: string;\n  gender?: string | null; // se rellenará automáticamente\n}\n\ninterface ProductData {\n  id: number;\n  name: string;\n  interestRate: string;\n  termDays: number;\n  minAmount: string;\n  maxAmount: string;\n  status: string;\n  autoRenewal: boolean;\n  contractTemplate: string | null;\n}\n\ninterface ContractData {\n  id: number;\n  userId: number;\n  userName: string;\n  productId: number;\n  productName: string;\n  amount: string;\n  status: string;\n  createdAt: string;\n}\n\ninterface MonthlyEvolutionData {\n  month: string;\n  capital: number;\n  clients: number;\n  revenue: number;\n  retention: number;\n}\n\ninterface BusinessHealth {\n  status: 'green' | 'yellow' | 'red';\n  percentage: number;\n  contractsAtRiskPercentage: number;\n}\n\nexport default function AdminDashboard() {\n  const { user, logout } = useAuth();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState(\"dashboard\");\n\n  // React Query for data fetching\n  const { data: usersData, isLoading: isLoadingUsers } = useQuery({\n    queryKey: [\"/api/admin/users\"],\n    enabled: !!user && user.role === \"admin\",\n  });\n\n  const { data: kycData, isLoading: isLoadingKyc } = useQuery({\n    queryKey: [\"/api/admin/kyc\"],\n    enabled: !!user && user.role === \"admin\",\n  });\n\n  const { data: productsData, isLoading: isLoadingProducts } = useQuery({\n    queryKey: [\"/api/admin/products\"],\n    enabled: !!user && user.role === \"admin\",\n  });\n\n  const { data: contractsData, isLoading: isLoadingContracts } = useQuery({\n    queryKey: [\"/api/admin/contracts\"],\n    enabled: !!user && user.role === \"admin\",\n  });\n\n  const { data: auditLogsData, isLoading: isLoadingAuditLogs } = useQuery({\n    queryKey: [\"/api/admin/audit-logs\"],\n    enabled: !!user && user.role === \"admin\",\n  });\n\n  const { data: financialKpisData, isLoading: isLoadingKpis } = useQuery({\n    queryKey: [\"/api/admin/financial-kpis\"],\n    enabled: !!user && user.role === \"admin\",\n  });\n\n  // Combined loading state\n  const loading = isLoadingUsers || isLoadingKyc || isLoadingProducts || isLoadingContracts || isLoadingAuditLogs || isLoadingKpis;\n\n  // Business Health Helper Functions\n  const getHealthColor = (status: string) => {\n    switch (status) {\n      case 'green': return 'text-green-400';\n      case 'yellow': return 'text-yellow-400';\n      case 'red': return 'text-red-400';\n      default: return 'text-gray-400';\n    }\n  };\n\n  const getHealthMessage = (status: string, percentage: number) => {\n    switch (status) {\n      case 'green': \n        return `Crecimiento estable (${percentage}% cumplimiento objetivos)`;\n      case 'yellow': \n        return `Riesgo medio (${percentage}% cumplimiento objetivos)`;\n      case 'red': \n        return `Riesgo alto (${percentage}% cumplimiento objetivos)`;\n      default: \n        return 'Estado desconocido';\n    }\n  };\n\n  // KYC Review Mutation\n  const kycReviewMutation = useMutation({\n    mutationFn: async ({ kycId, status, rejectionReason }: { kycId: number; status: string; rejectionReason?: string }) => {\n      const response = await fetch(`/api/admin/kyc/${kycId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify({ status, rejectionReason }),\n      });\n\n      if (!response.ok) {\n        throw new Error(await response.text());\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/kyc\"] });\n      // Also invalidate user-specific KYC queries in case user is viewing dashboard\n      queryClient.invalidateQueries({ queryKey: [\"/api/kyc/me\"] });\n    },\n  });\n\n  // Derived data\n  const users = usersData?.users || [];\n  const kyc = kycData?.kyc || [];\n  const products = productsData?.products || [];\n  const contracts = contractsData?.contracts || [];\n  const auditLogs = auditLogsData?.logs || [];\n  const financialKpis = financialKpisData?.kpis || null;\n  \n  const stats = {\n    totalUsers: users.length,\n    totalProducts: products.length,\n    totalContracts: contracts.length,\n    pendingKyc: kyc.filter((k: KycData) => k.status === \"pending\").length,\n  };\n\n  // ===== SEARCH & FILTER STATES =====\n  // Usuarios\n  const [userSearch, setUserSearch] = useState(\"\");\n  const [showUserFilters, setShowUserFilters] = useState(false);\n  const [userFilters, setUserFilters] = useState({\n    role: \"\",\n    grade: \"\",\n    verificationStatus: \"\",\n    sponsor: \"\",\n    gender: \"\", // filtro de género\n    dateFrom: \"\",\n    dateTo: \"\",\n  });\n  const [userSort, setUserSort] = useState<\"\" | \"created_desc\" | \"created_asc\" | \"name_asc\" | \"name_desc\">(\"\");\n\n  // KYC\n  const [kycSearch, setKycSearch] = useState(\"\");\n  const [kycFilter, setKycFilter] = useState<\"all\" | \"approved\" | \"pending\" | \"rejected\">(\"all\");\n  const [showKycFilters, setShowKycFilters] = useState(false);\n  const [kycAdvancedFilters, setKycAdvancedFilters] = useState({\n    documentType: \"\",\n    country: \"\",\n    dateFrom: \"\",\n    dateTo: \"\",\n  });\n  const [kycSort, setKycSort] = useState<\"\" | \"created_desc\" | \"created_asc\" | \"name_asc\" | \"name_desc\">(\"\");\n\n  // 🔹 NUEVO: filtro específico por Estado (Aprobado / Rechazado) en filtros avanzados\n  const [kycStateAr, setKycStateAr] = useState<\"\" | \"approved\" | \"rejected\">(\"\");\n\n  // Productos\n  const [productSearch, setProductSearch] = useState(\"\");\n  const [showProductFilters, setShowProductFilters] = useState(false);\n  const [productFilters, setProductFilters] = useState({\n    status: \"\",\n    autoRenewal: \"\",\n    rateMin: \"\",\n    rateMax: \"\",\n    termMin: \"\",\n    termMax: \"\",\n    amountMin: \"\",\n    amountMax: \"\",\n  });\n  const [productSort, setProductSort] = useState<\"\" | \"rate_desc\" | \"rate_asc\" | \"term_desc\" | \"term_asc\">(\"\");\n\n  // Contratos\n  const [contractSearch, setContractSearch] = useState(\"\");\n  const [showContractFilters, setShowContractFilters] = useState(false);\n  const [contractFilters, setContractFilters] = useState({\n    status: \"\",\n    productName: \"\",\n    dateFrom: \"\",\n    dateTo: \"\",\n    amountMin: \"\",\n    amountMax: \"\",\n  });\n  const [contractSort, setContractSort] = useState<\"\" | \"date_desc\" | \"date_asc\" | \"amount_desc\" | \"amount_asc\">(\"\");\n\n  // Dialog states\n  const [showUserDialog, setShowUserDialog] = useState(false);\n  const [showProductDialog, setShowProductDialog] = useState(false);\n  const [showKycDialog, setShowKycDialog] = useState(false);\n  const [showContractDialog, setShowContractDialog] = useState(false);\n  const [editingUser, setEditingUser] = useState<UserData | null>(null);\n  const [editingProduct, setEditingProduct] = useState<ProductData | null>(null);\n  const [editingKyc, setEditingKyc] = useState<KycData | null>(null);\n  const [editingContract, setEditingContract] = useState<any>(null);\n  const [showDocumentsDialog, setShowDocumentsDialog] = useState(false);\n  const [viewingDocuments, setViewingDocuments] = useState<string[] | null>(null);\n  \n  // KYC Review states\n  const [kycReviewStatus, setKycReviewStatus] = useState<\"approved\" | \"rejected\">(\"approved\");\n  const [rejectionReason, setRejectionReason] = useState(\"\");\n\n  // User Profile Modal states\n  const [showUserProfileDialog, setShowUserProfileDialog] = useState(false);\n  const [selectedUserProfile, setSelectedUserProfile] = useState<any>(null);\n  const [loadingUserProfile, setLoadingUserProfile] = useState(false);\n\n  // Form states\n  const [newUser, setNewUser] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    role: \"client\",\n    sponsor: \"\",\n    grade: \"Bronze\",\n  });\n\n  const [newProduct, setNewProduct] = useState({\n    name: \"\",\n    interestRate: \"\",\n    termDays: \"\",\n    minAmount: \"\",\n    maxAmount: \"\",\n    status: \"active\",\n    autoRenewal: false,\n    contractTemplate: \"\",\n  });\n\n  useEffect(() => {\n    if (user && user.role !== \"admin\") {\n      setLocation(\"/login\");\n      return;\n    }\n  }, [user]);\n\n  // ====== Normalización / Inferencia de género ======\n  const stripAccents = (s: string) =>\n    s.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n\n  const normalizeGender = (g: any): \"\" | \"Hombre\" | \"Mujer\" | \"Otro\" => {\n    if (g == null) return \"\";\n    const s = String(g).trim().toLowerCase();\n    if ([\"hombre\", \"male\", \"m\", \"masculino\"].includes(s)) return \"Hombre\";\n    if ([\"mujer\", \"female\", \"f\", \"femenino\"].includes(s)) return \"Mujer\";\n    return \"Otro\";\n  };\n\n  // Overrides explícitos por nombre\n  const NAME_GENDER_OVERRIDES: Record<string, \"Hombre\" | \"Mujer\"> = {\n    juan: \"Hombre\",\n    maria: \"Mujer\",\n    maría: \"Mujer\",\n  };\n\n  const guessGenderFromName = (fullName: string): \"Hombre\" | \"Mujer\" | \"Otro\" => {\n    if (!fullName) return \"Otro\";\n    const first = stripAccents(fullName.split(/\\s+/)[0].toLowerCase());\n    return NAME_GENDER_OVERRIDES[first] ?? \"Otro\";\n  };\n\n  const ensureUsersHaveGender = (list: UserData[]): UserData[] =>\n    list.map((u) => {\n      const normalized = normalizeGender(u.gender);\n      return {\n        ...u,\n        gender: normalized || guessGenderFromName(u.name),\n      };\n    });\n\n\n\n  const handleLogout = () => {\n    logout();\n    setLocation(\"/login\");\n  };\n\n  const handleDownloadAdminPDF = async () => {\n    try {\n      console.log('Iniciando descarga de PDF admin...');\n      \n      const currentDate = new Date();\n      const currentMonth = currentDate.toLocaleDateString('es-ES', { month: 'long', year: 'numeric' });\n      \n      const adminData = {\n        fecha: currentDate.toLocaleDateString('es-ES'),\n        periodo: currentMonth,\n        totalUsers: stats.totalUsers,\n        totalProducts: stats.totalProducts,\n        totalContracts: stats.totalContracts,\n        pendingKyc: stats.pendingKyc,\n        financialKpis: financialKpis ? {\n          totalAUM: financialKpis.totalAUM,\n          newCapitalMonth: financialKpis.newCapitalMonth,\n          withdrawnCapitalMonth: financialKpis.withdrawnCapitalMonth,\n          netCapitalGrowth: financialKpis.netCapitalGrowth,\n          averageInvestment: financialKpis.averageInvestment,\n          activeClients: financialKpis.activeClients,\n          clientRetention: financialKpis.clientRetention,\n          monthlyEvolution: financialKpis.monthlyEvolution\n        } : undefined,\n        kycStats: kycChartData,\n        contractsStats: contractsChartData\n      };\n\n      console.log('Datos del admin para PDF:', adminData);\n      \n      await generateAdminStatementPDF(adminData);\n      \n      console.log('PDF admin descargado exitosamente');\n    } catch (error) {\n      console.error('Error al generar PDF admin:', error);\n      alert('Error al generar el PDF. Por favor revisa la consola para más detalles.');\n    }\n  };\n\n  // Chart data\n  const kycChartData = [\n    { name: \"Aprobados\", value: kyc.filter((k) => k.status === \"approved\").length, color: \"#22c55e\" },\n    { name: \"Pendientes\", value: kyc.filter((k) => k.status === \"pending\").length, color: \"#f59e0b\" },\n    { name: \"Rechazados\", value: kyc.filter((k) => k.status === \"rejected\").length, color: \"#ef4444\" },\n  ];\n\n  const contractsChartData = [\n    { name: \"Activos\", value: contracts.filter((c) => c.status === \"active\").length, color: \"#22c55e\" },\n    { name: \"Listos\", value: contracts.filter((c) => c.status === \"ready_to_start\").length, color: \"#f59e0b\" },\n    { name: \"Completados\", value: contracts.filter((c) => c.status === \"completed\").length, color: \"#3b82f6\" },\n  ];\n\n  // Helpers\n  const endOfDay = (d: string) => {\n    const t = new Date(d);\n    t.setHours(23, 59, 59, 999);\n    return t;\n  };\n  const fmtEur = (n: number) =>\n    new Intl.NumberFormat(\"es-ES\", { style: \"currency\", currency: \"EUR\", maximumFractionDigits: 0 }).format(n);\n\n  // Unique values for dropdowns\n  const userGrades = Array.from(new Set(users.map((u) => u.grade).filter(Boolean))) as string[];\n  const userGenders = Array.from(\n    new Set(users.map((u) => (normalizeGender(u.gender) || guessGenderFromName(u.name))).filter(Boolean))\n  ) as string[];\n  const kycCountries = [\"España\", \"Francia\", \"Portugal\", \"Italia\", \"Alemania\"];\n  const kycDocTypes = Array.from(new Set(kyc.map((k) => k.documentType).filter(Boolean))) as string[];\n  const contractProductNames = Array.from(new Set(contracts.map((c) => c.productName).filter(Boolean))) as string[];\n\n  // ===== FILTERED COLLECTIONS =====\n  // Usuarios\n  const filteredUsers = users\n    .filter(\n      (u) =>\n        u.name.toLowerCase().includes(userSearch.toLowerCase()) ||\n        u.email.toLowerCase().includes(userSearch.toLowerCase()) ||\n        u.id.toString().includes(userSearch)\n    )\n    .filter((u) => (userFilters.role ? u.role === userFilters.role : true))\n    .filter((u) => (userFilters.grade ? u.grade === userFilters.grade : true))\n    .filter((u) =>\n      userFilters.verificationStatus ? u.verificationStatus === userFilters.verificationStatus : true\n    )\n    .filter((u) =>\n      userFilters.sponsor ? (u.sponsor || \"\").toLowerCase().includes(userFilters.sponsor.toLowerCase()) : true\n    )\n    .filter((u) =>\n      userFilters.gender ? (normalizeGender(u.gender) || guessGenderFromName(u.name)) === userFilters.gender : true\n    )\n    .filter((u) =>\n      userFilters.dateFrom ? new Date(u.createdAt) >= new Date(userFilters.dateFrom) : true\n    )\n    .filter((u) => (userFilters.dateTo ? new Date(u.createdAt) <= endOfDay(userFilters.dateTo) : true))\n    .sort((a, b) => {\n      if (userSort === \"created_desc\") return +new Date(b.createdAt) - +new Date(a.createdAt);\n      if (userSort === \"created_asc\") return +new Date(a.createdAt) - +new Date(b.createdAt);\n      if (userSort === \"name_asc\") return a.name.localeCompare(b.name);\n      if (userSort === \"name_desc\") return b.name.localeCompare(a.name);\n      return 0;\n    });\n\n  // KYC\n  const filteredKyc = kyc\n    .filter((k) => {\n      const matchesSearch =\n        k.fullName.toLowerCase().includes(kycSearch.toLowerCase()) ||\n        k.documentNumber.toLowerCase().includes(kycSearch.toLowerCase()) ||\n        k.id.toString().includes(kycSearch);\n      const matchesStatus = kycFilter === \"all\" || k.status === kycFilter;\n      return matchesSearch && matchesStatus;\n    })\n    .filter((k) => (kycAdvancedFilters.documentType ? k.documentType === kycAdvancedFilters.documentType : true))\n    .filter((k) => (kycAdvancedFilters.country ? k.country === kycAdvancedFilters.country : true))\n    .filter((k) =>\n      kycAdvancedFilters.dateFrom ? new Date(k.createdAt) >= new Date(kycAdvancedFilters.dateFrom) : true\n    )\n    .filter((k) =>\n      kycAdvancedFilters.dateTo ? new Date(k.createdAt) <= endOfDay(kycAdvancedFilters.dateTo) : true\n    )\n    // 🔹 Aplicar Estado Aprobado/Rechazado (ignora pendientes)\n    .filter((k) => (kycStateAr ? k.status === kycStateAr : true))\n    .sort((a, b) => {\n      if (kycSort === \"created_desc\") return +new Date(b.createdAt) - +new Date(a.createdAt);\n      if (kycSort === \"created_asc\") return +new Date(a.createdAt) - +new Date(b.createdAt);\n      if (kycSort === \"name_asc\") return a.fullName.localeCompare(b.fullName);\n      if (kycSort === \"name_desc\") return b.fullName.localeCompare(a.fullName);\n      return 0;\n    });\n\n  // Productos\n  const filteredProducts = products\n    .filter(\n      (p) =>\n        p.name.toLowerCase().includes(productSearch.toLowerCase()) ||\n        p.id.toString().includes(productSearch)\n    )\n    .filter((p) => (productFilters.status ? p.status === productFilters.status : true))\n    .filter((p) =>\n      productFilters.autoRenewal === \"\"\n        ? true\n        : productFilters.autoRenewal === \"true\"\n        ? p.autoRenewal\n        : !p.autoRenewal\n    )\n    .filter((p) => {\n      const rate = parseFloat(p.interestRate);\n      const min = productFilters.rateMin ? parseFloat(productFilters.rateMin) : -Infinity;\n      const max = productFilters.rateMax ? parseFloat(productFilters.rateMax) : Infinity;\n      return rate >= min && rate <= max;\n    })\n    .filter((p) => {\n      const term = p.termDays || 0;\n      const min = productFilters.termMin ? parseInt(productFilters.termMin) : -Infinity;\n      const max = productFilters.termMax ? parseInt(productFilters.termMax) : Infinity;\n      return term >= min && term <= max;\n    })\n    .filter((p) => {\n      const minAmt = parseInt(p.minAmount || \"0\");\n      const maxAmt = parseInt(p.maxAmount || \"0\");\n      const fMin = productFilters.amountMin ? parseInt(productFilters.amountMin) : -Infinity;\n      const fMax = productFilters.amountMax ? parseInt(productFilters.amountMax) : Infinity;\n      return (minAmt >= fMin && minAmt <= fMax) || (maxAmt >= fMin && maxAmt <= fMax);\n    })\n    .sort((a, b) => {\n      if (productSort === \"rate_desc\") return parseFloat(b.interestRate) - parseFloat(a.interestRate);\n      if (productSort === \"rate_asc\") return parseFloat(a.interestRate) - parseFloat(b.interestRate);\n      if (productSort === \"term_desc\") return (b.termDays || 0) - (a.termDays || 0);\n      if (productSort === \"term_asc\") return (a.termDays || 0) - (b.termDays || 0);\n      return 0;\n    });\n\n  // Contratos\n  const filteredContracts = contracts\n    .filter(\n      (c) =>\n        c.userName.toLowerCase().includes(contractSearch.toLowerCase()) ||\n        c.productName.toLowerCase().includes(contractSearch.toLowerCase()) ||\n        c.id.toString().includes(contractSearch)\n    )\n    .filter((c) => (contractFilters.status ? c.status === contractFilters.status : true))\n    .filter((c) => (contractFilters.productName ? c.productName === contractFilters.productName : true))\n    .filter((c) =>\n      contractFilters.dateFrom ? new Date(c.createdAt) >= new Date(contractFilters.dateFrom) : true\n    )\n    .filter((c) =>\n      contractFilters.dateTo ? new Date(c.createdAt) <= endOfDay(contractFilters.dateTo) : true\n    )\n    .filter((c) => {\n      const amt = parseInt(c.amount || \"0\");\n      const min = contractFilters.amountMin ? parseInt(contractFilters.amountMin) : -Infinity;\n      const max = contractFilters.amountMax ? parseInt(contractFilters.amountMax) : Infinity;\n      return amt >= min && amt <= max;\n    })\n    .sort((a, b) => {\n      if (contractSort === \"date_desc\") return +new Date(b.createdAt) - +new Date(a.createdAt);\n      if (contractSort === \"date_asc\") return +new Date(a.createdAt) - +new Date(b.createdAt);\n      if (contractSort === \"amount_desc\") return parseInt(b.amount) - parseInt(a.amount);\n      if (contractSort === \"amount_asc\") return parseInt(a.amount) - parseInt(b.amount);\n      return 0;\n    });\n\n  // ===== CRUD handlers (sin cambios relevantes) =====\n  const handleCreateUser = async () => {\n    try {\n      if (!newUser.name || !newUser.email) {\n        alert(\"Por favor complete todos los campos obligatorios\");\n        return;\n      }\n      if (!editingUser && (!newUser.password || newUser.password.length < 6)) {\n        alert(\"La contraseña debe tener al menos 6 caracteres\");\n        return;\n      }\n\n      const token = localStorage.getItem(\"token\");\n      let url = \"/api/admin/users\";\n      let method = \"POST\";\n      let body: any = { ...newUser };\n\n      if (editingUser) {\n        url = `/api/admin/users/${editingUser.id}`;\n        method = \"PUT\";\n        if (!newUser.password) {\n          const { password, ...rest } = body;\n          body = rest;\n        }\n      }\n\n      const response = await fetch(url, {\n        method,\n        headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(body),\n      });\n\n      if (response.ok) {\n        alert(editingUser ? \"Usuario actualizado exitosamente\" : \"Usuario creado exitosamente\");\n        handleCloseUserDialog();\n        queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      } else {\n        const errorData = await response.json();\n        alert(`Error: ${errorData.error || \"No se pudo procesar el usuario\"}`);\n      }\n    } catch (error) {\n      console.error(\"Error creating/updating user:\", error);\n      alert(\"Error de conexión al procesar usuario\");\n    }\n  };\n\n  const handleCreateProduct = async () => {\n    try {\n      if (\n        !newProduct.name ||\n        !newProduct.interestRate ||\n        !newProduct.termDays ||\n        !newProduct.minAmount ||\n        !newProduct.maxAmount\n      ) {\n        alert(\"Por favor complete todos los campos obligatorios\");\n        return;\n      }\n      if (isNaN(parseInt(newProduct.termDays)) || parseInt(newProduct.termDays) <= 0) {\n        alert(\"El plazo debe ser un número válido mayor a 0\");\n        return;\n      }\n\n      const token = localStorage.getItem(\"token\");\n      let url = \"/api/admin/products\";\n      let method = \"POST\";\n\n      if (editingProduct) {\n        url = `/api/admin/products/${editingProduct.id}`;\n        method = \"PUT\";\n      }\n\n      const response = await fetch(url, {\n        method,\n        headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ ...newProduct, termDays: parseInt(newProduct.termDays as any) }),\n      });\n\n      if (response.ok) {\n        alert(editingProduct ? \"Producto actualizado exitosamente\" : \"Producto creado exitosamente\");\n        handleCloseProductDialog();\n        queryClient.invalidateQueries({ queryKey: [\"/api/admin/products\"] });\n      } else {\n        const errorData = await response.json();\n        alert(`Error: ${errorData.error || \"No se pudo procesar el producto\"}`);\n      }\n    } catch (error) {\n      console.error(\"Error creating/updating product:\", error);\n      alert(\"Error de conexión al procesar producto\");\n    }\n  };\n\n  const handleDeleteUser = async (userId: number) => {\n    if (!confirm(\"¿Está seguro de que desea eliminar este usuario?\")) return;\n    try {\n      const token = localStorage.getItem(\"token\");\n      const response = await fetch(`/api/admin/users/${userId}`, {\n        method: \"DELETE\",\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      if (response.ok) {\n        alert(\"Usuario eliminado exitosamente\");\n        queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      } else {\n        const errorData = await response.json();\n        alert(`Error: ${errorData.error || \"No se pudo eliminar el usuario\"}`);\n      }\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      alert(\"Error de conexión al eliminar usuario\");\n    }\n  };\n\n  const handleDeleteProduct = async (productId: number) => {\n    if (!confirm(\"¿Está seguro de que desea eliminar este producto?\")) return;\n    try {\n      const token = localStorage.getItem(\"token\");\n      const response = await fetch(`/api/admin/products/${productId}`, {\n        method: \"DELETE\",\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      if (response.ok) {\n        alert(\"Producto eliminado exitosamente\");\n        queryClient.invalidateQueries({ queryKey: [\"/api/admin/products\"] });\n      } else {\n        const errorData = await response.json();\n        alert(`Error: ${errorData.error || \"No se pudo eliminar el producto\"}`);\n      }\n    } catch (error) {\n      console.error(\"Error deleting product:\", error);\n      alert(\"Error de conexión al eliminar producto\");\n    }\n  };\n\n  const handleEditUser = (u: UserData) => {\n    setEditingUser(u);\n    setNewUser({\n      name: u.name,\n      email: u.email,\n      password: \"\",\n      role: u.role,\n      sponsor: u.sponsor || \"\",\n      grade: u.grade,\n    });\n    setShowUserDialog(true);\n  };\n\n  const handleEditProduct = (p: ProductData) => {\n    setEditingProduct(p);\n    setNewProduct({\n      name: p.name,\n      interestRate: p.interestRate,\n      termDays: p.termDays.toString(),\n      minAmount: p.minAmount,\n      maxAmount: p.maxAmount,\n      status: p.status,\n      autoRenewal: p.autoRenewal,\n      contractTemplate: p.contractTemplate || \"\",\n    });\n    setShowProductDialog(true);\n  };\n\n  const handleUpdateKycStatus = async (kycId: number, newStatus: \"approved\" | \"pending\" | \"rejected\") => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      const response = await fetch(`/api/admin/kyc/${kycId}`, {\n        method: \"PUT\",\n        headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ status: newStatus }),\n      });\n\n      if (response.ok) {\n        alert(\n          `Estado KYC actualizado a ${\n            newStatus === \"approved\" ? \"Aprobado\" : newStatus === \"rejected\" ? \"Rechazado\" : \"Pendiente\"\n          }`\n        );\n        queryClient.invalidateQueries({ queryKey: [\"/api/admin/kyc\"] });\n      } else {\n        const errorData = await response.json();\n        alert(`Error: ${errorData.error || \"No se pudo actualizar el estado KYC\"}`);\n      }\n    } catch (error) {\n      console.error(\"Error updating KYC status:\", error);\n      alert(\"Error de conexión al actualizar estado KYC\");\n    }\n  };\n\n  const handleUpdateContractStatus = async (\n    contractId: number,\n    newStatus: \"active\" | \"ready_to_start\" | \"completed\" | \"cancelled\"\n  ) => {\n    try {\n      const token = localStorage.getItem(\"token\");\n      const response = await fetch(`/api/admin/contracts/${contractId}`, {\n        method: \"PUT\",\n        headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ status: newStatus }),\n      });\n\n      if (response.ok) {\n        const statusText = {\n          active: \"Activo\",\n          ready_to_start: \"Listo para Iniciar\",\n          completed: \"Completado\",\n          cancelled: \"Cancelado\",\n        };\n        alert(`Estado del contrato actualizado a ${statusText[newStatus]}`);\n        queryClient.invalidateQueries({ queryKey: [\"/api/admin/contracts\"] });\n      } else {\n        const errorData = await response.json();\n        alert(`Error: ${errorData.error || \"No se pudo actualizar el estado del contrato\"}`);\n      }\n    } catch (error) {\n      console.error(\"Error updating contract:\", error);\n      alert(\"Error de conexión al actualizar estado del contrato\");\n    }\n  };\n\n  const handleCloseUserDialog = () => {\n    setShowUserDialog(false);\n    setEditingUser(null);\n    setNewUser({ name: \"\", email: \"\", password: \"\", role: \"client\", sponsor: \"\", grade: \"Bronze\" });\n  };\n\n  const handleCloseProductDialog = () => {\n    setShowProductDialog(false);\n    setEditingProduct(null);\n    setNewProduct({\n      name: \"\",\n      interestRate: \"\",\n      termDays: \"\",\n      minAmount: \"\",\n      maxAmount: \"\",\n      status: \"active\",\n      autoRenewal: false,\n      contractTemplate: \"\",\n    });\n  };\n\n  const handleEditKyc = (k: KycData) => {\n    setEditingKyc(k);\n    setShowKycDialog(true);\n  };\n\n  const handleViewDocuments = (documentsUrls: string[] | null) => {\n    if (!documentsUrls || documentsUrls.length === 0) {\n      alert(\"No hay documentos disponibles para este registro KYC\");\n      return;\n    }\n    setViewingDocuments(documentsUrls);\n    setShowDocumentsDialog(true);\n  };\n\n  const handleCloseDocumentsDialog = () => {\n    setShowDocumentsDialog(false);\n    setViewingDocuments(null);\n  };\n  const handleCloseKycDialog = () => {\n    setShowKycDialog(false);\n    setEditingKyc(null);\n    setKycReviewStatus(\"approved\");\n    setRejectionReason(\"\");\n  };\n\n  const handleUpdateKycForm = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!editingKyc) return;\n    try {\n      const token = localStorage.getItem(\"token\");\n      const response = await fetch(`/api/admin/kyc/${editingKyc.id}`, {\n        method: \"PUT\",\n        headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ status: editingKyc.status }),\n      });\n\n      if (response.ok) {\n        alert(\n          `Estado KYC actualizado a ${\n            editingKyc.status === \"approved\" ? \"Aprobado\" : editingKyc.status === \"rejected\" ? \"Rechazado\" : \"Pendiente\"\n          }`\n        );\n        handleCloseKycDialog();\n        queryClient.invalidateQueries({ queryKey: [\"/api/admin/kyc\"] });\n      } else {\n        const errorData = await response.json();\n        alert(`Error: ${errorData.error || \"No se pudo actualizar el estado KYC\"}`);\n      }\n    } catch (error) {\n      console.error(\"Error updating KYC:\", error);\n      alert(\"Error de conexión al actualizar KYC\");\n    }\n  };\n\n  const handleEditContract = (c: any) => {\n    setEditingContract(c);\n    setShowContractDialog(true);\n  };\n  const handleCloseContractDialog = () => {\n    setShowContractDialog(false);\n    setEditingContract(null);\n  };\n  const handleUpdateContractForm = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!editingContract) return;\n    try {\n      const token = localStorage.getItem(\"token\");\n      const response = await fetch(`/api/admin/contracts/${editingContract.id}`, {\n        method: \"PUT\",\n        headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ status: editingContract.status }),\n      });\n\n      if (response.ok) {\n        const statusText = {\n          active: \"Activo\",\n          ready_to_start: \"Listo para Iniciar\",\n          completed: \"Completado\",\n          cancelled: \"Cancelado\",\n        } as const;\n        alert(`Estado del contrato actualizado a ${statusText[editingContract.status as keyof typeof statusText]}`);\n        handleCloseContractDialog();\n        queryClient.invalidateQueries({ queryKey: [\"/api/admin/contracts\"] });\n      } else {\n        const errorData = await response.json();\n        alert(`Error: ${errorData.error || \"No se pudo actualizar el estado del contrato\"}`);\n      }\n    } catch (error) {\n      console.error(\"Error updating contract:\", error);\n      alert(\"Error de conexión al actualizar contrato\");\n    }\n  };\n\n  // ===== Navegación a FICHA de usuario (mejora botón \"ver\") =====\n  const openUserProfileById = async (id: number) => {\n    try {\n      setLoadingUserProfile(true);\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/admin/user-profile/${id}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        alert(`Error: ${errorData.error}`);\n        return;\n      }\n\n      const data = await response.json();\n      setSelectedUserProfile(data.profile);\n      setShowUserProfileDialog(true);\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      alert('Error al obtener el perfil del usuario');\n    } finally {\n      setLoadingUserProfile(false);\n    }\n  };\n\n  const openUserProfileByName = (fullName: string) => {\n    const u = users.find((x) => x.name.toLowerCase() === fullName.toLowerCase());\n    if (!u) {\n      alert(\"No se encontró un usuario con ese nombre.\");\n      return;\n    }\n    openUserProfileById(u.id);\n  };\n\n  if (loading) {\n    return (\n      <div\n        className={[\n          \"relative min-h-screen flex items-center justify-center\",\n          \"bg-gradient-to-br from-black via-[#0A1713] to-[#0E2A1F]\",\n          \"before:pointer-events-none before:absolute before:inset-0\",\n          \"before:bg-[radial-gradient(80%_60%_at_110%_-10%,rgba(16,185,129,0.18),transparent),radial-gradient(60%_40%_at_-20%_110%,rgba(16,185,129,0.12),transparent)]\",\n        ].join(\" \")}\n      >\n        <div className=\"text-emerald-50 text-xl\">Cargando panel de administración...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={[\n        \"relative min-h-screen text-white\",\n        \"bg-gradient-to-br from-black via-[#0A1713] to-[#0E2A1F]\",\n        \"before:pointer-events-none before:absolute before:inset-0\",\n        \"before:bg-[radial-gradient(80%_60%_at_110%_-10%,rgba(16,185,129,0.18),transparent),radial-gradient(60%_40%_at_-20%_110%,rgba(16,185,129,0.12),transparent)]\",\n      ].join(\" \")}\n    >\n      {/* Sidebar */}\n      <aside\n        className={[\n          \"fixed left-0 top-0 h-full w-64 z-40 p-6\",\n          \"bg-black/40 backdrop-blur-sm\",\n          \"border-r border-emerald-500/15\",\n          \"shadow-[0_0_0_1px_rgba(16,185,129,0.08),_0_20px_60px_-20px_rgba(16,185,129,0.25)]\",\n        ].join(\" \")}\n      >\n        <div className=\"flex items-center space-x-3 mb-8\">\n          <img src={logoImg} alt=\"Nakama&Partners\" className=\"h-10 w-auto drop-shadow-[0_0_14px_rgba(16,185,129,0.35)]\" />\n          <div>\n            <h2 className=\"text-xl font-bold text-emerald-50\">Admin Panel</h2>\n            <p className=\"text-emerald-200/80 text-sm\">{user?.name}</p>\n          </div>\n        </div>\n\n        <nav className=\"space-y-2\">\n          {[\n            { id: \"dashboard\", label: \"Dashboard\", icon: BarChart3 },\n            { id: \"usuarios\", label: \"Usuarios\", icon: Users },\n            { id: \"kyc\", label: \"KYC\", icon: FileCheck },\n            { id: \"productos\", label: \"Productos\", icon: Package },\n            { id: \"contratos\", label: \"Contratos\", icon: FileText },\n            { id: \"auditoria\", label: \"Blog de Actividad\", icon: History },\n          ].map((item) => (\n            <button\n              key={item.id}\n              onClick={() => setActiveTab(item.id)}\n              className={[\n                \"w-full flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors\",\n                activeTab === item.id\n                  ? \"bg-emerald-600/20 border border-emerald-500/30 text-emerald-50 shadow-[0_8px_24px_-12px_rgba(16,185,129,0.45)]\"\n                  : \"text-emerald-200 hover:bg-emerald-900/10\",\n              ].join(\" \")}\n            >\n              <item.icon className=\"w-5 h-5\" />\n              <span>{item.label}</span>\n            </button>\n          ))}\n        </nav>\n\n        <div className=\"absolute bottom-6 left-6 right-6\">\n          <Button\n            onClick={handleLogout}\n            variant=\"outline\"\n            className=\"w-full border-emerald-500/20 text-emerald-50 hover:bg-emerald-900/10\"\n          >\n            <LogOut className=\"w-4 h-4 mr-2\" />\n            Cerrar Sesión\n          </Button>\n        </div>\n      </aside>\n\n      {/* Main Content */}\n      <main className=\"ml-64 p-8\">\n        {activeTab === \"dashboard\" && (\n          <div>\n            <div className=\"flex items-center justify-between mb-8\">\n              <h1 className=\"text-3xl font-bold text-emerald-50\">Panel de Administración</h1>\n              <Button\n                onClick={handleDownloadAdminPDF}\n                className=\"bg-emerald-600 hover:bg-emerald-500 text-white\"\n              >\n                <Download className=\"w-4 h-4 mr-2\" />\n                Descargar Estado de Cuenta PDF\n              </Button>\n            </div>\n\n            {/* Stats Cards */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n              {[\n                { label: \"Usuarios Totales\", value: stats.totalUsers, icon: Users, targetTab: \"usuarios\" },\n                { label: \"Productos Totales\", value: stats.totalProducts, icon: Package, targetTab: \"productos\" },\n                { label: \"Contratos Totales\", value: stats.totalContracts, icon: FileText, targetTab: \"contratos\" },\n                { label: \"KYC Pendientes\", value: stats.pendingKyc, icon: FileCheck, warn: true, targetTab: \"kyc\" },\n              ].map(({ label, value, icon: Icon, warn, targetTab }, i) => (\n                <Card\n                  key={i}\n                  className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)] cursor-pointer hover:bg-black/50 hover:border-emerald-500/25 transition-all duration-200 hover:shadow-[0_0_0_1px_rgba(16,185,129,0.2)]\"\n                  onClick={() => setActiveTab(targetTab)}\n                >\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-emerald-200/80 text-sm font-medium\">{label}</p>\n                        <p className=\"text-emerald-50 text-3xl font-bold\">{value}</p>\n                        <p className=\"text-emerald-400 text-xs\">Click para ver detalles</p>\n                      </div>\n                      <Icon className={`w-8 h-8 ${warn ? \"text-amber-400\" : \"text-emerald-400\"}`} />\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Charts */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n              <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl\">\n                <CardHeader>\n                  <CardTitle className=\"text-emerald-50\">Estado KYC</CardTitle>\n                  <CardDescription className=\"text-emerald-200/80\">Distribución de estados</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <RechartsPieChart>\n                      <Pie\n                        data={kycChartData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        outerRadius={90}\n                        dataKey=\"value\"\n                        label={({ name, value }) => `${name}: ${value}`}\n                      >\n                        {kycChartData.map((entry, index) => (\n                          <Cell key={`cell-kyc-${index}`} fill={entry.color} />\n                        ))}\n                      </Pie>\n                      <Tooltip />\n                    </RechartsPieChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl\">\n                <CardHeader>\n                  <CardTitle className=\"text-emerald-50\">Estado Contratos</CardTitle>\n                  <CardDescription className=\"text-emerald-200/80\">Distribución de estados</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <RechartsPieChart>\n                      <Pie\n                        data={contractsChartData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        outerRadius={90}\n                        dataKey=\"value\"\n                        label={({ name, value }) => `${name}: ${value}`}\n                      >\n                        {contractsChartData.map((entry, index) => (\n                          <Cell key={`cell-ct-${index}`} fill={entry.color} />\n                        ))}\n                      </Pie>\n                      <Tooltip />\n                    </RechartsPieChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Financial KPIs Section */}\n            {financialKpis && (\n              <div className=\"mb-8\">\n                <h2 className=\"text-2xl font-bold text-emerald-50 mb-6\">KPIs Financieros</h2>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n                  <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm font-medium\">Capital Total Gestionado</p>\n                          <p className=\"text-emerald-50 text-2xl font-bold\">€{financialKpis.totalAUM.toLocaleString()}</p>\n                        </div>\n                        <TrendingUp className=\"w-8 h-8 text-emerald-400\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm font-medium\">Capital Nuevo del Mes</p>\n                          <p className=\"text-emerald-50 text-2xl font-bold\">€{financialKpis.newCapitalMonth.toLocaleString()}</p>\n                        </div>\n                        <Plus className=\"w-8 h-8 text-green-400\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm font-medium\">Capital Retirado del Mes</p>\n                          <p className=\"text-emerald-50 text-2xl font-bold\">€{financialKpis.withdrawnCapitalMonth.toLocaleString()}</p>\n                        </div>\n                        <Minus className=\"w-8 h-8 text-red-400\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm font-medium\">Ratio Crecimiento Mensual</p>\n                          <p className={`text-2xl font-bold ${financialKpis.monthlyGrowthRatio >= 0 ? 'text-green-400' : 'text-red-400'}`}>\n                            {financialKpis.monthlyGrowthRatio >= 0 ? '+' : ''}{financialKpis.monthlyGrowthRatio.toFixed(2)}%\n                          </p>\n                        </div>\n                        <BarChart3 className={`w-8 h-8 ${financialKpis.monthlyGrowthRatio >= 0 ? 'text-green-400' : 'text-red-400'}`} />\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                  <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm font-medium\">Rentabilidad Media Carteras</p>\n                          <p className=\"text-emerald-50 text-2xl font-bold\">{financialKpis.averagePortfolioReturn.toFixed(2)}%</p>\n                        </div>\n                        <TrendingUp className=\"w-8 h-8 text-emerald-400\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm font-medium\">Liquidez 30 días</p>\n                          <p className=\"text-emerald-50 text-2xl font-bold\">€{financialKpis.liquidity30Days.toLocaleString()}</p>\n                        </div>\n                        <Calendar className=\"w-8 h-8 text-yellow-400\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm font-medium\">Liquidez 60 días</p>\n                          <p className=\"text-emerald-50 text-2xl font-bold\">€{financialKpis.liquidity60Days.toLocaleString()}</p>\n                        </div>\n                        <Calendar className=\"w-8 h-8 text-orange-400\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm font-medium\">Liquidez 90 días</p>\n                          <p className=\"text-emerald-50 text-2xl font-bold\">€{financialKpis.liquidity90Days.toLocaleString()}</p>\n                        </div>\n                        <Calendar className=\"w-8 h-8 text-red-400\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            )}\n\n            {/* Client KPIs Section */}\n            {financialKpis && (\n              <div className=\"mb-8\">\n                <h2 className=\"text-2xl font-bold text-emerald-50 mb-6\">KPIs de Clientes</h2>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n                  <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm font-medium\">Clientes Activos</p>\n                          <p className=\"text-emerald-50 text-2xl font-bold\">{financialKpis.clientKpis?.activeClients || 0}</p>\n                        </div>\n                        <Users className=\"w-8 h-8 text-emerald-400\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm font-medium\">Altas Nuevas del Mes</p>\n                          <p className=\"text-emerald-50 text-2xl font-bold\">{financialKpis.clientKpis?.newClientsMonth || 0}</p>\n                        </div>\n                        <Plus className=\"w-8 h-8 text-green-400\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm font-medium\">Ticket Medio por Cliente</p>\n                          <p className=\"text-emerald-50 text-2xl font-bold\">€{financialKpis.clientKpis?.averageTicketPerClient?.toLocaleString() || 0}</p>\n                        </div>\n                        <TrendingUp className=\"w-8 h-8 text-emerald-400\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm font-medium\">KYC Pendientes</p>\n                          <p className=\"text-emerald-50 text-2xl font-bold\">{financialKpis.clientKpis?.pendingKyc || 0}</p>\n                          <p className=\"text-emerald-200/60 text-xs\">({((financialKpis.clientKpis?.pendingKycPercentage) || 0).toFixed(1)}%)</p>\n                        </div>\n                        <FileCheck className=\"w-8 h-8 text-amber-400\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm font-medium\">Renovaciones vs No Renovaciones</p>\n                          <p className=\"text-emerald-50 text-lg font-bold\">\n                            {((financialKpis.clientKpis?.renewalRate) || 0).toFixed(1)}% renovaciones\n                          </p>\n                        </div>\n                        <BarChart3 className=\"w-8 h-8 text-emerald-400\" />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-emerald-200/80\">Renovaciones:</span>\n                          <span className=\"text-emerald-50\">{financialKpis.clientKpis?.renewals || 0}</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-emerald-200/80\">No renovaciones:</span>\n                          <span className=\"text-emerald-50\">{financialKpis.clientKpis?.nonRenewals || 0}</span>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm font-medium\">Top 10 Clientes por Capital</p>\n                        </div>\n                        <Crown className=\"w-8 h-8 text-yellow-400\" />\n                      </div>\n                      <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n                        {(financialKpis.clientKpis?.topClients || []).slice(0, 5).map((client: any, index: number) => (\n                          <div key={index} className=\"flex justify-between text-sm\">\n                            <span className=\"text-emerald-200/80 truncate mr-2\">{client.name || `Cliente ${index + 1}`}</span>\n                            <span className=\"text-emerald-50 font-medium\">€{client.totalAmount?.toLocaleString() || 0}</span>\n                          </div>\n                        ))}\n                        {(financialKpis.clientKpis?.topClients?.length || 0) > 5 && (\n                          <p className=\"text-emerald-200/60 text-xs mt-2\">... y {(financialKpis.clientKpis?.topClients?.length || 0) - 5} más</p>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            )}\n\n            {/* Partner KPIs Section */}\n            {financialKpis && (\n              <div className=\"mb-8\">\n                <h2 className=\"text-2xl font-bold text-emerald-50 mb-6\">KPIs de Partners</h2>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n                  <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm font-medium\">Partners Activos</p>\n                          <p className=\"text-emerald-50 text-2xl font-bold\">{financialKpis.partnerKpis?.activePartners || 0}</p>\n                        </div>\n                        <UserCheck className=\"w-8 h-8 text-emerald-400\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm font-medium\">Nuevos Partners del Mes</p>\n                          <p className=\"text-emerald-50 text-2xl font-bold\">{financialKpis.partnerKpis?.newPartnersMonth || 0}</p>\n                        </div>\n                        <Plus className=\"w-8 h-8 text-green-400\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm font-medium\">Comisiones Generadas (Mes)</p>\n                          <p className=\"text-emerald-50 text-2xl font-bold\">€{financialKpis.partnerKpis?.totalCommissionsMonth?.toLocaleString() || 0}</p>\n                        </div>\n                        <Euro className=\"w-8 h-8 text-yellow-400\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm font-medium\">Ratio Conversión Partner→Cliente</p>\n                          <p className=\"text-emerald-50 text-2xl font-bold\">{financialKpis.partnerKpis?.partnerConversionRatio?.toFixed(1) || 0}</p>\n                          <p className=\"text-emerald-200/60 text-xs\">clientes por partner</p>\n                        </div>\n                        <Target className=\"w-8 h-8 text-blue-400\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm font-medium\">Top 10 Partners por Volumen</p>\n                        </div>\n                        <Handshake className=\"w-8 h-8 text-purple-400\" />\n                      </div>\n                      <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n                        {(financialKpis.partnerKpis?.topPartners || []).slice(0, 5).map((partner: any, index: number) => (\n                          <div key={index} className=\"flex justify-between text-sm\">\n                            <span className=\"text-emerald-200/80 truncate mr-2\">{partner.name || `Partner ${index + 1}`}</span>\n                            <span className=\"text-emerald-50 font-medium\">€{partner.totalVolume?.toLocaleString() || 0}</span>\n                          </div>\n                        ))}\n                        {(financialKpis.partnerKpis?.topPartners?.length || 0) > 5 && (\n                          <p className=\"text-emerald-200/60 text-xs mt-2\">... y {(financialKpis.partnerKpis?.topPartners?.length || 0) - 5} más</p>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm font-medium\">Partners Inactivos</p>\n                          <p className=\"text-emerald-50 text-2xl font-bold\">{financialKpis.partnerKpis?.inactivePartners || 0}</p>\n                          <p className=\"text-emerald-200/60 text-xs\">sin captación en 3 meses</p>\n                        </div>\n                        <UserMinus className=\"w-8 h-8 text-orange-400\" />\n                      </div>\n                      <div className=\"mt-4\">\n                        <p className=\"text-emerald-200/80 text-xs\">\n                          Requieren seguimiento para reactivación\n                        </p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            )}\n\n            {/* Operational/Risk KPIs Section */}\n            {financialKpis && (\n              <div className=\"mb-8\">\n                <h2 className=\"text-2xl font-bold text-emerald-50 mb-6\">KPIs Operativos / Riesgo</h2>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n                  <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm font-medium\">Contratos Vencen 30 días</p>\n                          <p className=\"text-emerald-50 text-2xl font-bold\">{financialKpis.operationalKpis?.contractsExpiring30Days || 0}</p>\n                        </div>\n                        <AlertTriangle className=\"w-8 h-8 text-amber-400\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm font-medium\">Contratos Vencen 60 días</p>\n                          <p className=\"text-emerald-50 text-2xl font-bold\">{financialKpis.operationalKpis?.contractsExpiring60Days || 0}</p>\n                        </div>\n                        <Clock className=\"w-8 h-8 text-orange-400\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm font-medium\">Contratos Vencen 90 días</p>\n                          <p className=\"text-emerald-50 text-2xl font-bold\">{financialKpis.operationalKpis?.contractsExpiring90Days || 0}</p>\n                        </div>\n                        <Calendar className=\"w-8 h-8 text-red-400\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm font-medium\">Incidencias Abiertas</p>\n                          <p className=\"text-emerald-50 text-2xl font-bold\">{financialKpis.operationalKpis?.openIncidents || 0}</p>\n                        </div>\n                        <FileCheck className=\"w-8 h-8 text-blue-400\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-1 gap-6\">\n                  <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm font-medium\">Completitud KYC</p>\n                          <p className=\"text-emerald-50 text-2xl font-bold\">{(financialKpis.operationalKpis?.kycCompletionRate || 0).toFixed(1)}%</p>\n                          <p className=\"text-emerald-200/60 text-xs\">clientes verificados</p>\n                        </div>\n                        <CheckCircle className=\"w-8 h-8 text-green-400\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            )}\n\n            {/* Strategic/Business KPIs Section */}\n            {financialKpis && (\n              <div className=\"mb-8\">\n                <h2 className=\"text-2xl font-bold text-emerald-50 mb-6\">KPIs Estratégicos / de Negocio</h2>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm font-medium\">Tasa de Retención de Clientes</p>\n                          <p className=\"text-emerald-50 text-2xl font-bold\">{(financialKpis.strategicKpis?.clientRetentionRate || 0).toFixed(1)}%</p>\n                          <p className=\"text-emerald-200/60 text-xs\">clientes que renuevan</p>\n                        </div>\n                        <TrendingUp className=\"w-8 h-8 text-emerald-400\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm font-medium\">Tasa de Crecimiento de Clientes</p>\n                          <p className={`text-2xl font-bold ${(financialKpis.strategicKpis?.clientGrowthRate || 0) >= 0 ? 'text-emerald-50' : 'text-red-50'}`}>\n                            {(financialKpis.strategicKpis?.clientGrowthRate || 0) >= 0 ? '+' : ''}{(financialKpis.strategicKpis?.clientGrowthRate || 0).toFixed(1)}%\n                          </p>\n                          <p className=\"text-emerald-200/60 text-xs\">(altas - bajas) / total clientes</p>\n                        </div>\n                        <BarChart3 className={`w-8 h-8 ${(financialKpis.strategicKpis?.clientGrowthRate || 0) >= 0 ? 'text-emerald-400' : 'text-red-400'}`} />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm font-medium\">Ingresos Totales Generados (YTD)</p>\n                          <p className=\"text-emerald-50 text-2xl font-bold\">€{(financialKpis.strategicKpis?.totalRevenueYTD || 0).toLocaleString()}</p>\n                          <p className=\"text-emerald-200/60 text-xs\">fees + comisiones + margen</p>\n                        </div>\n                        <DollarSign className=\"w-8 h-8 text-emerald-400\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            )}\n\n            {/* Business Health Traffic Light */}\n            {financialKpis?.businessHealth && (\n              <div className=\"mb-8\">\n                <h2 className=\"text-2xl font-bold text-emerald-50 mb-6\">Semáforo de Salud del Negocio</h2>\n                <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                  <CardContent className=\"p-8\">\n                    <div className=\"flex items-center justify-center\">\n                      <div className=\"flex flex-col items-center space-y-4\">\n                        <div className={`w-24 h-24 rounded-full border-4 flex items-center justify-center ${\n                          financialKpis.businessHealth.status === 'green' ? 'border-green-400 bg-green-400/20' :\n                          financialKpis.businessHealth.status === 'yellow' ? 'border-yellow-400 bg-yellow-400/20' :\n                          'border-red-400 bg-red-400/20'\n                        }`}>\n                          <div className={`w-12 h-12 rounded-full ${\n                            financialKpis.businessHealth.status === 'green' ? 'bg-green-400' :\n                            financialKpis.businessHealth.status === 'yellow' ? 'bg-yellow-400' :\n                            'bg-red-400'\n                          }`}></div>\n                        </div>\n                        <div className=\"text-center\">\n                          <p className={`text-lg font-bold ${getHealthColor(financialKpis.businessHealth.status)}`}>\n                            {financialKpis.businessHealth.status.toUpperCase()}\n                          </p>\n                          <p className=\"text-emerald-200/80 text-sm\">\n                            {getHealthMessage(financialKpis.businessHealth.status, financialKpis.businessHealth.percentage)}\n                          </p>\n                          {financialKpis.businessHealth.contractsAtRiskPercentage > 0 && (\n                            <p className=\"text-emerald-200/60 text-xs mt-1\">\n                              {financialKpis.businessHealth.contractsAtRiskPercentage.toFixed(1)}% del capital en contratos próximos a vencer\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n\n            {/* Monthly Evolution Charts */}\n            {financialKpis?.monthlyEvolution && (\n              <div className=\"mb-8\">\n                <h2 className=\"text-2xl font-bold text-emerald-50 mb-6\">Evolución Mensual</h2>\n                <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                  <CardContent className=\"p-8 space-y-8\">\n                    {/* Capital Evolution */}\n                    <div>\n                      <h4 className=\"text-emerald-50 text-lg font-semibold mb-4 flex items-center gap-2\">\n                        <DollarSign className=\"w-5 h-5 text-green-400\" />\n                        Capital Gestionado\n                      </h4>\n                      <ResponsiveContainer width=\"100%\" height={200}>\n                        <LineChart data={financialKpis.monthlyEvolution}>\n                          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n                          <XAxis dataKey=\"month\" stroke=\"#9CA3AF\" />\n                          <YAxis stroke=\"#9CA3AF\" tickFormatter={(value) => `€${(value / 1000).toFixed(0)}K`} />\n                          <Tooltip \n                            contentStyle={{ \n                              backgroundColor: '#1F2937', \n                              border: '1px solid #374151',\n                              borderRadius: '8px'\n                            }}\n                            formatter={(value: number) => [`€${value.toLocaleString()}`, 'Capital']}\n                          />\n                          <Line \n                            type=\"monotone\" \n                            dataKey=\"capital\" \n                            stroke=\"#10B981\" \n                            strokeWidth={3}\n                            dot={{ fill: '#10B981', strokeWidth: 2, r: 4 }}\n                          />\n                        </LineChart>\n                      </ResponsiveContainer>\n                    </div>\n\n                    {/* Clients Evolution */}\n                    <div>\n                      <h4 className=\"text-emerald-50 text-lg font-semibold mb-4 flex items-center gap-2\">\n                        <Users2 className=\"w-5 h-5 text-blue-400\" />\n                        Número de Clientes\n                      </h4>\n                      <ResponsiveContainer width=\"100%\" height={200}>\n                        <LineChart data={financialKpis.monthlyEvolution}>\n                          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n                          <XAxis dataKey=\"month\" stroke=\"#9CA3AF\" />\n                          <YAxis stroke=\"#9CA3AF\" />\n                          <Tooltip \n                            contentStyle={{ \n                              backgroundColor: '#1F2937', \n                              border: '1px solid #374151',\n                              borderRadius: '8px'\n                            }}\n                            formatter={(value: number) => [value, 'Clientes']}\n                          />\n                          <Line \n                            type=\"monotone\" \n                            dataKey=\"clients\" \n                            stroke=\"#3B82F6\" \n                            strokeWidth={3}\n                            dot={{ fill: '#3B82F6', strokeWidth: 2, r: 4 }}\n                          />\n                        </LineChart>\n                      </ResponsiveContainer>\n                    </div>\n\n                    {/* Revenue Evolution */}\n                    <div>\n                      <h4 className=\"text-emerald-50 text-lg font-semibold mb-4 flex items-center gap-2\">\n                        <Euro className=\"w-5 h-5 text-yellow-400\" />\n                        Ingresos Mensuales\n                      </h4>\n                      <ResponsiveContainer width=\"100%\" height={200}>\n                        <LineChart data={financialKpis.monthlyEvolution}>\n                          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n                          <XAxis dataKey=\"month\" stroke=\"#9CA3AF\" />\n                          <YAxis stroke=\"#9CA3AF\" tickFormatter={(value) => `€${value.toLocaleString()}`} />\n                          <Tooltip \n                            contentStyle={{ \n                              backgroundColor: '#1F2937', \n                              border: '1px solid #374151',\n                              borderRadius: '8px'\n                            }}\n                            formatter={(value: number) => [`€${value.toLocaleString()}`, 'Ingresos']}\n                          />\n                          <Line \n                            type=\"monotone\" \n                            dataKey=\"revenue\" \n                            stroke=\"#F59E0B\" \n                            strokeWidth={3}\n                            dot={{ fill: '#F59E0B', strokeWidth: 2, r: 4 }}\n                          />\n                        </LineChart>\n                      </ResponsiveContainer>\n                    </div>\n\n                    {/* Retention Evolution */}\n                    <div>\n                      <h4 className=\"text-emerald-50 text-lg font-semibold mb-4 flex items-center gap-2\">\n                        <Target className=\"w-5 h-5 text-purple-400\" />\n                        Tasa de Retención\n                      </h4>\n                      <ResponsiveContainer width=\"100%\" height={200}>\n                        <LineChart data={financialKpis.monthlyEvolution}>\n                          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#374151\" />\n                          <XAxis dataKey=\"month\" stroke=\"#9CA3AF\" />\n                          <YAxis stroke=\"#9CA3AF\" domain={[0, 100]} tickFormatter={(value) => `${value}%`} />\n                          <Tooltip \n                            contentStyle={{ \n                              backgroundColor: '#1F2937', \n                              border: '1px solid #374151',\n                              borderRadius: '8px'\n                            }}\n                            formatter={(value: number) => [`${value}%`, 'Retención']}\n                          />\n                          <Line \n                            type=\"monotone\" \n                            dataKey=\"retention\" \n                            stroke=\"#8B5CF6\" \n                            strokeWidth={3}\n                            dot={{ fill: '#8B5CF6', strokeWidth: 2, r: 4 }}\n                          />\n                        </LineChart>\n                      </ResponsiveContainer>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* ====== USUARIOS ====== */}\n        {activeTab === \"usuarios\" && (\n          <div>\n            <div className=\"flex flex-col gap-4 md:flex-row md:items-center md:justify-between mb-4\">\n              <h1 className=\"text-3xl font-bold text-emerald-50\">Gestión de Usuarios</h1>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowUserFilters((v) => !v)}\n                  className=\"border-emerald-500/20 text-emerald-50 hover:bg-emerald-900/10\"\n                >\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  {showUserFilters ? \"Ocultar Filtros\" : \"Mostrar Filtros\"}\n                </Button>\n                {(Object.values(userFilters).some((v) => v) || userSort || userSearch) && (\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => {\n                      setUserFilters({\n                        role: \"\",\n                        grade: \"\",\n                        verificationStatus: \"\",\n                        sponsor: \"\",\n                        gender: \"\",\n                        dateFrom: \"\",\n                        dateTo: \"\",\n                      });\n                      setUserSort(\"\");\n                      setUserSearch(\"\");\n                    }}\n                    className=\"text-emerald-200 hover:text-emerald-50\"\n                  >\n                    <X className=\"w-4 h-4 mr-2\" />\n                    Limpiar Filtros\n                  </Button>\n                )}\n                <Button\n                  className=\"bg-gradient-to-r from-emerald-600 to-emerald-500 hover:from-emerald-500 hover:to-emerald-400 text-white\"\n                  onClick={() => {\n                    setEditingUser(null);\n                    setNewUser({ name: \"\", email: \"\", password: \"\", role: \"client\", sponsor: \"\", grade: \"Bronze\" });\n                    setShowUserDialog(true);\n                  }}\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Agregar Usuario\n                </Button>\n              </div>\n            </div>\n\n            {/* Búsqueda rápida */}\n            <div className=\"mb-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 text-emerald-200/80 w-4 h-4\" />\n                <Input\n                  placeholder=\"Buscar por ID, nombre o email...\"\n                  value={userSearch}\n                  onChange={(e) => setUserSearch(e.target.value)}\n                  className=\"pl-10 bg-black/50 border-emerald-500/20 text-emerald-50 placeholder:text-emerald-200/60\"\n                />\n              </div>\n            </div>\n\n            {/* Panel de filtros avanzados */}\n            {showUserFilters && (\n              <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl mb-6\">\n                <CardContent className=\"p-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">Orden</Label>\n                      <Select value={userSort} onValueChange={(v) => setUserSort(v as any)}>\n                        <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                          <SelectValue placeholder=\"Sin orden\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"created_desc\">Fecha creación: más reciente</SelectItem>\n                          <SelectItem value=\"created_asc\">Fecha creación: más antiguo</SelectItem>\n                          <SelectItem value=\"name_asc\">Nombre A-Z</SelectItem>\n                          <SelectItem value=\"name_desc\">Nombre Z-A</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">Rol</Label>\n                      <Select value={userFilters.role} onValueChange={(v) => setUserFilters({ ...userFilters, role: v })}>\n                        <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                          <SelectValue placeholder=\"Todos\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"client\">Cliente</SelectItem>\n                          <SelectItem value=\"partner\">Asesor</SelectItem>\n                          <SelectItem value=\"admin\">Administrador</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">Grado</Label>\n                      <Select value={userFilters.grade} onValueChange={(v) => setUserFilters({ ...userFilters, grade: v })}>\n                        <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                          <SelectValue placeholder=\"Todos\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {userGrades.length === 0 ? (\n                            <>\n                              <SelectItem value=\"Bronze\">Bronze</SelectItem>\n                              <SelectItem value=\"Silver\">Silver</SelectItem>\n                              <SelectItem value=\"Gold\">Gold</SelectItem>\n                              <SelectItem value=\"Platinum\">Platinum</SelectItem>\n                            </>\n                          ) : (\n                            userGrades.map((g) => (\n                              <SelectItem key={g} value={g}>\n                                {g}\n                              </SelectItem>\n                            ))\n                          )}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    {/* Filtro por Género (no se muestra en tabla) */}\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">Género</Label>\n                      <Select\n                        value={userFilters.gender}\n                        onValueChange={(v) => setUserFilters({ ...userFilters, gender: v })}\n                      >\n                        <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                          <SelectValue placeholder=\"Todos\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {userGenders.length === 0 ? (\n                            <>\n                              <SelectItem value=\"Hombre\">Hombre</SelectItem>\n                              <SelectItem value=\"Mujer\">Mujer</SelectItem>\n                              <SelectItem value=\"Otro\">Otro</SelectItem>\n                            </>\n                          ) : (\n                            userGenders.map((g) => (\n                              <SelectItem key={g} value={g}>\n                                {g}\n                              </SelectItem>\n                            ))\n                          )}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">Verificación</Label>\n                      <Select\n                        value={userFilters.verificationStatus}\n                        onValueChange={(v) => setUserFilters({ ...userFilters, verificationStatus: v })}\n                      >\n                        <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                          <SelectValue placeholder=\"Todos\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"verified\">Verificado</SelectItem>\n                          <SelectItem value=\"pending\">Pendiente</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">Patrocinador</Label>\n                      <Input\n                        placeholder=\"Nombre/email patrocinador\"\n                        value={userFilters.sponsor}\n                        onChange={(e) => setUserFilters({ ...userFilters, sponsor: e.target.value })}\n                        className=\"bg-black/50 border-emerald-500/20 text-emerald-50 placeholder:text-emerald-200/60\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">Desde</Label>\n                      <Input\n                        type=\"date\"\n                        value={userFilters.dateFrom}\n                        onChange={(e) => setUserFilters({ ...userFilters, dateFrom: e.target.value })}\n                        className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">Hasta</Label>\n                      <Input\n                        type=\"date\"\n                        value={userFilters.dateTo}\n                        onChange={(e) => setUserFilters({ ...userFilters, dateTo: e.target.value })}\n                        className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                      />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Tabla de usuarios (SIN columna de género) */}\n            <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl\">\n              <CardContent className=\"p-0\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"border-b border-emerald-500/15\">\n                      <tr>\n                        {[\n                          \"ID\",\n                          \"Nombre\",\n                          \"Email\",\n                          \"Rol\",\n                          \"Patrocinador\",\n                          \"Grado\",\n                          \"Estado\",\n                          \"Fecha\",\n                          \"Acciones\",\n                        ].map((h) => (\n                          <th key={h} className=\"text-left p-4 text-emerald-200/80 font-medium\">\n                            {h}\n                          </th>\n                        ))}\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {filteredUsers.map((u) => (\n                        <tr key={u.id} className=\"border-b border-emerald-500/10\">\n                          <td className=\"p-4 text-emerald-50\">{u.id}</td>\n                          <td className=\"p-4 text-emerald-50\">{u.name}</td>\n                          <td className=\"p-4 text-emerald-50\">{u.email}</td>\n                          <td className=\"p-4\">\n                            <Badge\n                              variant={\n                                u.role === \"admin\" ? \"destructive\" : u.role === \"partner\" ? \"default\" : \"secondary\"\n                              }\n                              className={\n                                u.role === \"admin\"\n                                  ? \"bg-red-500 text-white\"\n                                  : u.role === \"partner\"\n                                  ? \"bg-emerald-500 text-black\"\n                                  : \"bg-emerald-900/30 text-emerald-200\"\n                              }\n                            >\n                              {u.role === \"admin\" ? \"Administrador\" : u.role === \"partner\" ? \"Asesor\" : \"Usuario\"}\n                            </Badge>\n                          </td>\n                          <td className=\"p-4 text-emerald-50\">{u.sponsor || \"-\"}</td>\n                          <td className=\"p-4 text-emerald-50\">{u.grade}</td>\n                          <td className=\"p-4\">\n                            <Badge\n                              variant={u.verificationStatus === \"verified\" ? \"default\" : \"secondary\"}\n                              className={\n                                u.verificationStatus === \"verified\"\n                                  ? \"bg-emerald-500 text-black\"\n                                  : \"bg-emerald-900/30 text-emerald-200\"\n                              }\n                            >\n                              {u.verificationStatus === \"verified\" ? \"Verificado\" : \"Pendiente\"}\n                            </Badge>\n                          </td>\n                          <td className=\"p-4 text-emerald-50\">\n                            {new Date(u.createdAt).toLocaleDateString(\"es-ES\")}\n                          </td>\n                          <td className=\"p-4\">\n                            <div className=\"flex space-x-2\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                disabled={u.role === \"admin\"}\n                                className={`border-emerald-500/20 ${u.role === \"admin\" ? \"text-gray-500 cursor-not-allowed opacity-50\" : \"text-emerald-50\"}`}\n                                onClick={() => u.role !== \"admin\" && openUserProfileById(u.id)}\n                                title={u.role === \"admin\" ? \"No disponible para administradores\" : \"Ver ficha del usuario\"}\n                              >\n                                <Eye className=\"w-4 h-4\" />\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                className=\"border-emerald-500/20 text-emerald-50\"\n                                onClick={() => handleEditUser(u)}\n                              >\n                                <Edit className=\"w-4 h-4\" />\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                className=\"border-red-500/20 text-red-400\"\n                                onClick={() => handleDeleteUser(u.id)}\n                              >\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                      {filteredUsers.length === 0 && (\n                        <tr>\n                          <td colSpan={9} className=\"p-6 text-center text-emerald-200/80\">\n                            Sin resultados.\n                          </td>\n                        </tr>\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Dialog Crear/Editar Usuario */}\n            <Dialog open={showUserDialog} onOpenChange={handleCloseUserDialog}>\n              <DialogContent className=\"bg-black/40 border border-emerald-500/15 text-emerald-50\">\n                <DialogHeader>\n                  <DialogTitle>{editingUser ? \"Editar Usuario\" : \"Agregar Nuevo Usuario\"}</DialogTitle>\n                  <DialogDescription className=\"text-emerald-200/80\">\n                    {editingUser ? \"Modifique los datos del usuario\" : \"Complete los datos para crear un nuevo usuario\"}\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"grid gap-4 py-4\">\n                  <div className=\"grid grid-cols-4 items-center gap-4\">\n                    <Label htmlFor=\"name\" className=\"text-right\">\n                      Nombre\n                    </Label>\n                    <Input\n                      id=\"name\"\n                      value={newUser.name}\n                      onChange={(e) => setNewUser({ ...newUser, name: e.target.value })}\n                      className=\"col-span-3 bg-black/50 border-emerald-500/20 text-emerald-50 placeholder:text-emerald-200/60\"\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-4 items-center gap-4\">\n                    <Label htmlFor=\"email\" className=\"text-right\">\n                      Email\n                    </Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={newUser.email}\n                      onChange={(e) => setNewUser({ ...newUser, email: e.target.value })}\n                      className=\"col-span-3 bg-black/50 border-emerald-500/20 text-emerald-50 placeholder:text-emerald-200/60\"\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-4 items-center gap-4\">\n                    <Label htmlFor=\"password\" className=\"text-right\">\n                      Contraseña\n                    </Label>\n                    <Input\n                      id=\"password\"\n                      type=\"password\"\n                      value={newUser.password}\n                      onChange={(e) => setNewUser({ ...newUser, password: e.target.value })}\n                      className=\"col-span-3 bg-black/50 border-emerald-500/20 text-emerald-50 placeholder:text-emerald-200/60\"\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-4 items-center gap-4\">\n                    <Label htmlFor=\"role\" className=\"text-right\">\n                      Rol\n                    </Label>\n                    <Select value={newUser.role} onValueChange={(value) => setNewUser({ ...newUser, role: value })}>\n                      <SelectTrigger className=\"col-span-3 bg-black/50 border-emerald-500/20 text-emerald-50\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-black/40 border-emerald-500/15 text-emerald-50\">\n                        <SelectItem value=\"client\">Cliente</SelectItem>\n                        <SelectItem value=\"partner\">Asesor</SelectItem>\n                        <SelectItem value=\"admin\">Administrador</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"grid grid-cols-4 items-center gap-4\">\n                    <Label htmlFor=\"sponsor\" className=\"text-right\">\n                      Patrocinador\n                    </Label>\n                    <Input\n                      id=\"sponsor\"\n                      value={newUser.sponsor}\n                      onChange={(e) => setNewUser({ ...newUser, sponsor: e.target.value })}\n                      className=\"col-span-3 bg-black/50 border-emerald-500/20 text-emerald-50 placeholder:text-emerald-200/60\"\n                      placeholder=\"Opcional\"\n                    />\n                  </div>\n                </div>\n                <DialogFooter>\n                  <Button\n                    onClick={handleCreateUser}\n                    className=\"bg-gradient-to-r from-emerald-600 to-emerald-500 hover:from-emerald-500 hover:to-emerald-400 text-white\"\n                  >\n                    {editingUser ? \"Actualizar Usuario\" : \"Crear Usuario\"}\n                  </Button>\n                </DialogFooter>\n              </DialogContent>\n            </Dialog>\n          </div>\n        )}\n\n        {/* ====== KYC ====== */}\n        {activeTab === \"kyc\" && (\n          <div>\n            <h1 className=\"text-3xl font-bold text-emerald-50 mb-4\">Gestión KYC</h1>\n\n            {/* Búsqueda + estado */}\n            <div className=\"flex flex-col md:flex-row gap-4 mb-4\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 text-emerald-200/80 w-4 h-4\" />\n                <Input\n                  placeholder=\"Buscar por ID, nombre o número de documento...\"\n                  value={kycSearch}\n                  onChange={(e) => setKycSearch(e.target.value)}\n                  className=\"pl-10 bg-black/50 border-emerald-500/20 text-emerald-50 placeholder:text-emerald-200/60\"\n                />\n              </div>\n              <Select value={kycFilter} onValueChange={(v: any) => setKycFilter(v)}>\n                <SelectTrigger className=\"w-full md:w-48 bg-black/50 border-emerald-500/20 text-emerald-50\">\n                  <SelectValue placeholder=\"Estado\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-black/40 border-emerald-500/15 text-emerald-50\">\n                  <SelectItem value=\"all\">Todos</SelectItem>\n                  <SelectItem value=\"approved\">Aprobados</SelectItem>\n                  <SelectItem value=\"pending\">Pendientes</SelectItem>\n                  <SelectItem value=\"rejected\">Rechazados</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Controles filtros avanzados */}\n            <div className=\"flex items-center justify-between mb-4\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowKycFilters((v) => !v)}\n                className=\"border-emerald-500/20 text-emerald-50 hover:bg-emerald-900/10\"\n              >\n                <Filter className=\"w-4 h-4 mr-2\" />\n                {showKycFilters ? \"Ocultar Filtros\" : \"Mostrar Filtros\"}\n              </Button>\n              {(kycFilter !== \"all\" ||\n                Object.values(kycAdvancedFilters).some((v) => v) ||\n                kycStateAr ||\n                kycSort ||\n                kycSearch) && (\n                <Button\n                  variant=\"ghost\"\n                  onClick={() => {\n                    setKycFilter(\"all\");\n                    setKycAdvancedFilters({ documentType: \"\", country: \"\", dateFrom: \"\", dateTo: \"\" });\n                    setKycStateAr(\"\");\n                    setKycSort(\"\");\n                    setKycSearch(\"\");\n                  }}\n                  className=\"text-emerald-200 hover:text-emerald-50\"\n                >\n                  <X className=\"w-4 h-4 mr-2\" />\n                  Limpiar Filtros\n                </Button>\n              )}\n            </div>\n\n            {showKycFilters && (\n              <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl mb-6\">\n                <CardContent className=\"p-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">Orden</Label>\n                      <Select value={kycSort} onValueChange={(v) => setKycSort(v as any)}>\n                        <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                          <SelectValue placeholder=\"Sin orden\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"created_desc\">Fecha: más reciente</SelectItem>\n                          <SelectItem value=\"created_asc\">Fecha: más antiguo</SelectItem>\n                          <SelectItem value=\"name_asc\">Nombre A-Z</SelectItem>\n                          <SelectItem value=\"name_desc\">Nombre Z-A</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">Tipo de Documento</Label>\n                      <Select\n                        value={kycAdvancedFilters.documentType}\n                        onValueChange={(v) => setKycAdvancedFilters({ ...kycAdvancedFilters, documentType: v })}\n                      >\n                        <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                          <SelectValue placeholder=\"Todos\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {kycDocTypes.map((d) => (\n                            <SelectItem key={d} value={d}>\n                              {d.toUpperCase()}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">País</Label>\n                      <Select\n                        value={kycAdvancedFilters.country}\n                        onValueChange={(v) => setKycAdvancedFilters({ ...kycAdvancedFilters, country: v })}\n                      >\n                        <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                          <SelectValue placeholder=\"Todos\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {kycCountries.map((c) => (\n                            <SelectItem key={c} value={c}>\n                              {c}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">Desde</Label>\n                      <Input\n                        type=\"date\"\n                        value={kycAdvancedFilters.dateFrom}\n                        onChange={(e) => setKycAdvancedFilters({ ...kycAdvancedFilters, dateFrom: e.target.value })}\n                        className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">Hasta</Label>\n                      <Input\n                        type=\"date\"\n                        value={kycAdvancedFilters.dateTo}\n                        onChange={(e) => setKycAdvancedFilters({ ...kycAdvancedFilters, dateTo: e.target.value })}\n                        className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                      />\n                    </div>\n\n                    {/* Estado (A/R) — al final */}\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">Estado (A/R)</Label>\n                      <Select value={kycStateAr} onValueChange={(v: any) => setKycStateAr(v)}>\n                        <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                          <SelectValue placeholder=\"Todos\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"approved\">Aprobado</SelectItem>\n                          <SelectItem value=\"rejected\">Rechazado</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Tabla KYC */}\n            <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl\">\n              <CardContent className=\"p-0\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"border-b border-emerald-500/15\">\n                      <tr>\n                        {[\"ID\", \"Nombre\", \"Tipo Doc\", \"Número\", \"País\", \"Estado\", \"Fecha\", \"Acciones\"].map((h) => (\n                          <th key={h} className=\"text-left p-4 text-emerald-200/80 font-medium\">\n                            {h}\n                          </th>\n                        ))}\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {filteredKyc.map((record) => (\n                        <tr key={record.id} className=\"border-b border-emerald-500/10\">\n                          <td className=\"p-4 text-emerald-50\">{record.id}</td>\n                          <td className=\"p-4 text-emerald-50\">{record.fullName}</td>\n                          <td className=\"p-4 text-emerald-50\">{record.documentType.toUpperCase()}</td>\n                          <td className=\"p-4 text-emerald-50\">{record.documentNumber}</td>\n                          <td className=\"p-4 text-emerald-50\">{record.country}</td>\n                          <td className=\"p-4\">\n                            <Badge\n                              className={\n                                record.status === \"approved\"\n                                  ? \"bg-emerald-500 text-black\"\n                                  : record.status === \"pending\"\n                                  ? \"bg-amber-500 text-black\"\n                                  : \"bg-red-500 text-white\"\n                              }\n                            >\n                              {record.status === \"approved\"\n                                ? \"Aprobado\"\n                                : record.status === \"pending\"\n                                ? \"Pendiente\"\n                                : \"Rechazado\"}\n                            </Badge>\n                          </td>\n                          <td className=\"p-4 text-emerald-50\">\n                            {new Date(record.createdAt).toLocaleDateString(\"es-ES\")}\n                          </td>\n                          <td className=\"p-4\">\n                            <div className=\"flex space-x-2\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                className=\"border-emerald-500/20 text-emerald-50\"\n                                onClick={() => handleEditKyc(record)}\n                                title=\"Editar estado KYC\"\n                              >\n                                <Edit className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                      {filteredKyc.length === 0 && (\n                        <tr>\n                          <td colSpan={8} className=\"p-6 text-center text-emerald-200/80\">\n                            Sin resultados.\n                          </td>\n                        </tr>\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* ====== PRODUCTOS ====== */}\n        {activeTab === \"productos\" && (\n          <div>\n            <div className=\"flex flex-col gap-4 md:flex-row md:items-center md:justify-between mb-4\">\n              <h1 className=\"text-3xl font-bold text-emerald-50\">Gestión de Productos</h1>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowProductFilters((v) => !v)}\n                  className=\"border-emerald-500/20 text-emerald-50 hover:bg-emerald-900/10\"\n                >\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  {showProductFilters ? \"Ocultar Filtros\" : \"Mostrar Filtros\"}\n                </Button>\n                {(Object.values(productFilters).some((v) => v) || productSort || productSearch) && (\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => {\n                      setProductFilters({\n                        status: \"\",\n                        autoRenewal: \"\",\n                        rateMin: \"\",\n                        rateMax: \"\",\n                        termMin: \"\",\n                        termMax: \"\",\n                        amountMin: \"\",\n                        amountMax: \"\",\n                      });\n                      setProductSort(\"\");\n                      setProductSearch(\"\");\n                    }}\n                    className=\"text-emerald-200 hover:text-emerald-50\"\n                  >\n                    <X className=\"w-4 h-4 mr-2\" />\n                    Limpiar Filtros\n                  </Button>\n                )}\n                <Button\n                  className=\"bg-gradient-to-r from-emerald-600 to-emerald-500 hover:from-emerald-500 hover:to-emerald-400 text-white\"\n                  onClick={() => {\n                    setEditingProduct(null);\n                    setNewProduct({\n                      name: \"\",\n                      interestRate: \"\",\n                      termDays: \"\",\n                      minAmount: \"\",\n                      maxAmount: \"\",\n                      status: \"active\",\n                      autoRenewal: false,\n                      contractTemplate: \"\",\n                    });\n                    setShowProductDialog(true);\n                  }}\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Agregar Producto\n                </Button>\n              </div>\n            </div>\n\n            {/* Búsqueda rápida productos */}\n            <div className=\"mb-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 text-emerald-200/80 w-4 h-4\" />\n                <Input\n                  placeholder=\"Buscar por ID o nombre de producto...\"\n                  value={productSearch}\n                  onChange={(e) => setProductSearch(e.target.value)}\n                  className=\"pl-10 bg-black/50 border-emerald-500/20 text-emerald-50 placeholder:text-emerald-200/60\"\n                />\n              </div>\n            </div>\n\n            {/* Panel filtros productos */}\n            {showProductFilters && (\n              <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl mb-6\">\n                <CardContent className=\"p-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">Orden</Label>\n                      <Select value={productSort} onValueChange={(v) => setProductSort(v as any)}>\n                        <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                          <SelectValue placeholder=\"Sin orden\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"rate_desc\">Tasa: mayor a menor</SelectItem>\n                          <SelectItem value=\"rate_asc\">Tasa: menor a mayor</SelectItem>\n                          <SelectItem value=\"term_desc\">Plazo: mayor a menor</SelectItem>\n                          <SelectItem value=\"term_asc\">Plazo: menor a mayor</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">Estado</Label>\n                      <Select\n                        value={productFilters.status}\n                        onValueChange={(v) => setProductFilters({ ...productFilters, status: v })}\n                      >\n                        <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                          <SelectValue placeholder=\"Todos\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"active\">Activo</SelectItem>\n                          <SelectItem value=\"inactive\">Inactivo</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">Auto Renovación</Label>\n                      <Select\n                        value={productFilters.autoRenewal}\n                        onValueChange={(v) => setProductFilters({ ...productFilters, autoRenewal: v })}\n                      >\n                        <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                          <SelectValue placeholder=\"Todos\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"true\">Sí</SelectItem>\n                          <SelectItem value=\"false\">No</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">Tasa (%) mín</Label>\n                      <Input\n                        placeholder=\"Ej: 5\"\n                        value={productFilters.rateMin}\n                        onChange={(e) => setProductFilters({ ...productFilters, rateMin: e.target.value })}\n                        className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">Tasa (%) máx</Label>\n                      <Input\n                        placeholder=\"Ej: 12\"\n                        value={productFilters.rateMax}\n                        onChange={(e) => setProductFilters({ ...productFilters, rateMax: e.target.value })}\n                        className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">Plazo mín (días)</Label>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"Ej: 30\"\n                        value={productFilters.termMin}\n                        onChange={(e) => setProductFilters({ ...productFilters, termMin: e.target.value })}\n                        className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">Plazo máx (días)</Label>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"Ej: 365\"\n                        value={productFilters.termMax}\n                        onChange={(e) => setProductFilters({ ...productFilters, termMax: e.target.value })}\n                        className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">Monto mín (€)</Label>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"Ej: 50000\"\n                        value={productFilters.amountMin}\n                        onChange={(e) => setProductFilters({ ...productFilters, amountMin: e.target.value })}\n                        className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">Monto máx (€)</Label>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"Ej: 1000000\"\n                        value={productFilters.amountMax}\n                        onChange={(e) => setProductFilters({ ...productFilters, amountMax: e.target.value })}\n                        className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                      />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Tabla productos */}\n            <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl\">\n              <CardContent className=\"p-0\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"border-b border-emerald-500/15\">\n                      <tr>\n                        {[\n                          \"ID\",\n                          \"Nombre\",\n                          \"Tasa\",\n                          \"Plazo\",\n                          \"Monto Min\",\n                          \"Monto Max\",\n                          \"Estado\",\n                          \"Auto Renovación\",\n                          \"Contrato\",\n                          \"Acciones\",\n                        ].map((h) => (\n                          <th key={h} className=\"text-left p-4 text-emerald-200/80 font-medium\">\n                            {h}\n                          </th>\n                        ))}\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {filteredProducts.map((product) => (\n                        <tr key={product.id} className=\"border-b border-emerald-500/10\">\n                          <td className=\"p-4 text-emerald-50\">{product.id}</td>\n                          <td className=\"p-4 text-emerald-50\">{product.name}</td>\n                          <td className=\"p-4 text-emerald-50\">{product.interestRate}%</td>\n                          <td className=\"p-4 text-emerald-50\">{product.termDays} días</td>\n                          <td className=\"p-4 text-emerald-50\">€{parseInt(product.minAmount).toLocaleString()}</td>\n                          <td className=\"p-4 text-emerald-50\">€{parseInt(product.maxAmount).toLocaleString()}</td>\n                          <td className=\"p-4\">\n                            <Badge\n                              className={product.status === \"active\" ? \"bg-emerald-500 text-black\" : \"bg-emerald-900/30 text-emerald-200\"}\n                            >\n                              {product.status === \"active\" ? \"Activo\" : \"Inactivo\"}\n                            </Badge>\n                          </td>\n                          <td className=\"p-4\">\n                            <Badge className={product.autoRenewal ? \"bg-emerald-500 text-black\" : \"bg-emerald-900/30 text-emerald-200\"}>\n                              {product.autoRenewal ? \"Sí\" : \"No\"}\n                            </Badge>\n                          </td>\n                          <td className=\"p-4\">\n                            <Button size=\"sm\" variant=\"outline\" className=\"border-emerald-500/20 text-emerald-50\">\n                              <Download className=\"w-4 h-4\" />\n                            </Button>\n                          </td>\n                          <td className=\"p-4\">\n                            <div className=\"flex space-x-2\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                className=\"border-emerald-500/20 text-emerald-50\"\n                                onClick={() => handleEditProduct(product)}\n                              >\n                                <Edit className=\"w-4 h-4\" />\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                className=\"border-red-500/20 text-red-400\"\n                                onClick={() => handleDeleteProduct(product.id)}\n                              >\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                      {filteredProducts.length === 0 && (\n                        <tr>\n                          <td colSpan={10} className=\"p-6 text-center text-emerald-200/80\">\n                            Sin resultados.\n                          </td>\n                        </tr>\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Dialog Crear/Editar Producto */}\n            <Dialog open={showProductDialog} onOpenChange={handleCloseProductDialog}>\n              <DialogContent className=\"bg-black/40 border border-emerald-500/15 text-emerald-50 max-w-2xl\">\n                <DialogHeader>\n                  <DialogTitle>{editingProduct ? \"Editar Producto\" : \"Agregar Nuevo Producto\"}</DialogTitle>\n                  <DialogDescription className=\"text-emerald-200/80\">\n                    {editingProduct\n                      ? \"Modifique los datos del producto financiero\"\n                      : \"Complete los datos para crear un nuevo producto financiero\"}\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"grid gap-4 py-4 max-h-96 overflow-y-auto\">\n                  {[\n                    { id: \"productName\", label: \"Nombre\", value: newProduct.name, key: \"name\" },\n                    { id: \"interestRate\", label: \"Tasa (%)\", value: newProduct.interestRate, key: \"interestRate\", placeholder: \"9.00\" },\n                    { id: \"termDays\", label: \"Plazo (días)\", value: newProduct.termDays, key: \"termDays\", type: \"number\", placeholder: \"365\" },\n                    { id: \"minAmount\", label: \"Monto Mín (€)\", value: newProduct.minAmount, key: \"minAmount\", placeholder: \"50000\" },\n                    { id: \"maxAmount\", label: \"Monto Máx (€)\", value: newProduct.maxAmount, key: \"maxAmount\", placeholder: \"1000000\" },\n                  ].map((f) => (\n                    <div key={f.id} className=\"grid grid-cols-4 items-center gap-4\">\n                      <Label htmlFor={f.id} className=\"text-right\">\n                        {f.label}\n                      </Label>\n                      <Input\n                        id={f.id}\n                        type={(f as any).type || \"text\"}\n                        value={(newProduct as any)[f.key]}\n                        onChange={(e) => setNewProduct({ ...newProduct, [f.key]: e.target.value } as any)}\n                        className=\"col-span-3 bg-black/50 border-emerald-500/20 text-emerald-50 placeholder:text-emerald-200/60\"\n                        placeholder={(f as any).placeholder}\n                      />\n                    </div>\n                  ))}\n\n                  <div className=\"grid grid-cols-4 items-center gap-4\">\n                    <Label htmlFor=\"productStatus\" className=\"text-right\">\n                      Estado\n                    </Label>\n                    <Select value={newProduct.status} onValueChange={(value) => setNewProduct({ ...newProduct, status: value })}>\n                      <SelectTrigger className=\"col-span-3 bg-black/50 border-emerald-500/20 text-emerald-50\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-black/40 border-emerald-500/15 text-emerald-50\">\n                        <SelectItem value=\"active\">Activo</SelectItem>\n                        <SelectItem value=\"inactive\">Inactivo</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"grid grid-cols-4 items-center gap-4\">\n                    <Label htmlFor=\"autoRenewal\" className=\"text-right\">\n                      Auto Renovación\n                    </Label>\n                    <div className=\"col-span-3\">\n                      <Switch\n                        id=\"autoRenewal\"\n                        checked={newProduct.autoRenewal}\n                        onCheckedChange={(checked) => setNewProduct({ ...newProduct, autoRenewal: checked })}\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-4 items-start gap-4\">\n                    <Label htmlFor=\"contractTemplate\" className=\"text-right mt-2\">\n                      Template Contrato\n                    </Label>\n                    <Textarea\n                      id=\"contractTemplate\"\n                      value={newProduct.contractTemplate}\n                      onChange={(e) => setNewProduct({ ...newProduct, contractTemplate: e.target.value })}\n                      className=\"col-span-3 bg-black/50 border-emerald-500/20 text-emerald-50 placeholder:text-emerald-200/60\"\n                      placeholder=\"Template del contrato...\"\n                      rows={3}\n                    />\n                  </div>\n                </div>\n                <DialogFooter>\n                  <Button\n                    onClick={handleCreateProduct}\n                    className=\"bg-gradient-to-r from-emerald-600 to-emerald-500 hover:from-emerald-500 hover:to-emerald-400 text-white\"\n                  >\n                    {editingProduct ? \"Actualizar Producto\" : \"Crear Producto\"}\n                  </Button>\n                </DialogFooter>\n              </DialogContent>\n            </Dialog>\n          </div>\n        )}\n\n        {/* ====== CONTRATOS ====== */}\n        {activeTab === \"contratos\" && (\n          <div>\n            <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-4 gap-4\">\n              <h1 className=\"text-3xl font-bold text-emerald-50\">Gestión de Contratos</h1>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowContractFilters((v) => !v)}\n                  className=\"border-emerald-500/20 text-emerald-50 hover:bg-emerald-900/10\"\n                >\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  {showContractFilters ? \"Ocultar Filtros\" : \"Mostrar Filtros\"}\n                </Button>\n                {(Object.values(contractFilters).some((v) => v) || contractSort || contractSearch) && (\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => {\n                      setContractFilters({ status: \"\", productName: \"\", dateFrom: \"\", dateTo: \"\", amountMin: \"\", amountMax: \"\" });\n                      setContractSort(\"\");\n                      setContractSearch(\"\");\n                    }}\n                    className=\"text-emerald-200 hover:text-emerald-50\"\n                  >\n                    <X className=\"w-4 h-4 mr-2\" />\n                    Limpiar Filtros\n                  </Button>\n                )}\n              </div>\n            </div>\n\n            {/* Búsqueda rápida contratos */}\n            <div className=\"mb-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 text-emerald-200/80 w-4 h-4\" />\n                <Input\n                  placeholder=\"Buscar por ID, usuario o producto...\"\n                  value={contractSearch}\n                  onChange={(e) => setContractSearch(e.target.value)}\n                  className=\"pl-10 bg-black/50 border-emerald-500/20 text-emerald-50 placeholder:text-emerald-200/60\"\n                />\n              </div>\n            </div>\n\n            {/* Panel filtros contratos */}\n            {showContractFilters && (\n              <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl mb-6\">\n                <CardContent className=\"p-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">Orden</Label>\n                      <Select value={contractSort} onValueChange={(v) => setContractSort(v as any)}>\n                        <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                          <SelectValue placeholder=\"Sin orden\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"date_desc\">Fecha: más reciente</SelectItem>\n                          <SelectItem value=\"date_asc\">Fecha: más antiguo</SelectItem>\n                          <SelectItem value=\"amount_desc\">Monto: mayor a menor</SelectItem>\n                          <SelectItem value=\"amount_asc\">Monto: menor a mayor</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">Estado</Label>\n                      <Select\n                        value={contractFilters.status}\n                        onValueChange={(v) => setContractFilters({ ...contractFilters, status: v })}\n                      >\n                        <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                          <SelectValue placeholder=\"Todos\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"ready_to_start\">Listo para Iniciar</SelectItem>\n                          <SelectItem value=\"active\">Activo</SelectItem>\n                          <SelectItem value=\"completed\">Completado</SelectItem>\n                          <SelectItem value=\"cancelled\">Cancelado</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">Producto</Label>\n                      <Select\n                        value={contractFilters.productName}\n                        onValueChange={(v) => setContractFilters({ ...contractFilters, productName: v })}\n                      >\n                        <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                          <SelectValue placeholder=\"Todos\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {contractProductNames.map((n) => (\n                            <SelectItem key={n} value={n}>\n                              {n}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">Desde</Label>\n                      <Input\n                        type=\"date\"\n                        value={contractFilters.dateFrom}\n                        onChange={(e) => setContractFilters({ ...contractFilters, dateFrom: e.target.value })}\n                        className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">Hasta</Label>\n                      <Input\n                        type=\"date\"\n                        value={contractFilters.dateTo}\n                        onChange={(e) => setContractFilters({ ...contractFilters, dateTo: e.target.value })}\n                        className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">Monto mín (€)</Label>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"Ej: 10000\"\n                        value={contractFilters.amountMin}\n                        onChange={(e) => setContractFilters({ ...contractFilters, amountMin: e.target.value })}\n                        className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-emerald-50\">Monto máx (€)</Label>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"Ej: 500000\"\n                        value={contractFilters.amountMax}\n                        onChange={(e) => setContractFilters({ ...contractFilters, amountMax: e.target.value })}\n                        className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                      />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Tabla contratos */}\n            <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl\">\n              <CardContent className=\"p-0\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"border-b border-emerald-500/15\">\n                      <tr>\n                        {[\"ID\", \"Usuario\", \"Producto\", \"Monto\", \"Estado\", \"Fecha\", \"Acciones\"].map((h) => (\n                          <th key={h} className=\"text-left p-4 text-emerald-200/80 font-medium\">\n                            {h}\n                          </th>\n                        ))}\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {filteredContracts.map((contract) => (\n                        <tr key={contract.id} className=\"border-b border-emerald-500/10\">\n                          <td className=\"p-4 text-emerald-50\">{contract.id}</td>\n                          <td className=\"p-4 text-emerald-50\">{contract.userName}</td>\n                          <td className=\"p-4 text-emerald-50\">{contract.productName}</td>\n                          <td className=\"p-4 text-emerald-50\">€{parseInt(contract.amount).toLocaleString()}</td>\n                          <td className=\"p-4\">\n                            <Badge\n                              className={\n                                contract.status === \"active\"\n                                  ? \"bg-emerald-500 text-black\"\n                                  : contract.status === \"ready_to_start\"\n                                  ? \"bg-amber-500 text-black\"\n                                  : contract.status === \"completed\"\n                                  ? \"bg-blue-500 text-white\"\n                                  : contract.status === \"cancelled\"\n                                  ? \"bg-emerald-900/30 text-emerald-200\"\n                                  : \"bg-emerald-900/30 text-emerald-200\"\n                              }\n                            >\n                              {contract.status === \"active\"\n                                ? \"Activo\"\n                                : contract.status === \"ready_to_start\"\n                                ? \"Listo para Iniciar\"\n                                : contract.status === \"completed\"\n                                ? \"Completado\"\n                                : contract.status === \"cancelled\"\n                                ? \"Cancelado\"\n                                : contract.status}\n                            </Badge>\n                          </td>\n                          <td className=\"p-4 text-emerald-50\">\n                            {new Date(contract.createdAt).toLocaleDateString(\"es-ES\")}{\" \"}\n                            {new Date(contract.createdAt).toLocaleTimeString(\"es-ES\", { hour: \"2-digit\", minute: \"2-digit\" })}\n                          </td>\n                          <td className=\"p-4\">\n                            <div className=\"flex space-x-2\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                className=\"border-emerald-500/20 text-emerald-50\"\n                                title=\"Ver ficha del usuario\"\n                                onClick={() => openUserProfileById(contract.userId)}\n                              >\n                                <Eye className=\"w-4 h-4\" />\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"outline\"\n                                className=\"border-emerald-500/20 text-emerald-50\"\n                                onClick={() => handleEditContract(contract)}\n                              >\n                                <Edit className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                      {filteredContracts.length === 0 && (\n                        <tr>\n                          <td colSpan={7} className=\"p-6 text-center text-emerald-200/80\">\n                            Sin resultados.\n                          </td>\n                        </tr>\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* ====== BLOG DE ACTIVIDAD (AUDITORIA) ====== */}\n        {activeTab === \"auditoria\" && (\n          <div>\n            <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-4 gap-4\">\n              <h1 className=\"text-3xl font-bold text-emerald-50\">Blog de Actividad</h1>\n              <div className=\"flex items-center gap-2 text-emerald-200/80\">\n                <History className=\"w-5 h-5\" />\n                <span>Registro de todas las actividades administrativas</span>\n              </div>\n            </div>\n\n            {isLoadingAuditLogs ? (\n              <div className=\"flex justify-center items-center py-12\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-emerald-500\"></div>\n              </div>\n            ) : (\n              <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\">\n                <CardContent className=\"p-6\">\n                  {auditLogs.length === 0 ? (\n                    <div className=\"text-center py-12\">\n                      <History className=\"w-16 h-16 text-emerald-300/50 mx-auto mb-4\" />\n                      <p className=\"text-emerald-200/80 text-lg mb-2\">No hay actividades registradas</p>\n                      <p className=\"text-emerald-200/60\">Las actividades administrativas aparecerán aquí</p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {auditLogs.map((log: any) => {\n                        const actionColors = {\n                          CREATE: \"bg-green-500/20 text-green-300 border-green-500/30\",\n                          UPDATE: \"bg-blue-500/20 text-blue-300 border-blue-500/30\",\n                          DELETE: \"bg-red-500/20 text-red-300 border-red-500/30\",\n                          REVIEW: \"bg-yellow-500/20 text-yellow-300 border-yellow-500/30\",\n                        };\n                        \n                        const actionIcons = {\n                          CREATE: Plus,\n                          UPDATE: Edit,\n                          DELETE: Trash2,\n                          REVIEW: Eye,\n                        };\n                        \n                        const ActionIcon = actionIcons[log.action as keyof typeof actionIcons] || Eye;\n                        const actionColor = actionColors[log.action as keyof typeof actionColors] || \"bg-gray-500/20 text-gray-300 border-gray-500/30\";\n                        \n                        return (\n                          <div key={log.id} className=\"border border-emerald-500/15 rounded-lg p-4 bg-black/20\">\n                            <div className=\"flex items-start justify-between\">\n                              <div className=\"flex items-start gap-3 flex-1\">\n                                <div className={`p-2 rounded-lg border ${actionColor}`}>\n                                  <ActionIcon className=\"w-4 h-4\" />\n                                </div>\n                                <div className=\"flex-1\">\n                                  <div className=\"flex items-center gap-2 mb-1\">\n                                    <span className=\"font-medium text-emerald-50\">{log.adminName || 'Administrador'}</span>\n                                    <span className=\"text-emerald-200/60\">•</span>\n                                    <span className=\"text-emerald-200/80 text-sm\">{log.adminEmail}</span>\n                                  </div>\n                                  <p className=\"text-emerald-200/90 mb-2\">{log.description}</p>\n                                  <div className=\"flex items-center gap-4 text-sm text-emerald-200/60\">\n                                    <div className=\"flex items-center gap-1\">\n                                      <span>Entidad:</span>\n                                      <Badge variant=\"outline\" className=\"border-emerald-500/30 text-emerald-300\">\n                                        {log.entityType}\n                                      </Badge>\n                                    </div>\n                                    {log.entityId && (\n                                      <div className=\"flex items-center gap-1\">\n                                        <span>ID:</span>\n                                        <code className=\"bg-black/50 px-2 py-1 rounded text-emerald-300\">\n                                          {log.entityId}\n                                        </code>\n                                      </div>\n                                    )}\n                                  </div>\n                                  \n                                  {/* Changes Details */}\n                                  {(log.oldValues || log.newValues) && (\n                                    <details className=\"mt-3\">\n                                      <summary className=\"text-emerald-300 cursor-pointer hover:text-emerald-200 text-sm\">\n                                        Ver detalles de cambios\n                                      </summary>\n                                      <div className=\"mt-2 p-3 bg-black/30 rounded border border-emerald-500/15\">\n                                        {log.oldValues && (\n                                          <div className=\"mb-2\">\n                                            <div className=\"text-xs text-emerald-200/60 mb-1\">Valores anteriores:</div>\n                                            <pre className=\"text-xs text-emerald-200/80 overflow-x-auto\">\n                                              {JSON.stringify(JSON.parse(log.oldValues), null, 2)}\n                                            </pre>\n                                          </div>\n                                        )}\n                                        {log.newValues && (\n                                          <div>\n                                            <div className=\"text-xs text-emerald-200/60 mb-1\">Valores nuevos:</div>\n                                            <pre className=\"text-xs text-emerald-200/80 overflow-x-auto\">\n                                              {JSON.stringify(JSON.parse(log.newValues), null, 2)}\n                                            </pre>\n                                          </div>\n                                        )}\n                                      </div>\n                                    </details>\n                                  )}\n                                </div>\n                              </div>\n                              <div className=\"text-right text-sm text-emerald-200/60\">\n                                <div>{new Date(log.createdAt).toLocaleDateString(\"es-ES\")}</div>\n                                <div>{new Date(log.createdAt).toLocaleTimeString(\"es-ES\", { hour: \"2-digit\", minute: \"2-digit\" })}</div>\n                                {log.ipAddress && (\n                                  <div className=\"text-xs mt-1\">IP: {log.ipAddress}</div>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        )}\n\n        {/* ====== FICHA DETALLADA DE USUARIO ====== */}\n        {activeTab === \"usuario_ficha\" && selectedUser && (\n          <div>\n            <div className=\"flex items-center justify-between mb-6\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-12 h-12 rounded-full bg-emerald-500/20 flex items-center justify-center\">\n                  <UserIcon className=\"w-6 h-6 text-emerald-400\" />\n                </div>\n                <div>\n                  <h1 className=\"text-3xl font-bold text-emerald-50\">{selectedUser.name}</h1>\n                  <p className=\"text-emerald-200/80\">{selectedUser.email}</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-2\">\n                <Badge className={selectedUser.role === \"partner\" ? \"bg-emerald-500 text-black\" : \"bg-emerald-900/30 text-emerald-200\"}>\n                  {selectedUser.role === \"admin\" ? \"Administrador\" : selectedUser.role === \"partner\" ? \"Asesor\" : \"Cliente\"}\n                </Badge>\n                <Badge className=\"bg-emerald-900/30 text-emerald-200 flex items-center gap-1\">\n                  <Crown className=\"w-3 h-3\" />\n                  {selectedUser.grade}\n                </Badge>\n                <Badge className={selectedUser.verificationStatus === \"verified\" ? \"bg-emerald-500 text-black\" : \"bg-amber-500 text-black\"}>\n                  {selectedUser.verificationStatus === \"verified\" ? \"Verificado\" : \"Pendiente\"}\n                </Badge>\n              </div>\n            </div>\n\n            {/* KPIs del cliente */}\n            {(() => {\n              const userContracts = contracts.filter((c) => c.userId === selectedUser.id);\n              const activeAmt = userContracts\n                .filter((c) => c.status === \"active\" || c.status === \"ready_to_start\")\n                .reduce((sum, c) => sum + (parseInt(c.amount || \"0\") || 0), 0);\n              const completedAmt = userContracts\n                .filter((c) => c.status === \"completed\")\n                .reduce((sum, c) => sum + (parseInt(c.amount || \"0\") || 0), 0);\n              const lastDeposit = userContracts\n                .slice()\n                .sort((a, b) => +new Date(b.createdAt) - +new Date(a.createdAt))[0];\n\n              const kycMatch = kyc.find((k) => k.fullName.toLowerCase() === selectedUser.name.toLowerCase());\n\n              return (\n                <>\n                  <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n                    {[\n                      { label: \"Capital invertido\", value: fmtEur(activeAmt) },\n                      { label: \"Contratos activos\", value: userContracts.filter((c) => c.status === \"active\").length.toString() },\n                      { label: \"Completados\", value: userContracts.filter((c) => c.status === \"completed\").length.toString() },\n                      {\n                        label: \"Último depósito\",\n                        value: lastDeposit ? new Date(lastDeposit.createdAt).toLocaleDateString(\"es-ES\") : \"-\",\n                      },\n                    ].map(({ label, value }, i) => (\n                      <Card key={i} className=\"bg-black/40 border border-emerald-500/15 rounded-2xl\">\n                        <CardContent className=\"p-6\">\n                          <p className=\"text-emerald-200/80 text-sm\">{label}</p>\n                          <p className=\"text-emerald-50 text-2xl font-bold\">{value}</p>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n\n                  {/* Datos personales y estado KYC */}\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n                    <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl\">\n                      <CardHeader>\n                        <CardTitle className=\"text-emerald-50\">Datos personales</CardTitle>\n                        <CardDescription className=\"text-emerald-200/80\">\n                          Información básica del cliente\n                        </CardDescription>\n                      </CardHeader>\n                      <CardContent className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm\">Nombre</p>\n                          <p className=\"text-emerald-50 font-medium\">{selectedUser.name}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm\">Email</p>\n                          <p className=\"text-emerald-50 font-medium\">{selectedUser.email}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm\">Patrocinador</p>\n                          <p className=\"text-emerald-50 font-medium\">{selectedUser.sponsor || \"-\"}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm\">Género (inferido)</p>\n                          <p className=\"text-emerald-50 font-medium\">\n                            {normalizeGender(selectedUser.gender) || guessGenderFromName(selectedUser.name)}\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm\">Fecha de alta</p>\n                          <p className=\"text-emerald-50 font-medium\">\n                            {new Date(selectedUser.createdAt).toLocaleDateString(\"es-ES\")}\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm\">Rol</p>\n                          <p className=\"text-emerald-50 font-medium\">\n                            {selectedUser.role === \"admin\" ? \"Administrador\" : selectedUser.role === \"partner\" ? \"Asesor\" : \"Cliente\"}\n                          </p>\n                        </div>\n                      </CardContent>\n                    </Card>\n\n                    <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl\">\n                      <CardHeader>\n                        <CardTitle className=\"text-emerald-50\">Verificación KYC</CardTitle>\n                        <CardDescription className=\"text-emerald-200/80\">\n                          Estado y documento del cliente\n                        </CardDescription>\n                      </CardHeader>\n                      <CardContent className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                        <div className=\"sm:col-span-2\">\n                          <Badge\n                            className={\n                              kycMatch\n                                ? kycMatch.status === \"approved\"\n                                  ? \"bg-emerald-500 text-black\"\n                                  : kycMatch.status === \"pending\"\n                                  ? \"bg-amber-500 text-black\"\n                                  : \"bg-red-500 text-white\"\n                                : \"bg-emerald-900/30 text-emerald-200\"\n                            }\n                          >\n                            {kycMatch\n                              ? kycMatch.status === \"approved\"\n                                ? \"Aprobado\"\n                                : kycMatch.status === \"pending\"\n                                ? \"Pendiente\"\n                                : \"Rechazado\"\n                              : \"Sin registro KYC\"}\n                          </Badge>\n                        </div>\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm\">Tipo Documento</p>\n                          <p className=\"text-emerald-50 font-medium\">{kycMatch?.documentType?.toUpperCase() || \"-\"}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm\">Número</p>\n                          <p className=\"text-emerald-50 font-medium\">{kycMatch?.documentNumber || \"-\"}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm\">País</p>\n                          <p className=\"text-emerald-50 font-medium\">{kycMatch?.country || \"-\"}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm\">Fecha de registro</p>\n                          <p className=\"text-emerald-50 font-medium\">\n                            {kycMatch ? new Date(kycMatch.createdAt).toLocaleDateString(\"es-ES\") : \"-\"}\n                          </p>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n\n                  {/* Contratos del cliente */}\n                  <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl\">\n                    <CardHeader>\n                      <CardTitle className=\"text-emerald-50\">Contratos del cliente</CardTitle>\n                      <CardDescription className=\"text-emerald-200/80\">\n                        Detalle de depósitos, productos y estado\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      {contracts.filter((c) => c.userId === selectedUser.id).length === 0 ? (\n                        <div className=\"text-emerald-200/80\">Este usuario no tiene contratos registrados.</div>\n                      ) : (\n                        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                          {contracts\n                            .filter((c) => c.userId === selectedUser.id)\n                            .sort((a, b) => +new Date(b.createdAt) - +new Date(a.createdAt))\n                            .map((contract) => (\n                              <Card\n                                key={contract.id}\n                                className=\"bg-black/30 border border-emerald-500/15 hover:bg-black/40 transition-all rounded-2xl\"\n                              >\n                                <CardContent className=\"p-6\">\n                                  <div className=\"flex items-start justify-between\">\n                                    <div>\n                                      <h3 className=\"text-emerald-50 font-semibold text-lg\">{contract.productName}</h3>\n                                      <p className=\"text-emerald-200/80\">ID: {contract.id}</p>\n                                    </div>\n                                    <Badge\n                                      className={\n                                        contract.status === \"active\"\n                                          ? \"bg-emerald-500 text-black\"\n                                          : contract.status === \"ready_to_start\"\n                                          ? \"bg-amber-500 text-black\"\n                                          : contract.status === \"completed\"\n                                          ? \"bg-blue-500 text-white\"\n                                          : \"bg-emerald-900/30 text-emerald-200\"\n                                      }\n                                    >\n                                      {contract.status === \"active\"\n                                        ? \"Activo\"\n                                        : contract.status === \"ready_to_start\"\n                                        ? \"Listo para Iniciar\"\n                                        : contract.status === \"completed\"\n                                        ? \"Completado\"\n                                        : \"Cancelado\"}\n                                    </Badge>\n                                  </div>\n\n                                  <div className=\"grid grid-cols-2 gap-4 mt-4\">\n                                    <div>\n                                      <p className=\"text-emerald-200/80 text-sm\">Capital</p>\n                                      <p className=\"text-emerald-50 font-bold text-xl\">{fmtEur(parseInt(contract.amount || \"0\"))}</p>\n                                    </div>\n                                    <div>\n                                      <p className=\"text-emerald-200/80 text-sm\">Fecha</p>\n                                      <p className=\"text-emerald-50 font-medium\">\n                                        {new Date(contract.createdAt).toLocaleDateString(\"es-ES\")}\n                                      </p>\n                                    </div>\n                                  </div>\n\n                                  <div className=\"mt-4 flex gap-2\">\n                                    <Button variant=\"outline\" className=\"border-emerald-500/20 text-emerald-50\">\n                                      <FileText className=\"w-4 h-4 mr-2\" />\n                                      Ver contrato\n                                    </Button>\n                                    <Button className=\"bg-gradient-to-r from-emerald-600 to-emerald-500 hover:from-emerald-500 hover:to-emerald-400 text-white\">\n                                      <Download className=\"w-4 h-4 mr-2\" />\n                                      Descargar PDF\n                                    </Button>\n                                  </div>\n                                </CardContent>\n                              </Card>\n                            ))}\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n\n                  <div className=\"mt-8\">\n                    <Button\n                      variant=\"outline\"\n                      className=\"border-emerald-500/20 text-emerald-50\"\n                      onClick={() => {\n                        setActiveTab(\"usuarios\");\n                        setSelectedUser(null);\n                        setLocation(\"/admin/usuarios\");\n                      }}\n                    >\n                      Volver a Usuarios\n                    </Button>\n                  </div>\n                </>\n              );\n            })()}\n          </div>\n        )}\n\n        {/* ====== DIALOGS EDIT ====== */}\n        {/* KYC Review Dialog */}\n        <Dialog open={showKycDialog} onOpenChange={handleCloseKycDialog}>\n          <DialogContent className=\"bg-black/40 border border-emerald-500/15 text-emerald-50 max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Revisar Documentos KYC</DialogTitle>\n              <DialogDescription className=\"text-emerald-200/80\">\n                Revisar y aprobar/rechazar documentos para {editingKyc?.fullName}\n              </DialogDescription>\n            </DialogHeader>\n            {editingKyc && (\n              <div className=\"space-y-6\">\n                {/* User Information */}\n                <div className=\"grid grid-cols-2 gap-4 p-4 bg-black/30 rounded-lg border border-emerald-500/15\">\n                  <div>\n                    <Label className=\"text-emerald-300 text-sm\">Usuario</Label>\n                    <div className=\"text-emerald-50\">{editingKyc.fullName}</div>\n                  </div>\n                  <div>\n                    <Label className=\"text-emerald-300 text-sm\">Email</Label>\n                    <div className=\"text-emerald-50\">{editingKyc.userEmail}</div>\n                  </div>\n                  <div>\n                    <Label className=\"text-emerald-300 text-sm\">Documento</Label>\n                    <div className=\"text-emerald-50\">\n                      {editingKyc.documentType.toUpperCase()} - {editingKyc.documentNumber}\n                    </div>\n                  </div>\n                  <div>\n                    <Label className=\"text-emerald-300 text-sm\">País</Label>\n                    <div className=\"text-emerald-50\">{editingKyc.country}</div>\n                  </div>\n                </div>\n\n                {/* Documents */}\n                {editingKyc.documentsUrls && editingKyc.documentsUrls.length > 0 && (\n                  <div>\n                    <Label className=\"text-emerald-300 text-sm mb-2 block\">Documentos Subidos</Label>\n                    <div className=\"space-y-2\">\n                      {editingKyc.documentsUrls.map((url, idx) => (\n                        <div key={idx} className=\"flex items-center justify-between p-3 bg-black/30 rounded border border-emerald-500/15\">\n                          <div className=\"flex items-center gap-3\">\n                            <FileText className=\"w-4 h-4 text-emerald-400\" />\n                            <span className=\"text-emerald-50\">{url.split('/').pop()}</span>\n                          </div>\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            className=\"border-emerald-500/20 text-emerald-50\"\n                            onClick={() => handleViewDocuments(editingKyc.documentsUrls)}\n                          >\n                            Ver\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Review Form */}\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label className=\"text-emerald-300 text-sm mb-2 block\">Decisión</Label>\n                    <Select\n                      value={kycReviewStatus}\n                      onValueChange={(value: \"approved\" | \"rejected\") => setKycReviewStatus(value)}\n                    >\n                      <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-black/40 border-emerald-500/15 text-emerald-50\">\n                        <SelectItem value=\"approved\">✅ Aprobar</SelectItem>\n                        <SelectItem value=\"rejected\">❌ Rechazar</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {kycReviewStatus === \"rejected\" && (\n                    <div>\n                      <Label className=\"text-emerald-300 text-sm mb-2 block\">\n                        Motivo del Rechazo <span className=\"text-red-400\">*</span>\n                      </Label>\n                      <textarea\n                        value={rejectionReason}\n                        onChange={(e) => setRejectionReason(e.target.value)}\n                        placeholder=\"Describe el motivo del rechazo...\"\n                        className=\"w-full h-24 p-3 bg-black/50 border border-emerald-500/20 rounded text-emerald-50 placeholder-emerald-400/60 resize-none\"\n                        required\n                      />\n                    </div>\n                  )}\n                </div>\n\n                <DialogFooter className=\"flex gap-2\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={handleCloseKycDialog} \n                    className=\"border-emerald-500/20\"\n                  >\n                    Cancelar\n                  </Button>\n                  <Button \n                    onClick={async () => {\n                      if (kycReviewStatus === \"rejected\" && !rejectionReason.trim()) {\n                        alert(\"Por favor, proporciona un motivo para el rechazo\");\n                        return;\n                      }\n                      \n                      try {\n                        await kycReviewMutation.mutateAsync({\n                          kycId: editingKyc.id,\n                          status: kycReviewStatus,\n                          rejectionReason: kycReviewStatus === \"rejected\" ? rejectionReason : undefined,\n                        });\n                        handleCloseKycDialog();\n                      } catch (error) {\n                        console.error('Error reviewing KYC:', error);\n                      }\n                    }}\n                    disabled={kycReviewMutation.isPending}\n                    className=\"bg-gradient-to-r from-emerald-600 to-emerald-500 hover:from-emerald-500 hover:to-emerald-400 text-white\"\n                  >\n                    {kycReviewMutation.isPending ? \"Procesando...\" : \n                     kycReviewStatus === \"approved\" ? \"Aprobar Documentos\" : \"Rechazar Documentos\"}\n                  </Button>\n                </DialogFooter>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n\n        {/* Contract Edit Dialog */}\n        <Dialog open={showContractDialog} onOpenChange={handleCloseContractDialog}>\n          <DialogContent className=\"bg-black/40 border border-emerald-500/15 text-emerald-50\">\n            <DialogHeader>\n              <DialogTitle>Editar Estado de Contrato</DialogTitle>\n              <DialogDescription className=\"text-emerald-200/80\">\n                Modificar el estado del contrato para {editingContract?.userName}\n              </DialogDescription>\n            </DialogHeader>\n            {editingContract && (\n              <form onSubmit={handleUpdateContractForm}>\n                <div className=\"grid gap-4 py-4\">\n                  <div className=\"grid grid-cols-4 items-center gap-4\">\n                    <Label className=\"text-right\">ID</Label>\n                    <div className=\"col-span-3 text-emerald-200/90\">{editingContract.id}</div>\n                  </div>\n                  <div className=\"grid grid-cols-4 items-center gap-4\">\n                    <Label className=\"text-right\">Usuario</Label>\n                    <div className=\"col-span-3 text-emerald-200/90\">{editingContract.userName}</div>\n                  </div>\n                  <div className=\"grid grid-cols-4 items-center gap-4\">\n                    <Label className=\"text-right\">Producto</Label>\n                    <div className=\"col-span-3 text-emerald-200/90\">{editingContract.productName}</div>\n                  </div>\n                  <div className=\"grid grid-cols-4 items-center gap-4\">\n                    <Label className=\"text-right\">Monto</Label>\n                    <div className=\"col-span-3 text-emerald-200/90\">€{parseInt(editingContract.amount).toLocaleString()}</div>\n                  </div>\n                  <div className=\"grid grid-cols-4 items-center gap-4\">\n                    <Label className=\"text-right\">Fecha Creación</Label>\n                    <div className=\"col-span-3 text-emerald-200/90\">\n                      {new Date(editingContract.createdAt).toLocaleDateString(\"es-ES\")}{\" \"}\n                      {new Date(editingContract.createdAt).toLocaleTimeString(\"es-ES\", { hour: \"2-digit\", minute: \"2-digit\" })}\n                    </div>\n                  </div>\n                  <div className=\"grid grid-cols-4 items-center gap-4\">\n                    <Label htmlFor=\"contractStatus\" className=\"text-right\">\n                      Estado\n                    </Label>\n                    <Select\n                      value={editingContract.status}\n                      onValueChange={(value: \"active\" | \"ready_to_start\" | \"completed\" | \"cancelled\") =>\n                        setEditingContract({ ...editingContract, status: value })\n                      }\n                    >\n                      <SelectTrigger className=\"col-span-3 bg-black/50 border-emerald-500/20 text-emerald-50\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-black/40 border-emerald-500/15 text-emerald-50\">\n                        <SelectItem value=\"ready_to_start\">Listo para Iniciar</SelectItem>\n                        <SelectItem value=\"active\">Activo</SelectItem>\n                        <SelectItem value=\"completed\">Completado</SelectItem>\n                        <SelectItem value=\"cancelled\">Cancelado</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                <DialogFooter>\n                  <Button type=\"button\" variant=\"outline\" onClick={handleCloseContractDialog} className=\"border-emerald-500/20\">\n                    Cancelar\n                  </Button>\n                  <Button type=\"submit\" className=\"bg-gradient-to-r from-emerald-600 to-emerald-500 hover:from-emerald-500 hover:to-emerald-400 text-white\">\n                    Actualizar Estado\n                  </Button>\n                </DialogFooter>\n              </form>\n            )}\n          </DialogContent>\n        </Dialog>\n\n        {/* Documents Viewer Dialog */}\n        <Dialog open={showDocumentsDialog} onOpenChange={handleCloseDocumentsDialog}>\n          <DialogContent className=\"bg-black/40 border border-emerald-500/15 text-emerald-50 max-w-4xl\">\n            <DialogHeader>\n              <DialogTitle>Documentos KYC</DialogTitle>\n              <DialogDescription className=\"text-emerald-200/80\">\n                Documentos subidos por el cliente\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"grid gap-4 py-4\">\n              {viewingDocuments && viewingDocuments.length > 0 ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {viewingDocuments.map((docUrl, index) => (\n                    <div key={index} className=\"border border-emerald-500/20 rounded-lg p-4 bg-black/20\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <div className=\"text-sm text-emerald-200/80\">\n                          Documento {index + 1}\n                        </div>\n                        <Badge className=\"bg-emerald-500/20 text-emerald-200\">\n                          {docUrl.toLowerCase().includes('.pdf') ? 'PDF' : 'Imagen'}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"flex flex-col items-center space-y-3\">\n                        <FileText className=\"w-16 h-16 text-emerald-400\" />\n                        <div className=\"text-sm text-emerald-200/80 text-center\">\n                          <p className=\"font-medium\">{docUrl.split('/').pop()}</p>\n                          <p className=\"text-xs text-emerald-200/60\">\n                            {docUrl.toLowerCase().includes('.pdf') ? 'Archivo PDF' : 'Imagen'}\n                          </p>\n                        </div>\n                        <Button\n                          size=\"sm\"\n                          className=\"bg-gradient-to-r from-emerald-600 to-emerald-500 hover:from-emerald-500 hover:to-emerald-400 text-white\"\n                          onClick={() => {\n                            // Create a temporary download link\n                            const link = document.createElement('a');\n                            link.href = docUrl;\n                            link.download = docUrl.split('/').pop() || 'documento';\n                            link.target = '_blank';\n                            document.body.appendChild(link);\n                            link.click();\n                            document.body.removeChild(link);\n                          }}\n                        >\n                          <Download className=\"w-4 h-4 mr-2\" />\n                          Descargar\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <FileText className=\"w-16 h-16 text-emerald-300/50 mx-auto mb-4\" />\n                  <p className=\"text-emerald-200/80\">No hay documentos disponibles</p>\n                </div>\n              )}\n            </div>\n            <DialogFooter>\n              <Button onClick={handleCloseDocumentsDialog} className=\"bg-gradient-to-r from-emerald-600 to-emerald-500 hover:from-emerald-500 hover:to-emerald-400 text-white\">\n                Cerrar\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n\n        {/* User Profile Modal */}\n        <Dialog open={showUserProfileDialog} onOpenChange={setShowUserProfileDialog}>\n          <DialogContent className=\"bg-black/90 border-emerald-500/20 text-emerald-50 max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle className=\"text-emerald-200 text-xl\">\n                Perfil de Usuario\n              </DialogTitle>\n              <DialogDescription className=\"text-emerald-200/60\">\n                Información detallada del usuario\n              </DialogDescription>\n            </DialogHeader>\n            \n            {loadingUserProfile ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <div className=\"text-emerald-200\">Cargando perfil...</div>\n              </div>\n            ) : selectedUserProfile ? (\n              <div className=\"space-y-6\">\n                {/* Basic Information */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-emerald-200 font-medium\">ID Usuario</Label>\n                    <div className=\"p-3 bg-black/40 border border-emerald-500/20 rounded-lg text-emerald-50\">\n                      {selectedUserProfile.id}\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-emerald-200 font-medium\">Nombre</Label>\n                    <div className=\"p-3 bg-black/40 border border-emerald-500/20 rounded-lg text-emerald-50\">\n                      {selectedUserProfile.name}\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-emerald-200 font-medium\">Email</Label>\n                    <div className=\"p-3 bg-black/40 border border-emerald-500/20 rounded-lg text-emerald-50\">\n                      {selectedUserProfile.email}\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-emerald-200 font-medium\">Rol</Label>\n                    <div className=\"p-3 bg-black/40 border border-emerald-500/20 rounded-lg\">\n                      <Badge className={\n                        selectedUserProfile.role === \"admin\" \n                          ? \"bg-red-500/20 text-red-200\"\n                          : selectedUserProfile.role === \"partner\"\n                          ? \"bg-blue-500/20 text-blue-200\"\n                          : \"bg-emerald-500/20 text-emerald-200\"\n                      }>\n                        {selectedUserProfile.role === \"admin\" ? \"Administrador\" :\n                         selectedUserProfile.role === \"partner\" ? \"Partner\" : \"Cliente\"}\n                      </Badge>\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-emerald-200 font-medium\">Grado</Label>\n                    <div className=\"p-3 bg-black/40 border border-emerald-500/20 rounded-lg text-emerald-50\">\n                      {selectedUserProfile.grade || \"No asignado\"}\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-emerald-200 font-medium\">Sponsor</Label>\n                    <div className=\"p-3 bg-black/40 border border-emerald-500/20 rounded-lg text-emerald-50\">\n                      {selectedUserProfile.sponsor || \"No asignado\"}\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-emerald-200 font-medium\">Estado de Verificación</Label>\n                    <div className=\"p-3 bg-black/40 border border-emerald-500/20 rounded-lg\">\n                      <Badge className={\n                        selectedUserProfile.verificationStatus === \"verified\"\n                          ? \"bg-emerald-500/20 text-emerald-200\"\n                          : selectedUserProfile.verificationStatus === \"pending\"\n                          ? \"bg-amber-500/20 text-amber-200\"\n                          : \"bg-red-500/20 text-red-200\"\n                      }>\n                        {selectedUserProfile.verificationStatus === \"verified\" ? \"Verificado\" :\n                         selectedUserProfile.verificationStatus === \"pending\" ? \"Pendiente\" : \"No verificado\"}\n                      </Badge>\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label className=\"text-emerald-200 font-medium\">Fecha de Registro</Label>\n                    <div className=\"p-3 bg-black/40 border border-emerald-500/20 rounded-lg text-emerald-50\">\n                      {new Date(selectedUserProfile.createdAt).toLocaleDateString(\"es-ES\")}\n                    </div>\n                  </div>\n                </div>\n\n                {/* KYC Information if available */}\n                {(selectedUserProfile.fullName || selectedUserProfile.documentType) && (\n                  <div className=\"border-t border-emerald-500/20 pt-6\">\n                    <h4 className=\"text-emerald-200 font-medium mb-4\">Información KYC</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      {selectedUserProfile.fullName && (\n                        <div className=\"space-y-2\">\n                          <Label className=\"text-emerald-200 font-medium\">Nombre Completo</Label>\n                          <div className=\"p-3 bg-black/40 border border-emerald-500/20 rounded-lg text-emerald-50\">\n                            {selectedUserProfile.fullName}\n                          </div>\n                        </div>\n                      )}\n                      {selectedUserProfile.documentType && (\n                        <div className=\"space-y-2\">\n                          <Label className=\"text-emerald-200 font-medium\">Tipo de Documento</Label>\n                          <div className=\"p-3 bg-black/40 border border-emerald-500/20 rounded-lg text-emerald-50\">\n                            {selectedUserProfile.documentType}\n                          </div>\n                        </div>\n                      )}\n                      {selectedUserProfile.documentNumber && (\n                        <div className=\"space-y-2\">\n                          <Label className=\"text-emerald-200 font-medium\">Número de Documento</Label>\n                          <div className=\"p-3 bg-black/40 border border-emerald-500/20 rounded-lg text-emerald-50\">\n                            {selectedUserProfile.documentNumber}\n                          </div>\n                        </div>\n                      )}\n                      {selectedUserProfile.country && (\n                        <div className=\"space-y-2\">\n                          <Label className=\"text-emerald-200 font-medium\">País</Label>\n                          <div className=\"p-3 bg-black/40 border border-emerald-500/20 rounded-lg text-emerald-50\">\n                            {selectedUserProfile.country}\n                          </div>\n                        </div>\n                      )}\n                      {selectedUserProfile.kycStatus && (\n                        <div className=\"space-y-2\">\n                          <Label className=\"text-emerald-200 font-medium\">Estado KYC</Label>\n                          <div className=\"p-3 bg-black/40 border border-emerald-500/20 rounded-lg\">\n                            <Badge className={\n                              selectedUserProfile.kycStatus === \"approved\"\n                                ? \"bg-emerald-500/20 text-emerald-200\"\n                                : selectedUserProfile.kycStatus === \"pending\"\n                                ? \"bg-amber-500/20 text-amber-200\"\n                                : \"bg-red-500/20 text-red-200\"\n                            }>\n                              {selectedUserProfile.kycStatus === \"approved\" ? \"Aprobado\" :\n                               selectedUserProfile.kycStatus === \"pending\" ? \"Pendiente\" : \"Rechazado\"}\n                            </Badge>\n                          </div>\n                        </div>\n                      )}\n                      {selectedUserProfile.kycCreatedAt && (\n                        <div className=\"space-y-2\">\n                          <Label className=\"text-emerald-200 font-medium\">Fecha KYC</Label>\n                          <div className=\"p-3 bg-black/40 border border-emerald-500/20 rounded-lg text-emerald-50\">\n                            {new Date(selectedUserProfile.kycCreatedAt).toLocaleDateString(\"es-ES\")}\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </div>\n            ) : (\n              <div className=\"text-center py-8 text-emerald-200/60\">\n                No se pudo cargar el perfil del usuario\n              </div>\n            )}\n            \n            <DialogFooter>\n              <Button \n                onClick={() => setShowUserProfileDialog(false)}\n                className=\"bg-gradient-to-r from-emerald-600 to-emerald-500 hover:from-emerald-500 hover:to-emerald-400 text-white\"\n              >\n                Cerrar\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </main>\n    </div>\n  );\n}\n","size_bytes":184256},"client/src/pages/aviso-legal.tsx":{"content":"import Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\n\nimport { useScrollToTop } from \"@/hooks/useScrollToTop\";\n\nexport default function AvisoLegal() {\n  useScrollToTop();\n\n  return (\n    <div className={[\n      \"min-h-screen text-white relative\",\n      \"bg-gradient-to-br from-black via-[#0A1713] to-[#0E2A1F]\",\n      \"before:pointer-events-none before:absolute before:inset-0\",\n      \"before:bg-[radial-gradient(80%_60%_at_110%_-10%,rgba(16,185,129,0.18),transparent),radial-gradient(60%_40%_at_-20%_110%,rgba(16,185,129,0.12),transparent)]\",\n    ].join(\" \")}>\n      <div className=\"relative z-10\">\n        <Header />\n        <main className=\"pt-32 pb-16\">\n          <section className=\"py-6 bg-transparent\">\n            <div className=\"container mx-auto px-6\">\n              <div className=\"max-w-4xl mx-auto\">\n                <div className=\"mb-8\">\n                  <h1 className=\"font-playfair text-5xl md:text-6xl font-bold text-white mb-6 text-center\">\n                    <span className=\"text-green\">Aviso Legal</span>\n                  </h1>\n                </div>\n\n                <div className=\"bg-black/70 rounded-2xl border border-transparent p-8 transition-all duration-300 hover:border-green-500 hover:bg-black/50 hover:shadow-lg hover:shadow-green-500/20 cursor-pointer\">\n                  <div className=\"prose prose-invert max-w-none\">\n                    <p className=\"text-xl text-silver-100 mb-8\">\n                      Este sitio es propiedad de <strong className=\"text-white\">Nakama&Partners</strong>\n                    </p>\n\n                    <div className=\"space-y-6 text-silver-100\">\n                      <div>\n                        <h3 className=\"text-xl font-semibold text-white mb-3\">Información de la Empresa</h3>\n                        <p><strong>Representante:</strong> Raúl Igual</p>\n                        <p><strong>Registration name:</strong> DSP FZCO 44524</p>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold text-white mb-3\">Domicilio</h3>\n                        <p>Dubai Integrated Economic Zones Authority</p>\n                        <p><strong>Premise No:</strong> DSO-IFZA</p>\n                        <p><strong>Building name:</strong> IFZA properties</p>\n                        <p><strong>Area name:</strong> Dubai Silicon Oasis</p>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold text-white mb-3\">Contacto</h3>\n                        <p><strong>Correo electrónico:</strong> <a href=\"mailto:dpo@nakamapartners.com\" className=\"text-green hover:text-green/80 transition-colors\">dpo@nakamapartners.com</a></p>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold text-white mb-3\">Objeto Social</h3>\n                        <p>El objetivo de la empresa es el desarrollo de su objeto social expresado en los estatutos de su constitución.</p>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold text-white mb-3\">Políticas de la Empresa</h3>\n                        <p className=\"mb-4\">Para más información puede consultar las siguientes políticas fijadas por la empresa:</p>\n                        <ul className=\"space-y-2 list-disc list-inside ml-4\">\n                          <li><a href=\"/politica-uso\" className=\"text-green hover:text-green/80 transition-colors\">Política de Uso</a></li>\n                          <li><a href=\"/politica-seguridad\" className=\"text-green hover:text-green/80 transition-colors\">Política de Seguridad</a></li>\n                          <li><a href=\"/proteccion-datos\" className=\"text-green hover:text-green/80 transition-colors\">Política de Protección de datos (información básica)</a></li>\n                          <li><a href=\"/proteccion-datos-detallada\" className=\"text-green hover:text-green/80 transition-colors\">Política de Protección de datos (más información)</a></li>\n                          <li><a href=\"/politica-cookies\" className=\"text-green hover:text-green/80 transition-colors\">Política de Cookies</a></li>\n                        </ul>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold text-white mb-3\">Delegado de Protección de Datos</h3>\n                        <p>Asimismo, tenemos designado y comunicado ante la AEPD el nombramiento de un delegado de protección de datos con el que podrá comunicarse en cualquier momento en el correo-e que figura más abajo.</p>\n                      </div>\n\n                      <div>\n                        <h3 className=\"text-xl font-semibold text-white mb-3\">Información Adicional</h3>\n                        <p><strong>Fecha de actualización:</strong> 15/10/2024</p>\n                        <p>Para más información puede dirigirse a: <a href=\"mailto:dpo@nakamapartners.com\" className=\"text-green hover:text-green/80 transition-colors\">dpo@nakamapartners.com</a></p>\n                      </div>\n\n                      <div className=\"border-t border-silver-500/20 pt-6 mt-8\">\n                        <p className=\"text-center text-sm\">\n                          <strong>Copyright Nakama&Partners</strong> - Todos los derechos reservados.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </section>\n        </main>\n        <Footer />\n      </div>\n    </div>\n  );\n}","size_bytes":5651},"client/src/pages/calculadora.tsx":{"content":"import Header from \"@/components/header\";\nimport Calculator from \"@/components/calculator\";\nimport Footer from \"@/components/footer\";\n\nimport { useScrollToTop } from \"@/hooks/useScrollToTop\";\n\nexport default function Calculadora() {\n  useScrollToTop();\n  return (\n    <div className={[\n      \"min-h-screen text-white relative\",\n      \"bg-gradient-to-br from-black via-[#0A1713] to-[#0E2A1F]\",\n      \"before:pointer-events-none before:absolute before:inset-0\",\n      \"before:bg-[radial-gradient(80%_60%_at_110%_-10%,rgba(16,185,129,0.18),transparent),radial-gradient(60%_40%_at_-20%_110%,rgba(16,185,129,0.12),transparent)]\",\n    ].join(\" \")}>\n      <div className=\"relative z-10\">\n        <Header />\n        <main className=\"pt-32\">\n        <section className=\"py-6 bg-transparent\">\n          <div className=\"container mx-auto px-6\">\n\n          </div>\n        </section>\n        \n        <Calculator />\n        \n        <section className=\"py-6 bg-transparent\">\n          <div className=\"container mx-auto px-6\">\n            <div className=\"max-w-4xl mx-auto\">\n              <h2 className=\"font-playfair text-3xl font-bold text-white mb-8 text-center\">\n                ¿Qué Pasa al Final del Plazo?\n              </h2>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n                <div className=\"bg-black/50 p-6 rounded-xl border border-emerald-500/15 transition-all duration-300 hover:border-emerald-500/25 hover:bg-black/60 hover:shadow-lg hover:shadow-emerald-500/20 cursor-pointer text-center\">\n                  <div className=\"w-16 h-16 bg-green/20 rounded-lg mx-auto mb-4 flex items-center justify-center\">\n                    <span className=\"text-green font-bold text-xl\">1</span>\n                  </div>\n                  <h3 className=\"font-playfair text-xl font-semibold text-white mb-3\">Retirar Capital</h3>\n                  <p className=\"text-silver-100\">Retire su capital inicial más los intereses generados.</p>\n                </div>\n                \n                <div className=\"bg-black/50 p-6 rounded-xl border border-emerald-500/15 transition-all duration-300 hover:border-emerald-500/25 hover:bg-black/60 hover:shadow-lg hover:shadow-emerald-500/20 cursor-pointer text-center\">\n                  <div className=\"w-16 h-16 bg-green/20 rounded-lg mx-auto mb-4 flex items-center justify-center\">\n                    <span className=\"text-green font-bold text-xl\">2</span>\n                  </div>\n                  <h3 className=\"font-playfair text-xl font-semibold text-white mb-3\">Renovar</h3>\n                  <p className=\"text-silver-100\">Renueve su inversión con condiciones preferentes.</p>\n                </div>\n                \n                <div className=\"bg-black/50 p-6 rounded-xl border border-emerald-500/15 transition-all duration-300 hover:border-emerald-500/25 hover:bg-black/60 hover:shadow-lg hover:shadow-emerald-500/20 cursor-pointer text-center\">\n                  <div className=\"w-16 h-16 bg-green/20 rounded-lg mx-auto mb-4 flex items-center justify-center\">\n                    <span className=\"text-green font-bold text-xl\">3</span>\n                  </div>\n                  <h3 className=\"font-playfair text-xl font-semibold text-white mb-3\">Interés Compuesto</h3>\n                  <p className=\"text-silver-100\">Aplique interés compuesto para maximizar el crecimiento.</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n      </main>\n      <Footer />\n      </div>\n    </div>\n  );\n}","size_bytes":3539},"client/src/pages/contacto.tsx":{"content":"import Header from \"@/components/header\";\nimport Downloads from \"@/components/downloads\";\nimport Advisors from \"@/components/advisors\";\nimport FinalCTA from \"@/components/final-cta\";\nimport Footer from \"@/components/footer\";\n\nimport { useScrollToTop } from \"@/hooks/useScrollToTop\";\n\nexport default function Contacto() {\n  useScrollToTop();\n  return (\n    <div className={[\n      \"min-h-screen text-white relative\",\n      \"bg-gradient-to-br from-black via-[#0A1713] to-[#0E2A1F]\",\n      \"before:pointer-events-none before:absolute before:inset-0\",\n      \"before:bg-[radial-gradient(80%_60%_at_110%_-10%,rgba(16,185,129,0.18),transparent),radial-gradient(60%_40%_at_-20%_110%,rgba(16,185,129,0.12),transparent)]\",\n    ].join(\" \")}>\n      <div className=\"relative z-10\">\n        <Header />\n        <main className=\"pt-32\">\n        <section className=\"py-6 bg-transparent\">\n          <div className=\"container mx-auto px-6\">\n            <div className=\"text-center mb-8\">\n              <h1 className=\"font-georgia text-5xl md:text-6xl font-bold text-white mb-6\">\n                <span className=\"text-green\">Contacto</span>\n              </h1>\n              <p className=\"text-xl text-silver-100 max-w-3xl mx-auto\">\n                Estamos aquí para resolver sus dudas y ayudarle a proteger su patrimonio.\n              </p>\n            </div>\n          </div>\n        </section>\n        \n        <section className=\"py-10 bg-transparent\">\n          <div className=\"container mx-auto px-6\">\n            <div className=\"max-w-4xl mx-auto\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-12\">\n                <div className=\"contact-info-card bg-black/70 p-8 rounded-xl border border-silver-500/20 transition-all duration-500 hover:border-green/40 cursor-pointer\">\n                  <h2 className=\"font-georgia text-3xl font-bold text-white mb-6\">Información de Contacto</h2>\n                  \n                  <div className=\"space-y-4\">\n                    <div>\n                      <h3 className=\"font-semibold text-white mb-2\">Email Principal</h3>\n                      <p className=\"text-silver-100\">info@nakamapartners.com</p>\n                    </div>\n                    \n                    <div>\n                      <h3 className=\"font-semibold text-white mb-2\">Teléfono</h3>\n                      <p className=\"text-silver-100\">+34 XXX XXX XXX</p>\n                    </div>\n                    \n                    <div>\n                      <h3 className=\"font-semibold text-white mb-2\">Consultas Legales</h3>\n                      <p className=\"text-silver-100\">legal@nakamapartners.com</p>\n                    </div>\n                    \n                    <div>\n                      <h3 className=\"font-semibold text-white mb-2\">Horario de Atención</h3>\n                      <p className=\"text-silver-100\">Lunes a Viernes: 9:00 - 18:00 CET</p>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"contact-offices-card bg-black/70 p-8 rounded-xl border border-silver-500/20 transition-all duration-500 hover:border-green/40 cursor-pointer\">\n                  <h2 className=\"font-georgia text-3xl font-bold text-white mb-6\">Oficinas</h2>\n                  \n                  <div className=\"space-y-6\">\n                    <div>\n                      <h3 className=\"font-semibold text-white mb-2\">Oficina Principal</h3>\n                      <p className=\"text-silver-100\">\n                        Paseo de la Castellana, 123<br />\n                        28046 Madrid, España\n                      </p>\n                    </div>\n                    \n                    <div>\n                      <h3 className=\"font-semibold text-white mb-2\">Oficina Internacional</h3>\n                      <p className=\"text-silver-100\">\n                        Dubai International Financial Centre<br />\n                        Dubai, Emiratos Árabes Unidos\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n        \n        <Downloads />\n        <Advisors />\n        <FinalCTA />\n      </main>\n      <Footer />\n      </div>\n    </div>\n  );\n}","size_bytes":4276},"client/src/pages/dashboard-old.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  LayoutDashboard, \n  Users, \n  Calculator, \n  LogOut, \n  TrendingUp, \n  TrendingDown,\n  Download,\n  Calendar,\n  Plus,\n  Mail,\n  Phone,\n  Globe,\n  Home,\n  Package,\n  User\n} from \"lucide-react\";\nimport logoSvg from \"@/assets/logo.svg\";\n\nexport default function Dashboard() {\n  const [, setLocation] = useLocation();\n  const [activeTab, setActiveTab] = useState(\"inicio\");\n\n  const handleLogout = () => {\n    setLocation(\"/login\");\n  };\n\n  const kpis = [\n    {\n      title: \"Total Leads\",\n      value: \"46\",\n      change: \"+12.5%\",\n      trending: \"up\"\n    },\n    {\n      title: \"Simulaciones\",\n      value: \"41\",\n      change: \"+8.2%\",\n      trending: \"up\"\n    },\n    {\n      title: \"Inversión Potencial\",\n      value: \"€3.210.500\",\n      change: \"+15.3%\",\n      trending: \"up\"\n    },\n    {\n      title: \"Conversión\",\n      value: \"24.8%\",\n      change: \"−2.1%\",\n      trending: \"down\"\n    }\n  ];\n\n  const recentLeads = [\n    {\n      name: \"María González\",\n      email: \"maria.gonzalez@email.com\",\n      investment: \"€75.000\",\n      channel: \"Web\",\n      date: \"2025-01-09\"\n    },\n    {\n      name: \"Carlos Ruiz\",\n      email: \"carlos.ruiz@email.com\",\n      investment: \"€120.000\",\n      channel: \"Web\",\n      date: \"2025-01-09\"\n    },\n    {\n      name: \"Ana Martín\",\n      email: \"ana.martin@email.com\",\n      investment: \"€95.000\",\n      channel: \"Web\",\n      date: \"2025-01-08\"\n    },\n    {\n      name: \"Luis Fernández\",\n      email: \"luis.fernandez@email.com\",\n      investment: \"€180.000\",\n      channel: \"Web\",\n      date: \"2025-01-08\"\n    }\n  ];\n\n  const recentActivity = [\n    { type: \"lead\", message: \"Nuevo lead registrado: María González\", time: \"hace 2 horas\" },\n    { type: \"simulation\", message: \"Simulación completada: €75.000\", time: \"hace 3 horas\" },\n    { type: \"download\", message: \"PDF descargado: Dossier Institucional\", time: \"hace 4 horas\" },\n    { type: \"lead\", message: \"Nuevo lead registrado: Carlos Ruiz\", time: \"hace 5 horas\" },\n    { type: \"simulation\", message: \"Simulación completada: €120.000\", time: \"hace 6 horas\" }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-black via-gray-900 to-gray-600 text-white flex\">\n      {/* Sidebar */}\n      <div className=\"w-64 bg-[#040505] border-r border-silver-500/20 p-6 flex flex-col\">\n        <div className=\"flex items-center space-x-3 mb-8\">\n          <img src={logoSvg} alt=\"Logo\" className=\"w-8 h-8\" />\n          <div>\n            <h1 className=\"font-cormorant text-lg font-bold text-white\">Nakama&Partners</h1>\n            <p className=\"text-green text-xs\">Portal de Asesores</p>\n          </div>\n        </div>\n\n        <nav className=\"space-y-2 flex-1\">\n          <button\n            onClick={() => setActiveTab(\"inicio\")}\n            className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors ${\n              activeTab === \"inicio\" ? \"bg-[#344e41] text-white\" : \"text-silver-100 hover:bg-black/50\"\n            }`}\n          >\n            <Home className=\"h-4 w-4\" />\n            <span>Inicio</span>\n          </button>\n          \n          <button\n            onClick={() => setActiveTab(\"productos\")}\n            className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors ${\n              activeTab === \"productos\" ? \"bg-[#344e41] text-white\" : \"text-silver-100 hover:bg-black/50\"\n            }`}\n          >\n            <Package className=\"h-4 w-4\" />\n            <span>Productos</span>\n          </button>\n          \n          <button\n            onClick={() => setActiveTab(\"perfil\")}\n            className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors ${\n              activeTab === \"perfil\" ? \"bg-[#344e41] text-white\" : \"text-silver-100 hover:bg-black/50\"\n            }`}\n          >\n            <User className=\"h-4 w-4\" />\n            <span>Perfil</span>\n          </button>\n        </nav>\n\n        <div className=\"mt-auto pt-8\">\n          <Button \n            onClick={handleLogout}\n            variant=\"ghost\" \n            className=\"w-full justify-start text-silver-100 hover:text-white hover:bg-black/50\"\n          >\n            <LogOut className=\"h-4 w-4 mr-3\" />\n            Cerrar sesión\n          </Button>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 p-8\">\n        {activeTab === \"perfil\" ? (\n          <div>\n            <div className=\"flex justify-between items-center mb-8\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-white\">Mi Perfil</h1>\n                <p className=\"text-silver-100\">Gestiona tu información personal</p>\n              </div>\n            </div>\n            \n            <Card className=\"bg-[#040505] border-silver-500/20\">\n              <CardContent className=\"p-6\">\n                <Tabs defaultValue=\"personal\" className=\"w-full\">\n                  <TabsList className=\"grid w-full grid-cols-4 bg-black/50\">\n                    <TabsTrigger value=\"personal\" className=\"data-[state=active]:bg-[#344e41]\">\n                      Información Personal\n                    </TabsTrigger>\n                    <TabsTrigger value=\"kyc\" disabled className=\"opacity-50\">\n                      Estado KYC\n                    </TabsTrigger>\n                    <TabsTrigger value=\"productos\" disabled className=\"opacity-50\">\n                      Productos\n                    </TabsTrigger>\n                    <TabsTrigger value=\"transacciones\" disabled className=\"opacity-50\">\n                      Transacciones\n                    </TabsTrigger>\n                  </TabsList>\n                  \n                  <TabsContent value=\"personal\" className=\"mt-6\">\n                    <form className=\"space-y-6\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div>\n                          <Label htmlFor=\"nombre\" className=\"text-white\">Nombre</Label>\n                          <Input\n                            id=\"nombre\"\n                            defaultValue=\"Test\"\n                            className=\"bg-black/50 border-silver-500/20 text-white\"\n                          />\n                        </div>\n                        \n                        <div>\n                          <Label htmlFor=\"apellidos\" className=\"text-white\">Apellidos</Label>\n                          <Input\n                            id=\"apellidos\"\n                            defaultValue=\"Placeholder\"\n                            className=\"bg-black/50 border-silver-500/20 text-white\"\n                          />\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"email\" className=\"text-white\">Correo Electrónico</Label>\n                        <Input\n                          id=\"email\"\n                          defaultValue=\"test@test.com\"\n                          disabled\n                          className=\"bg-black/30 border-silver-500/20 text-silver-300 cursor-not-allowed\"\n                        />\n                      </div>\n                      \n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div>\n                          <Label htmlFor=\"fecha-nacimiento\" className=\"text-white\">Fecha de Nacimiento</Label>\n                          <Input\n                            id=\"fecha-nacimiento\"\n                            defaultValue=\"25/02/1962\"\n                            className=\"bg-black/50 border-silver-500/20 text-white\"\n                          />\n                        </div>\n                        \n                        <div>\n                          <Label htmlFor=\"pais\" className=\"text-white\">País</Label>\n                          <Select defaultValue=\"espana\">\n                            <SelectTrigger className=\"bg-black/50 border-silver-500/20 text-white\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent className=\"bg-black border-silver-500/20\">\n                              <SelectItem value=\"espana\">España</SelectItem>\n                              <SelectItem value=\"francia\">Francia</SelectItem>\n                              <SelectItem value=\"portugal\">Portugal</SelectItem>\n                              <SelectItem value=\"italia\">Italia</SelectItem>\n                              <SelectItem value=\"alemania\">Alemania</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"direccion\" className=\"text-white\">Dirección</Label>\n                        <Input\n                          id=\"direccion\"\n                          defaultValue=\"Calle Nueva Era 45, 2ºA, 08035 Barcelona\"\n                          className=\"bg-black/50 border-silver-500/20 text-white\"\n                        />\n                      </div>\n                      \n                      <div className=\"pt-6\">\n                        <Button \n                          type=\"submit\"\n                          className=\"w-full bg-primary hover:bg-primary/90 text-white font-semibold\"\n                        >\n                          ACTUALIZAR INFORMACIÓN PERSONAL\n                        </Button>\n                      </div>\n                    </form>\n                  </TabsContent>\n                </Tabs>\n              </CardContent>\n            </Card>\n          </div>\n        ) : (\n          <div>\n            <div className=\"flex justify-between items-center mb-8\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-white\">Dashboard</h1>\n                <p className=\"text-silver-100\">Vista general de tu actividad</p>\n              </div>\n              \n              <Select defaultValue=\"last-30-days\">\n                <SelectTrigger className=\"w-40 bg-black/50 border-silver-500/20 text-white\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-black border-silver-500/20\">\n                  <SelectItem value=\"last-7-days\">Últimos 7 días</SelectItem>\n                  <SelectItem value=\"last-30-days\">Últimos 30 días</SelectItem>\n                  <SelectItem value=\"last-90-days\">Últimos 90 días</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n        {/* KPIs */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          {kpis.map((kpi, index) => (\n            <Card key={index} className=\"bg-[#040505] border-silver-500/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-silver-100 text-sm\">{kpi.title}</p>\n                    <p className=\"text-2xl font-bold text-white\">{kpi.value}</p>\n                  </div>\n                  <div className={`flex items-center space-x-1 ${\n                    kpi.trending === \"up\" ? \"text-green-500\" : \"text-red-500\"\n                  }`}>\n                    {kpi.trending === \"up\" ? <TrendingUp className=\"h-4 w-4\" /> : <TrendingDown className=\"h-4 w-4\" />}\n                    <span className=\"text-sm\">{kpi.change}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Recent Leads */}\n          <Card className=\"bg-[#040505] border-silver-500/20\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Leads Recientes</CardTitle>\n              <CardDescription className=\"text-silver-100\">Últimos contactos registrados</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {recentLeads.map((lead, index) => (\n                  <div key={index} className=\"flex items-center justify-between p-3 bg-black/30 rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-[#344e41] rounded-full flex items-center justify-center\">\n                        <span className=\"text-white font-semibold text-sm\">\n                          {lead.name.split(' ').map(n => n[0]).join('')}\n                        </span>\n                      </div>\n                      <div>\n                        <p className=\"text-white font-medium\">{lead.name}</p>\n                        <p className=\"text-silver-100 text-sm\">{lead.email}</p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-green font-semibold\">{lead.investment}</p>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge variant=\"secondary\" className=\"bg-black/50\">\n                          <Globe className=\"h-3 w-3 mr-1\" />\n                          {lead.channel}\n                        </Badge>\n                        <span className=\"text-silver-100 text-xs\">{lead.date}</span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Recent Activity */}\n          <Card className=\"bg-[#040505] border-silver-500/20\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Actividad Reciente</CardTitle>\n              <CardDescription className=\"text-silver-100\">Últimas acciones en el sistema</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {recentActivity.map((activity, index) => (\n                  <div key={index} className=\"flex items-center space-x-3 p-3 bg-black/30 rounded-lg\">\n                    <div className=\"w-8 h-8 bg-[#344e41] rounded-full flex items-center justify-center\">\n                      {activity.type === \"lead\" && <Plus className=\"h-4 w-4 text-white\" />}\n                      {activity.type === \"simulation\" && <Calculator className=\"h-4 w-4 text-white\" />}\n                      {activity.type === \"download\" && <Download className=\"h-4 w-4 text-white\" />}\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-white text-sm\">{activity.message}</p>\n                      <p className=\"text-silver-100 text-xs\">{activity.time}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Advisor Value Proposition Section */}\n        <div className=\"mt-8\">\n          <Card className=\"bg-[#040505] border-silver-500/20\">\n            <CardHeader>\n              <CardTitle className=\"text-white text-2xl font-playfair\">\n                Asesor Financiero: Un Producto Sólido, Fácil de Explicar, Imposible de Ignorar\n              </CardTitle>\n              <CardDescription className=\"text-silver-100\">\n                Las ventajas competitivas que te posicionan como el asesor de referencia\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Key Benefits Grid */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                <div className=\"bg-black/30 p-4 rounded-lg\">\n                  <div className=\"w-12 h-12 bg-[#344e41] rounded-full flex items-center justify-center mb-3\">\n                    <TrendingUp className=\"h-6 w-6 text-white\" />\n                  </div>\n                  <h3 className=\"text-white font-semibold mb-2\">Rentabilidad Garantizada</h3>\n                  <p className=\"text-silver-100 text-sm\">\n                    9% anual fijo, sin variaciones ni sorpresas. Tus clientes saben exactamente qué esperar.\n                  </p>\n                </div>\n\n                <div className=\"bg-black/30 p-4 rounded-lg\">\n                  <div className=\"w-12 h-12 bg-[#344e41] rounded-full flex items-center justify-center mb-3\">\n                    <span className=\"text-white font-bold\">€</span>\n                  </div>\n                  <h3 className=\"text-white font-semibold mb-2\">Capital Protegido</h3>\n                  <p className=\"text-silver-100 text-sm\">\n                    100% del capital garantizado por contrato bancario. Cero riesgo de pérdida del principal.\n                  </p>\n                </div>\n\n                <div className=\"bg-black/30 p-4 rounded-lg\">\n                  <div className=\"w-12 h-12 bg-[#344e41] rounded-full flex items-center justify-center mb-3\">\n                    <Calendar className=\"h-6 w-6 text-white\" />\n                  </div>\n                  <h3 className=\"text-white font-semibold mb-2\">Flexibilidad Total</h3>\n                  <p className=\"text-silver-100 text-sm\">\n                    Sin permanencia obligatoria. Tus clientes pueden disponer de su dinero cuando lo necesiten.\n                  </p>\n                </div>\n              </div>\n\n              {/* Selling Points */}\n              <div className=\"border-t border-silver-500/20 pt-6\">\n                <h3 className=\"text-white font-semibold mb-4\">¿Por qué es fácil de vender?</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-2 h-2 bg-green rounded-full mt-2\"></div>\n                    <div>\n                      <p className=\"text-white font-medium\">Mensaje Simple</p>\n                      <p className=\"text-silver-100 text-sm\">\n                        \"9% garantizado, capital protegido\". No necesitas explicaciones complejas.\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-2 h-2 bg-green rounded-full mt-2\"></div>\n                    <div>\n                      <p className=\"text-white font-medium\">Respaldo Legal</p>\n                      <p className=\"text-silver-100 text-sm\">\n                        Contrato bancario que elimina todas las objeciones sobre seguridad.\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-2 h-2 bg-green rounded-full mt-2\"></div>\n                    <div>\n                      <p className=\"text-white font-medium\">Competitivo</p>\n                      <p className=\"text-silver-100 text-sm\">\n                        Supera cualquier depósito bancario sin asumir riesgos adicionales.\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-2 h-2 bg-green rounded-full mt-2\"></div>\n                    <div>\n                      <p className=\"text-white font-medium\">Cliente Ideal</p>\n                      <p className=\"text-silver-100 text-sm\">\n                        Perfecto para conservadores que buscan rentabilidad sin riesgo.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Target Clients */}\n              <div className=\"border-t border-silver-500/20 pt-6\">\n                <h3 className=\"text-white font-semibold mb-4\">Perfil del Cliente Objetivo</h3>\n                <div className=\"bg-black/30 p-4 rounded-lg\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-center\">\n                    <div>\n                      <p className=\"text-green font-bold text-lg\">45-65 años</p>\n                      <p className=\"text-silver-100 text-sm\">Edad promedio</p>\n                    </div>\n                    <div>\n                      <p className=\"text-green font-bold text-lg\">€50K-500K</p>\n                      <p className=\"text-silver-100 text-sm\">Capacidad inversión</p>\n                    </div>\n                    <div>\n                      <p className=\"text-green font-bold text-lg\">Conservador</p>\n                      <p className=\"text-silver-100 text-sm\">Perfil de riesgo</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Call to Action */}\n              <div className=\"border-t border-silver-500/20 pt-6\">\n                <div className=\"bg-gradient-to-r from-[#344e41] to-[#2d4235] p-4 rounded-lg\">\n                  <h3 className=\"text-white font-semibold mb-2\">¿Listo para presentar el producto?</h3>\n                  <p className=\"text-white/90 text-sm mb-4\">\n                    Utiliza la calculadora para mostrar proyecciones reales y impactar a tus clientes.\n                  </p>\n                  <div className=\"flex space-x-3\">\n                    <Button className=\"bg-white text-[#344e41] hover:bg-gray-100\">\n                      <Calculator className=\"h-4 w-4 mr-2\" />\n                      Ver Calculadora\n                    </Button>\n                    <Button variant=\"outline\" className=\"border-white text-white hover:bg-white/10\">\n                      <Download className=\"h-4 w-4 mr-2\" />\n                      Material de Ventas\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"mt-8\">\n          <h2 className=\"text-xl font-bold text-white mb-4\">Acciones Rápidas</h2>\n          <div className=\"flex space-x-4\">\n            <Button className=\"bg-[#344e41] hover:bg-[#2d4235] text-white\">\n              <Download className=\"h-4 w-4 mr-2\" />\n              Exportar Leads\n            </Button>\n            <Button className=\"gradient-navy text-white\">\n              <Calendar className=\"h-4 w-4 mr-2\" />\n              Programar Seguimiento\n            </Button>\n          </div>\n        </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":22913},"client/src/pages/dashboard-router.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport Dashboard from \"./dashboard\";\nimport PartnerDashboard from \"./partner-dashboard\";\nimport AdminDashboard from \"./admin-dashboard\";\n\nexport default function DashboardRouter() {\n  const { user, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      setLocation(\"/login\");\n    }\n  }, [user, isLoading, setLocation]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-black via-gray-900 to-gray-800 flex items-center justify-center\">\n        <div className=\"text-white text-lg\">Cargando...</div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  // Route to appropriate dashboard based on user role\n  if (user.role === \"admin\") {\n    return <AdminDashboard />;\n  } else if (user.role === \"partner\") {\n    return <PartnerDashboard />;\n  } else {\n    return <Dashboard />;\n  }\n}","size_bytes":1018},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { KycFileUpload } from \"@/components/KycFileUpload\";\nimport {\n  LogOut,\n  TrendingUp,\n  TrendingDown,\n  Download,\n  Calendar,\n  Plus,\n  Package,\n  User,\n  Calculator,\n  ArrowLeft,\n  Camera,\n  Filter,\n  X,\n  ShieldCheck,\n  Banknote,\n  Wallet,\n  CheckCircle2,\n  AlertTriangle,\n  Phone,\n  Hash,\n  QrCode,\n  FileText,\n  Trash2,\n  PlusCircle,\n\n} from \"lucide-react\";\nimport logoImg from \"@/assets/Logo-removeBG_1752488347081.png\";\nimport landscapeSvg from \"@/assets/landscape.svg\";\nimport { useScrollToTop } from \"@/hooks/useScrollToTop\";\nimport CompoundInterestChart from \"@/components/compound-interest-chart\";\nimport InvestmentCalculator from \"@/components/investment-calculator\";\nimport { generateStatementPDF } from \"@/utils/generateStatementPDF\";\n\n/* -------------------------------------------------------------------------- */\n/*                                   UI bits                                  */\n/* -------------------------------------------------------------------------- */\n\n// --- Barra de progreso reutilizable ---\nfunction ProgressBar({\n  percent,\n  monthsRemaining,\n  noteWhenOver100 = false,\n  className = \"\",\n}: {\n  percent: number;\n  monthsRemaining?: number; \n  noteWhenOver100?: boolean;\n  className?: string;\n}) {\n  const clamped = Math.max(0, Math.min(100, percent));\n\n  const barColor =\n    monthsRemaining !== undefined\n      ? percent > 75\n        ? \"bg-red-500\" // Meses 10-12 (75.1-100%)\n        : percent > 50\n        ? \"bg-amber-400\" // Meses 7-9 (50.1-75%)\n        : \"bg-emerald-500/80\" // Meses 1-6 (0-50%)\n      : \"bg-emerald-500/80\";\n\n  const ringColor =\n    monthsRemaining !== undefined\n      ? monthsRemaining <= 1\n        ? \"ring-2 ring-red-500/40\"\n        : monthsRemaining <= 3\n        ? \"ring-2 ring-amber-400/40\"\n        : \"ring-1 ring-emerald-400/20\"\n      : \"ring-1 ring-emerald-400/20\";\n\n  return (\n    <div className={`mt-4 ${className}`}>\n      <div className=\"flex items-center justify-between text-sm text-emerald-200/80 mb-2\">\n        <span>Progreso</span>\n        <span className=\"text-emerald-50 font-medium\">{Math.round(percent)}%</span>\n      </div>\n\n      <div\n        className={`relative h-2 rounded-full bg-emerald-900/30 overflow-visible ${ringColor}`}\n        role=\"progressbar\"\n        aria-valuemin={0}\n        aria-valuemax={100}\n        aria-valuenow={clamped}\n      >\n        <div className={`absolute left-0 top-0 h-2 rounded-full ${barColor}`} style={{ width: `${clamped}%` }} />\n        {noteWhenOver100 && percent > 100 && (\n          <div\n            className=\"absolute top-1/2 -translate-y-1/2 right-0 translate-x-2 h-2 w-6 rounded-full bg-emerald-400 shadow-[0_0_0_2px_rgba(16,185,129,0.25)]\"\n            aria-hidden\n          />\n        )}\n      </div>\n\n      {monthsRemaining !== undefined && (\n        <p className=\"mt-2 text-xs text-emerald-200/70\">\n          {monthsRemaining <= 0 ? \"Vencido\" : monthsRemaining < 1 ? \"< 1 mes\" : `${monthsRemaining} meses restantes`}\n        </p>\n      )}\n    </div>\n  );\n}\n\n/* -------------------------------------------------------------------------- */\n/*                             VISTA: DEPÓSITO                                */\n/* -------------------------------------------------------------------------- */\n\ntype Metodo = \"banco\" | \"crypto\";\ntype PasoBanco = \"Pendiente\" | \"Conciliado\" | \"Asignado\";\ntype PasoCrypto = \"Detectado\" | \"Confirmado\" | \"Asignado\";\n\nfunction DepositoView({\n  setHasActiveDeposit,\n  setActiveTab,\n  setProfileActiveTab,\n}: {\n  setHasActiveDeposit: (v: boolean) => void;\n  setActiveTab: (tab: string) => void;\n  setProfileActiveTab: (tab: string) => void;\n}) {\n  const { user } = useAuth();\n\n  // Consulta del estado KYC real (ya existe en el dashboard principal, la reutilizamos)\n  const { data: kycData } = useQuery({\n    queryKey: [\"/api/kyc/me\"],\n    enabled: !!user,\n  });\n\n  // ---- Precondiciones de firma (simuladas) ----\n  const [contratoMarco, setContratoMarco] = useState(false);\n  const [perfilOk, setPerfilOk] = useState(false);\n  const [docsProducto, setDocsProducto] = useState(false);\n  \n  // Estado KYC real basado en la consulta\n  const currentKyc = kycData?.kyc;\n  const kycOk = currentKyc?.status === \"approved\";\n  const allPreOk = contratoMarco && kycOk && perfilOk && docsProducto;\n\n  // ---- Depósito ----\n  const [productoElegido, setProductoElegido] = useState<\"fija\" | \"variable\" | \"mixto\">(\"fija\");\n  const [metodo, setMetodo] = useState<Metodo | \"\">(\"\");\n  const [montoEur, setMontoEur] = useState<number>(50000);\n  const [instruccionesGeneradas, setInstruccionesGeneradas] = useState(false);\n  const [reciboSubido, setReciboSubido] = useState(false);\n  const [bancoPaso, setBancoPaso] = useState<PasoBanco | null>(null);\n\n  // Crypto fields\n  const [tasaEurUsdt, setTasaEurUsdt] = useState<number>(1.0);\n  const [cryptoNetwork, setCryptoNetwork] = useState(\"USDT ERC20\");\n  const [txHash, setTxHash] = useState(\"\");\n  const [capturaCrypto, setCapturaCrypto] = useState(false);\n  const [cryptoPaso, setCryptoPaso] = useState<PasoCrypto | null>(null);\n\n  const montoToUsdt = Number.isFinite(montoEur) ? +(montoEur / (tasaEurUsdt || 1)).toFixed(2) : 0;\n\n  // Copys\n  const puedeIniciarAportacion = allPreOk;\n  const depositoBancoListo = montoEur >= 50000 && instruccionesGeneradas && reciboSubido;\n  const depositoCryptoListo = montoEur >= 50000 && !!txHash && capturaCrypto;\n\n  // Simulaciones de avance de estado\n  const simularConciliado = () => setBancoPaso(\"Conciliado\");\n  const simularAsignado = () => {\n    setBancoPaso(\"Asignado\");\n    setHasActiveDeposit(true);\n  };\n  const simularConfirmado = () => setCryptoPaso(\"Confirmado\");\n  const simularAsignadoCrypto = () => {\n    setCryptoPaso(\"Asignado\");\n    setHasActiveDeposit(true);\n  };\n\n  // UI helper: Checklist\n  const ChecklistItem = ({\n    label,\n    checked,\n    onFix,\n  }: {\n    label: string;\n    checked: boolean;\n    onFix?: () => void;\n  }) => (\n    <div className=\"flex items-center justify-between py-2\">\n      <div className=\"flex items-center gap-2\">\n        {checked ? <CheckCircle2 className=\"w-4 h-4 text-emerald-400\" /> : <AlertTriangle className=\"w-4 h-4 text-amber-400\" />}\n        <span className=\"text-sm\">{label}</span>\n      </div>\n      {!checked && (\n        <Button size=\"sm\" variant=\"outline\" className=\"border-emerald-500/30 hover:bg-emerald-900/10\" onClick={onFix}>\n          Firmar/Completar ahora\n        </Button>\n      )}\n    </div>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"mb-2\">\n        <h1 className=\"text-3xl font-bold text-emerald-50\">Depósito</h1>\n        <p className=\"text-emerald-200/80\">Inicia una nueva aportación por banco o cripto</p>\n      </div>\n\n      {/* Condición previa de firma */}\n      <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center gap-2 mb-3\">\n            <ShieldCheck className=\"w-5 h-5 text-emerald-400\" />\n            <h4 className=\"text-emerald-50 font-semibold\">Condición previa de firma (obligatoria)</h4>\n          </div>\n          <div className=\"rounded-xl border border-emerald-500/15 bg-black/30 p-4\">\n            <ChecklistItem label=\"Contrato Marco de Servicios (firmado)\" checked={contratoMarco} onFix={() => setContratoMarco(true)} />\n            <ChecklistItem \n              label={`KYC/AML ${currentKyc?.status === \"approved\" ? \"aprobado\" : currentKyc?.status === \"rejected\" ? \"rechazado\" : \"pendiente\"}`} \n              checked={kycOk} \n              onFix={() => {\n                if (!kycOk) {\n                  // Navegar a la sección Perfil > Estado KYC\n                  setActiveTab(\"perfil\");\n                  setProfileActiveTab(\"kyc\");\n                }\n              }} \n            />\n            <ChecklistItem label=\"Perfil de idoneidad completado\" checked={perfilOk} onFix={() => setPerfilOk(true)} />\n            <ChecklistItem\n              label=\"Documentación específica del producto (Depósito Pignorado / Riesgos de Mercado)\"\n              checked={docsProducto}\n              onFix={() => setDocsProducto(true)}\n            />\n          </div>\n          {!allPreOk && (\n            <p className=\"text-xs text-emerald-200/70 mt-3\">\n              Para iniciar una aportación, primero firma/activa los pasos pendientes.\n            </p>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Paso 1: Nueva aportación */}\n      <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl\">\n        <CardContent className=\"p-6 space-y-6\">\n          <div className=\"rounded-xl border border-emerald-500/15 bg-black/30 p-5\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-emerald-200/80\">Paso 1</p>\n                <h5 className=\"text-emerald-50 font-semibold mb-3\">Nueva aportación</h5>\n                <div className=\"flex flex-wrap gap-3\">\n                  <Button\n                    variant={productoElegido === \"fija\" ? \"default\" : \"outline\"}\n                    onClick={() => setProductoElegido(\"fija\")}\n                    className={productoElegido === \"fija\" ? \"bg-emerald-600 hover:bg-emerald-500\" : \"border-emerald-500/30 hover:bg-emerald-900/10\"}\n                  >\n                    Renta Fija 9%\n                  </Button>\n                  <Button\n                    variant={productoElegido === \"variable\" ? \"default\" : \"outline\"}\n                    onClick={() => setProductoElegido(\"variable\")}\n                    className={productoElegido === \"variable\" ? \"bg-emerald-600 hover:bg-emerald-500\" : \"border-emerald-500/30 hover:bg-emerald-900/10\"}\n                  >\n                    Variable\n                  </Button>\n                  <Button\n                    variant={productoElegido === \"mixto\" ? \"default\" : \"outline\"}\n                    onClick={() => setProductoElegido(\"mixto\")}\n                    className={productoElegido === \"mixto\" ? \"bg-emerald-600 hover:bg-emerald-500\" : \"border-emerald-500/30 hover:bg-emerald-900/10\"}\n                  >\n                    Mixto\n                  </Button>\n                </div>\n              </div>\n              <Button disabled={!puedeIniciarAportacion} className=\"rounded-xl\">\n                Nueva aportación\n              </Button>\n            </div>\n            {!puedeIniciarAportacion && (\n              <p className=\"text-xs text-emerald-200/70 mt-3\">\n                Botón deshabilitado: completa las firmas/validaciones para continuar.\n              </p>\n            )}\n          </div>\n\n          {/* Paso 2: Método */}\n          <div className=\"rounded-xl border border-emerald-500/15 bg-black/30 p-5\">\n            <p className=\"text-sm text-emerald-200/80\">Paso 2</p>\n            <h5 className=\"text-emerald-50 font-semibold mb-3\">Elige método de depósito</h5>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Button\n                variant={metodo === \"banco\" ? \"default\" : \"outline\"}\n                onClick={() => setMetodo(\"banco\")}\n                className={`rounded-xl justify-start ${metodo === \"banco\" ? \"bg-emerald-600 hover:bg-emerald-500\" : \"border-emerald-500/30 hover:bg-emerald-900/10\"}`}\n              >\n                <Banknote className=\"w-4 h-4 mr-2\" />\n                Cuenta bancaria\n              </Button>\n              <Button\n                variant={metodo === \"crypto\" ? \"default\" : \"outline\"}\n                onClick={() => setMetodo(\"crypto\")}\n                className={`rounded-xl justify-start ${metodo === \"crypto\" ? \"bg-emerald-600 hover:bg-emerald-500\" : \"border-emerald-500/30 hover:bg-emerald-900/10\"}`}\n              >\n                <Wallet className=\"w-4 h-4 mr-2\" />\n                Cripto\n              </Button>\n            </div>\n          </div>\n\n          {/* Método: Banco */}\n          {metodo === \"banco\" && (\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <div className=\"rounded-xl border border-emerald-500/15 bg-black/30 p-5\">\n                <h6 className=\"text-emerald-50 font-semibold mb-3\">Importe y Instrucciones</h6>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label className=\"text-emerald-50\">Importe (€) — mínimo 50.000</Label>\n                    <Input\n                      type=\"number\"\n                      min={0}\n                      value={montoEur}\n                      onChange={(e) => setMontoEur(parseFloat(e.target.value) || 0)}\n                      className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                    />\n                    {montoEur < 50000 && <p className=\"text-xs text-amber-400 mt-1\">El importe mínimo es 50.000 €.</p>}\n                  </div>\n\n                  <div className=\"flex items-center gap-3\">\n                    <Button\n                      variant=\"outline\"\n                      className=\"border-emerald-500/30 hover:bg-emerald-900/10\"\n                      onClick={() => setInstruccionesGeneradas(true)}\n                    >\n                      Generar instrucciones\n                    </Button>\n                    {instruccionesGeneradas && <Badge className=\"bg-emerald-500 text-black\">Generadas</Badge>}\n                  </div>\n\n                  {instruccionesGeneradas && (\n                    <div className=\"rounded-lg p-4 bg-black/40 border border-emerald-500/15 text-sm\">\n                      <p><span className=\"text-emerald-300\">IBAN:</span> ES11 2222 3333 4444 5555 6666</p>\n                      <p><span className=\"text-emerald-300\">BIC:</span> ABCDESMMXXX</p>\n                      <p><span className=\"text-emerald-300\">Referencia:</span> NAKAMA-DEP-000123</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"rounded-xl border border-emerald-500/15 bg-black/30 p-5\">\n                <h6 className=\"text-emerald-50 font-semibold mb-3\">Justificante y Confirmación</h6>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label className=\"text-emerald-50\">Subir justificante (PDF/JPG/PNG)</Label>\n                    <Input\n                      type=\"file\"\n                      accept=\".pdf,.jpg,.jpeg,.png\"\n                      onChange={(e) => setReciboSubido((e.target.files?.length ?? 0) > 0)}\n                      className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                    />\n                    {!reciboSubido && <p className=\"text-xs text-amber-400 mt-1\">Obligatorio para continuar.</p>}\n                  </div>\n\n                  <div className=\"flex flex-wrap gap-3\">\n                    <Button disabled={!depositoBancoListo} onClick={() => setBancoPaso(\"Pendiente\")} className=\"rounded-xl\">\n                      He realizado la transferencia\n                    </Button>\n                    <Button variant=\"outline\" className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                      Descargar certificado\n                    </Button>\n                  </div>\n\n                  {/* Seguimiento */}\n                  {bancoPaso && (\n                    <div className=\"mt-4\">\n                      <p className=\"text-sm text-emerald-200/80 mb-2\">Seguimiento</p>\n                      <div className=\"flex flex-wrap items-center gap-2\">\n                        <Badge className={`px-3 ${bancoPaso ? \"bg-emerald-500 text-black\" : \"bg-emerald-900/30 text-emerald-200\"}`}>Pendiente</Badge>\n                        <span>→</span>\n                        <Badge className={`${bancoPaso === \"Conciliado\" || bancoPaso === \"Asignado\" ? \"bg-emerald-500 text-black\" : \"bg-emerald-900/30 text-emerald-200\"}`}>Conciliado</Badge>\n                        <span>→</span>\n                        <Badge className={`${bancoPaso === \"Asignado\" ? \"bg-emerald-500 text-black\" : \"bg-emerald-900/30 text-emerald-200\"}`}>Asignado</Badge>\n                      </div>\n\n                      {bancoPaso === \"Pendiente\" && (\n                        <div className=\"flex gap-2 mt-3\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={simularConciliado} className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Simular conciliación\n                          </Button>\n                        </div>\n                      )}\n                      {bancoPaso === \"Conciliado\" && (\n                        <div className=\"flex gap-2 mt-3\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={simularAsignado} className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Simular asignación\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Método: Crypto */}\n          {metodo === \"crypto\" && (\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <div className=\"rounded-xl border border-emerald-500/15 bg-black/30 p-5\">\n                <h6 className=\"text-emerald-50 font-semibold mb-3\">Importe, activo y red</h6>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label className=\"text-emerald-50\">Importe en EUR — mínimo 50.000</Label>\n                    <Input\n                      type=\"number\"\n                      min={0}\n                      value={montoEur}\n                      onChange={(e) => setMontoEur(parseFloat(e.target.value) || 0)}\n                      className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                    />\n                    {montoEur < 50000 && <p className=\"text-xs text-amber-400 mt-1\">El importe mínimo es 50.000 €.</p>}\n                  </div>\n                  <div>\n                    <Label className=\"text-emerald-50\">Tasa EUR → USDT (editable)</Label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.0001\"\n                      value={tasaEurUsdt}\n                      onChange={(e) => setTasaEurUsdt(parseFloat(e.target.value) || 1)}\n                      className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                    />\n                    <p className=\"text-xs text-emerald-200/70 mt-1\">Conversión estimada: {montoToUsdt.toLocaleString(\"es-ES\")} USDT</p>\n                  </div>\n\n                  <div>\n                    <Label className=\"text-emerald-50\">Activo y red</Label>\n                    <Select value={cryptoNetwork} onValueChange={setCryptoNetwork}>\n                      <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                        <SelectValue placeholder=\"Selecciona\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-black/40 border-emerald-500/15 text-emerald-50\">\n                        <SelectItem value=\"USDT ERC20\">USDT (ERC20)</SelectItem>\n                        <SelectItem value=\"USDT TRC20\">USDT (TRC20)</SelectItem>\n                        <SelectItem value=\"USDT BEP20\">USDT (BEP20)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"rounded-lg p-4 bg-black/40 border border-emerald-500/15 text-sm\">\n                    <p className=\"mb-2\"><span className=\"text-emerald-300\">Dirección:</span> 0xNAKAMA...DEPOSIT</p>\n                    <p className=\"mb-2\"><span className=\"text-emerald-300\">Memo (si aplica):</span> —</p>\n                    <div className=\"flex items-center gap-3 mt-2\">\n                      <div className=\"w-20 h-20 rounded-lg border border-emerald-500/20 bg-black/50 flex items-center justify-center\">\n                        <QrCode className=\"w-10 h-10 text-emerald-400\" />\n                      </div>\n                      <Button size=\"sm\" variant=\"outline\" className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                        Copiar dirección\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"rounded-xl border border-emerald-500/15 bg-black/30 p-5\">\n                <h6 className=\"text-emerald-50 font-semibold mb-3\">Comprobante y Confirmación</h6>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label className=\"text-emerald-50 flex items-center gap-2\"><Hash className=\"w-4 h-4\" /> Hash de transacción</Label>\n                    <Input\n                      placeholder=\"0xabc123...\"\n                      value={txHash}\n                      onChange={(e) => setTxHash(e.target.value)}\n                      className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"text-emerald-50\">Subir captura/imagen del envío</Label>\n                    <Input\n                      type=\"file\"\n                      accept=\".pdf,.jpg,.jpeg,.png\"\n                      onChange={(e) => setCapturaCrypto((e.target.files?.length ?? 0) > 0)}\n                      className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                    />\n                    {(!txHash || !capturaCrypto) && <p className=\"text-xs text-amber-400 mt-1\">Debes adjuntar hash + captura para continuar.</p>}\n                  </div>\n\n                  <div className=\"flex flex-wrap gap-3\">\n                    <Button disabled={!depositoCryptoListo} onClick={() => setCryptoPaso(\"Detectado\")} className=\"rounded-xl\">\n                      He realizado el envío\n                    </Button>\n                    <Button variant=\"outline\" className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                      Descargar certificado\n                    </Button>\n                  </div>\n\n                  {/* Seguimiento */}\n                  {cryptoPaso && (\n                    <div className=\"mt-4\">\n                      <p className=\"text-sm text-emerald-200/80 mb-2\">Seguimiento</p>\n                      <div className=\"flex flex-wrap items-center gap-2\">\n                        <Badge className={`px-3 ${cryptoPaso ? \"bg-emerald-500 text-black\" : \"bg-emerald-900/30 text-emerald-200\"}`}>Detectado</Badge>\n                        <span>→</span>\n                        <Badge className={`${cryptoPaso === \"Confirmado\" || cryptoPaso === \"Asignado\" ? \"bg-emerald-500 text-black\" : \"bg-emerald-900/30 text-emerald-200\"}`}>Confirmado</Badge>\n                        <span>→</span>\n                        <Badge className={`${cryptoPaso === \"Asignado\" ? \"bg-emerald-500 text-black\" : \"bg-emerald-900/30 text-emerald-200\"}`}>Asignado</Badge>\n                      </div>\n\n                      {cryptoPaso === \"Detectado\" && (\n                        <div className=\"flex gap-2 mt-3\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={simularConfirmado} className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Simular confirmación\n                          </Button>\n                        </div>\n                      )}\n                      {cryptoPaso === \"Confirmado\" && (\n                        <div className=\"flex gap-2 mt-3\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={simularAsignadoCrypto} className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Simular asignación\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n/* -------------------------------------------------------------------------- */\n/*                               VISTA: RETIRO                                */\n/* -------------------------------------------------------------------------- */\n\nfunction RetiroView({\n  hasActiveDeposit,\n}: {\n  hasActiveDeposit: boolean;\n}) {\n  // ---- Retiros ----\n  const [retiroProducto, setRetiroProducto] = useState(\"Plazo fijo 9% - 175 días\");\n  const [retiroMetodo, setRetiroMetodo] = useState<Metodo | \"\">(\"\");\n  const [retiroTotal, setRetiroTotal] = useState(true);\n  const [retiroImporte, setRetiroImporte] = useState<number>(1000);\n\n  const [ibanList, setIbanList] = useState<{ iban: string; verified: boolean }[]>([\n    { iban: \"ES12 3456 7890 1234 5678 9012\", verified: true },\n  ]);\n  const [walletList, setWalletList] = useState<{ name: string; address: string; verified: boolean }[]>([\n    { name: \"Mi USDT ERC20\", address: \"0xABCD...1234\", verified: true },\n  ]);\n  const [ibanSeleccionado, setIbanSeleccionado] = useState<string>(ibanList[0]?.iban ?? \"\");\n  const [walletSeleccionada, setWalletSeleccionada] = useState<string>(walletList[0]?.address ?? \"\");\n  const [retiroPasoBanco, setRetiroPasoBanco] = useState<\"Recibida\" | \"Programada\" | \"Transferida\" | \"Finalizada\" | null>(null);\n  const [retiroPasoCrypto, setRetiroPasoCrypto] = useState<\"Recibida\" | \"TX enviada\" | \"Finalizada\" | null>(null);\n\n  // Añadir/validar IBAN/Wallet\n  const handleAddIban = () => {\n    const nuevo = prompt(\"Introduce un IBAN nuevo (formato ejemplo ES12 3456 7890 1234 5678 9012):\");\n    if (!nuevo) return;\n    setIbanList((l) => [...l, { iban: nuevo, verified: false }]);\n    setIbanSeleccionado(nuevo);\n  };\n  const handleVerifyIban = () => {\n    setIbanList((l) => l.map((i) => (i.iban === ibanSeleccionado ? { ...i, verified: true } : i)));\n  };\n\n  const handleAddWallet = () => {\n    const nombre = prompt(\"Nombre de la wallet (ej. 'Mi USDT TRC20'):\");\n    const dir = prompt(\"Dirección de la wallet:\");\n    if (!nombre || !dir) return;\n    setWalletList((l) => [...l, { name: nombre, address: dir, verified: false }]);\n    setWalletSeleccionada(dir);\n  };\n  const handleVerifyWallet = () => {\n    setWalletList((l) => l.map((w) => (w.address === walletSeleccionada ? { ...w, verified: true } : w)));\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"mb-2\">\n        <h1 className=\"text-3xl font-bold text-emerald-50\">Retiro</h1>\n        <p className=\"text-emerald-200/80\">Solicita un retiro a cuenta bancaria o wallet</p>\n      </div>\n\n      <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl\">\n        <CardContent className=\"p-6 space-y-6 max-h-[72vh] overflow-y-auto\">\n          {!hasActiveDeposit ? (\n            <div className=\"text-emerald-200/80 text-sm\">\n              Aún no tienes aportaciones activas, por eso no hay retiros disponibles.\n            </div>\n          ) : (\n            <>\n              {/* Paso 1: Solicitar retiro */}\n              <div className=\"rounded-xl border border-emerald-500/15 bg-black/30 p-5\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\n                  <div>\n                    <Label className=\"text-emerald-50\">Producto</Label>\n                    <Select value={retiroProducto} onValueChange={setRetiroProducto}>\n                      <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-black/40 border-emerald-500/15 text-emerald-50\">\n                        <SelectItem value=\"Plazo fijo 9% - 175 días\">Plazo fijo 9% - 175 días</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label className=\"text-emerald-50\">Importe</Label>\n                    <div className=\"flex gap-2\">\n                      <Input\n                        type=\"number\"\n                        disabled={retiroTotal}\n                        min={0}\n                        value={retiroImporte}\n                        onChange={(e) => setRetiroImporte(parseFloat(e.target.value) || 0)}\n                        className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant={retiroTotal ? \"default\" : \"outline\"}\n                        onClick={() => setRetiroTotal((v) => !v)}\n                        className={retiroTotal ? \"bg-emerald-600 hover:bg-emerald-500\" : \"border-emerald-500/30 hover:bg-emerald-900/10\"}\n                      >\n                        {retiroTotal ? \"Total\" : \"Parcial\"}\n                      </Button>\n                    </div>\n                  </div>\n                  <div>\n                    <Label className=\"text-emerald-50\">Método</Label>\n                    <Select value={retiroMetodo} onValueChange={(v) => setRetiroMetodo(v as Metodo)}>\n                      <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                        <SelectValue placeholder=\"Selecciona método\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-black/40 border-emerald-500/15 text-emerald-50\">\n                        <SelectItem value=\"banco\">Cuenta bancaria</SelectItem>\n                        <SelectItem value=\"crypto\">Cripto</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                <div className=\"mt-4\">\n                  <Button className=\"rounded-xl\">Solicitar retiro</Button>\n                </div>\n              </div>\n\n              {/* Paso 2: Según método */}\n              {retiroMetodo === \"banco\" && (\n                <div className=\"rounded-xl border border-emerald-500/15 bg-black/30 p-5\">\n                  <h6 className=\"text-emerald-50 font-semibold mb-3\">Cuenta bancaria</h6>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label className=\"text-emerald-50\">IBAN verificado</Label>\n                      <Select value={ibanSeleccionado} onValueChange={setIbanSeleccionado}>\n                        <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent className=\"bg-black/40 border-emerald-500/15 text-emerald-50\">\n                          {ibanList.map((i) => (\n                            <SelectItem key={i.iban} value={i.iban}>\n                              {i.iban} {i.verified ? \"✓\" : \"\"}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <div className=\"flex gap-2 mt-3\">\n                        <Button variant=\"outline\" onClick={handleAddIban} className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                          Añadir IBAN/Wallet\n                        </Button>\n                        {!ibanList.find((i) => i.iban === ibanSeleccionado)?.verified && (\n                          <Button variant=\"outline\" onClick={handleVerifyIban} className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Verificar IBAN\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex items-end\">\n                      <Button className=\"rounded-xl\" onClick={() => setRetiroPasoBanco(\"Recibida\")}>\n                        Confirmar retiro\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Seguimiento */}\n                  {retiroPasoBanco && (\n                    <div className=\"mt-4\">\n                      <p className=\"text-sm text-emerald-200/80 mb-2\">Seguimiento</p>\n                      <div className=\"flex flex-wrap items-center gap-2\">\n                        <Badge className={`${retiroPasoBanco ? \"bg-emerald-500 text-black\" : \"bg-emerald-900/30 text-emerald-200\"}`}>Recibida</Badge>\n                        <span>→</span>\n                        <Badge className={`${[\"Programada\", \"Transferida\", \"Finalizada\"].includes(retiroPasoBanco) ? \"bg-emerald-500 text-black\" : \"bg-emerald-900/30 text-emerald-200\"}`}>Programada</Badge>\n                        <span>→</span>\n                        <Badge className={`${[\"Transferida\", \"Finalizada\"].includes(retiroPasoBanco) ? \"bg-emerald-500 text-black\" : \"bg-emerald-900/30 text-emerald-200\"}`}>Transferida</Badge>\n                        <span>→</span>\n                        <Badge className={`${retiroPasoBanco === \"Finalizada\" ? \"bg-emerald-500 text-black\" : \"bg-emerald-900/30 text-emerald-200\"}`}>Finalizada</Badge>\n                      </div>\n\n                      {retiroPasoBanco === \"Recibida\" && (\n                        <div className=\"flex gap-2 mt-3\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={() => setRetiroPasoBanco(\"Programada\")} className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Simular programación\n                          </Button>\n                        </div>\n                      )}\n                      {retiroPasoBanco === \"Programada\" && (\n                        <div className=\"flex gap-2 mt-3\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={() => setRetiroPasoBanco(\"Transferida\")} className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Simular transferencia\n                          </Button>\n                        </div>\n                      )}\n                      {retiroPasoBanco === \"Transferida\" && (\n                        <div className=\"flex gap-2 mt-3\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={() => setRetiroPasoBanco(\"Finalizada\")} className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Simular finalización\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Descargar justificante\n                          </Button>\n                        </div>\n                      )}\n                      {retiroPasoBanco === \"Finalizada\" && (\n                        <div className=\"flex gap-2 mt-3\">\n                          <Button size=\"sm\" variant=\"outline\" className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Descargar justificante\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {retiroMetodo === \"crypto\" && (\n                <div className=\"rounded-xl border border-emerald-500/15 bg-black/30 p-5\">\n                  <h6 className=\"text-emerald-50 font-semibold mb-3\">Cripto</h6>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label className=\"text-emerald-50\">Wallet verificada</Label>\n                      <Select value={walletSeleccionada} onValueChange={setWalletSeleccionada}>\n                        <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent className=\"bg-black/40 border-emerald-500/15 text-emerald-50\">\n                          {walletList.map((w) => (\n                            <SelectItem key={w.address} value={w.address}>\n                              {w.name} — {w.address.slice(0, 8)}... {w.verified ? \"✓\" : \"\"}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <div className=\"flex gap-2 mt-3\">\n                        <Button variant=\"outline\" onClick={handleAddWallet} className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                          Añadir IBAN/Wallet\n                        </Button>\n                        {!walletList.find((w) => w.address === walletSeleccionada)?.verified && (\n                          <Button variant=\"outline\" onClick={handleVerifyWallet} className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Verificar Wallet\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex items-end\">\n                      <Button className=\"rounded-xl\" onClick={() => setRetiroPasoCrypto(\"Recibida\")}>\n                        Confirmar retiro\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Seguimiento */}\n                  {retiroPasoCrypto && (\n                    <div className=\"mt-4\">\n                      <p className=\"text-sm text-emerald-200/80 mb-2\">Seguimiento</p>\n                      <div className=\"flex flex-wrap items-center gap-2\">\n                        <Badge className={`${retiroPasoCrypto ? \"bg-emerald-500 text-black\" : \"bg-emerald-900/30 text-emerald-200\"}`}>Recibida</Badge>\n                        <span>→</span>\n                        <Badge className={`${[\"TX enviada\", \"Finalizada\"].includes(retiroPasoCrypto) ? \"bg-emerald-500 text-black\" : \"bg-emerald-900/30 text-emerald-200\"}`}>TX enviada</Badge>\n                        <span>→</span>\n                        <Badge className={`${retiroPasoCrypto === \"Finalizada\" ? \"bg-emerald-500 text-black\" : \"bg-emerald-900/30 text-emerald-200\"}`}>Finalizada</Badge>\n                      </div>\n\n                      {retiroPasoCrypto === \"Recibida\" && (\n                        <div className=\"flex gap-2 mt-3\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={() => setRetiroPasoCrypto(\"TX enviada\")} className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Simular TX enviada\n                          </Button>\n                        </div>\n                      )}\n                      {retiroPasoCrypto === \"TX enviada\" && (\n                        <div className=\"flex gap-2 mt-3\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={() => setRetiroPasoCrypto(\"Finalizada\")} className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Simular finalización\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Descargar justificante\n                          </Button>\n                        </div>\n                      )}\n                      {retiroPasoCrypto === \"Finalizada\" && (\n                        <div className=\"flex gap-2 mt-3\">\n                          <Button size=\"sm\" variant=\"outline\" className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Descargar justificante\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              )}\n            </>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n/* -------------------------------------------------------------------------- */\n/*                         VISTA: INFO DE PRODUCTO                            */\n/* -------------------------------------------------------------------------- */\n\nfunction ProductInfoView({ onBack, goToDeposit }: { onBack: () => void; goToDeposit: () => void }) {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-4\">\n        <Button variant=\"outline\" onClick={onBack} className=\"border-emerald-500/30 text-emerald-50 hover:bg-emerald-900/10\">\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Volver\n        </Button>\n        <div>\n          <h2 className=\"text-2xl font-bold text-emerald-50\">Plazo fijo 9% — 175 días</h2>\n          <p className=\"text-emerald-200/80 text-sm\">Información y condiciones del producto</p>\n        </div>\n      </div>\n\n      <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl\">\n        <CardContent className=\"p-6 space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {[\n              { title: \"Rentabilidad\", value: \"9.00% anual\" },\n              { title: \"Plazo\", value: \"175 días\" },\n              { title: \"Renovación\", value: \"No renovable\" },\n            ].map((b) => (\n              <div key={b.title} className=\"bg-black/40 p-6 rounded-xl text-center border border-emerald-500/15\">\n                <p className=\"text-emerald-200/80 text-sm\">{b.title}</p>\n                <p className=\"text-emerald-50 font-bold text-xl\">{b.value}</p>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"text-emerald-200/80 space-y-2\">\n            <p>\n              Depósito bancario con retorno fijo mediante préstamo participativo y cesión de la pignoración al cliente\n              depositante. Importe mínimo recomendado 50.000&nbsp;€.\n            </p>\n            <p>Garantía bancaria del 100% del principal.</p>\n          </div>\n\n          <div className=\"flex flex-wrap gap-3\">\n            <Button onClick={goToDeposit} className=\"rounded-xl bg-gradient-to-r from-emerald-600 to-emerald-500 hover:from-emerald-500 hover:to-emerald-400 text-white\">\n              Iniciar Depósito\n            </Button>\n            <Button variant=\"outline\" className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n              Descargar folleto\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n/* -------------------------------------------------------------------------- */\n/*                                DASHBOARD                                   */\n/* -------------------------------------------------------------------------- */\n\ntype KycStatus = \"Pendiente\" | \"Aprobado\" | \"Rechazado\";\n\nexport default function Dashboard() {\n  useScrollToTop();\n  const [, setLocation] = useLocation();\n\n  // ahora el menú tiene 6 entradas\n  const [activeTab, setActiveTab] = useState<\"inicio\" | \"perfil\" | \"productos\" | \"contratos\" | \"deposito\" | \"retiro\">(\"inicio\");\n\n  const [showCalculator, setShowCalculator] = useState(false);\n  const [profilePhoto, setProfilePhoto] = useState<string | null>(null);\n  // State for profile form data\n  const [profileFormData, setProfileFormData] = useState({\n    nombre: \"\",\n    apellidos: \"\",\n    telefono: \"\",\n    fechaNacimiento: \"\",\n    pais: \"espana\",\n    direccion: \"\",\n  });\n\n  const [activeProductsView, setActiveProductsView] = useState<\n    \"default\" | \"mis-productos\" | \"historial\" | \"producto-detalle\"\n  >(\"default\");\n  const [activeProductsSubTab, setActiveProductsSubTab] = useState<\"activos\" | \"completados\" | \"cancelados\">(\"activos\");\n\n  // Simula si el usuario tiene una aportación activa (para permitir retiros)\n  const [hasActiveDeposit, setHasActiveDeposit] = useState(true);\n\n  const handleLogout = () => setLocation(\"/login\");\n\n  const handlePhotoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = (e) => setProfilePhoto(e.target?.result as string);\n    reader.readAsDataURL(file);\n  };\n\n  const handleDownloadStatement = async () => {\n    try {\n      await generateStatementPDF({\n        cliente: \"Juan Cliente\",\n        periodo: \"Enero 2025\",\n        fecha: new Date().toLocaleDateString(\"es-ES\"),\n        capitalInvertido: 50000,\n        rentabilidadAnualPct: 9.0,\n        mesesTranscurridos: 3,\n        mesesTotales: 12,\n        beneficioAcumulado: 1125,\n        valorTotalActual: 51125,\n        detalleMensual: [\n          { label: \"Enero 2025\", importe: 375 },\n          { label: \"Febrero 2025\", importe: 375 },\n          { label: \"Marzo 2025\", importe: 375 },\n        ],\n        proyeccion: { beneficioTotal: 4500, valorFinal: 54500 },\n      });\n      \n      // Registrar actividad de descarga de estado de cuenta\n      logActivity('Estado de cuenta descargado');\n    } catch (error) {\n      console.error(\"Error generating PDF:\", error);\n      alert(\"Error al generar el PDF. Inténtalo de nuevo.\");\n    }\n  };\n\n  const handleCalculateInvestment = () => setShowCalculator(true);\n\n  // Datos de la inversión (esto debería venir de la base de datos)\n  const capitalInvertido = 50000;\n  const mesesTranscurridos = 7;\n  const mesesTotales = 24; // Ejemplo: contrato de 24 meses        \n  \n  // Cálculos de progreso\n  const percentMeses = (mesesTranscurridos / Math.max(1, mesesTotales)) * 100;\n  const mesesRestantes = Math.max(0, mesesTotales - mesesTranscurridos);\n  \n  // Para Capital Invertido: porcentaje de tiempo transcurrido del contrato\n  const percentCapital = percentMeses; // Mismo cálculo basado en tiempo\n  const beneficioEstimadoTotal = (capitalInvertido * 0.09 * mesesTotales) / 12; // 9% anual prorrateado\n  \n  // ===== KPIs =====\n  const kpis = [\n    { \n      title: \"Capital Invertido\", \n      value: `€${capitalInvertido.toLocaleString()}`, \n      change: `${Math.round(percentCapital)}% del período completado`, \n      trending: \"up\" as const \n    },\n    { \n      title: \"Progreso en Meses\", \n      value: `Mes ${mesesTranscurridos} de ${mesesTotales}`, \n      change: `${Math.round(percentMeses)}% del período`, \n      trending: \"up\" as const \n    },\n    { \n      title: \"Beneficio Total Estimado\", \n      value: `€${Math.round(beneficioEstimadoTotal).toLocaleString()}`, \n      change: \"Al final del período\", \n      trending: \"up\" as const \n    },\n  ] as const;\n\n  // Hook para obtener las actividades recientes del cliente (últimos 5 registros)\n  const { data: recentActivityData } = useQuery({\n    queryKey: ['/api/client/activity-logs'],\n    enabled: true,\n  });\n\n  const recentActivityLogs = recentActivityData?.logs?.slice(0, 5) || [];\n\n  // --- Mis productos (ejemplos) ---\n  const productosActivos = [\n    { nombre: \"Fondo de Inversión Verde Europa\", estado: \"En curso\", cantidad: \"€5.000\", fechaInicio: \"12/05/2025\", rentabilidad: \"6.2% anual\" },\n    { nombre: \"Plan Ahorro Flexible Plus\", estado: \"Activo\", cantidad: \"€2.500\", fechaInicio: \"01/07/2025\", rentabilidad: \"3.8% anual\" },\n    { nombre: \"Depósito Estructurado Europa\", estado: \"En curso\", cantidad: \"€8.500\", fechaInicio: \"22/08/2025\", rentabilidad: \"5.1% anual\" },\n  ];\n\n  const productosCompletados = [\n    { nombre: \"Bono Corporativo Energía Solar\", estado: \"Éxito\", cantidad: \"€10.000\", fechaInicio: \"10/03/2024\", fechaFin: \"10/03/2025\", rentabilidadFinal: \"5.5%\" },\n    { nombre: \"Fondo Tecnología Asia\", estado: \"Éxito\", cantidad: \"€7.000\", fechaInicio: \"15/01/2023\", fechaFin: \"15/01/2024\", rentabilidadFinal: \"4.9%\" },\n    { nombre: \"Letra del Tesoro España 12M\", estado: \"Éxito\", cantidad: \"€6.000\", fechaInicio: \"01/02/2023\", fechaFin: \"01/02/2024\", rentabilidadFinal: \"3.7%\" },\n  ];\n\n  const productosCancelados = [\n    { nombre: \"Fondo Startups LatAm\", estado: \"Cancelado\", cantidad: \"€3.000\", fechaCancelacion: \"02/04/2025\", motivo: \"No se alcanzó el capital mínimo requerido\" },\n    { nombre: \"Plan de Ahorro Salud\", estado: \"Cancelado\", cantidad: \"€1.500\", fechaCancelacion: \"20/06/2025\", motivo: \"Cancelado por el usuario antes del inicio\" },\n    { nombre: \"Fondo Inmobiliario Urbano\", estado: \"Cancelado\", cantidad: \"€4.000\", fechaCancelacion: \"15/05/2025\", motivo: \"Documentación incompleta del cliente\" },\n  ];\n\n  // ===== Helpers parsing =====\n  const parseEuro = (s: string) => {\n    const num = s.replace(/[^\\d,.-]/g, \"\").replace(/\\./g, \"\").replace(\",\", \".\");\n    const n = Number(num);\n    return isNaN(n) ? 0 : n;\n  };\n  const parsePercent = (s?: string) => {\n    if (!s) return 0;\n    const num = s.replace(/[^\\d,.-]/g, \"\").replace(\",\", \".\");\n    return Number(num) || 0;\n  };\n  const parseESDate = (s: string) => {\n    const [d, m, y] = s.split(\"/\").map((p) => parseInt(p, 10));\n    return new Date(y, m - 1, d);\n  };\n\n  // ====== FILTROS: Mis Productos ======\n  const [showMPFilters, setShowMPFilters] = useState(false);\n  const [mpSort, setMpSort] = useState<\"\" | \"cantidadDesc\" | \"cantidadAsc\" | \"fechaAsc\" | \"fechaDesc\" | \"rentDesc\" | \"rentAsc\">(\"\");\n  const [mpFilters, setMpFilters] = useState({ search: \"\", cantidadMin: \"\", cantidadMax: \"\", fechaFrom: \"\", fechaTo: \"\", rentMin: \"\", rentMax: \"\" });\n\n\n  // ====== FILTROS: Transacciones ======\n  const [showTxFilters, setShowTxFilters] = useState(false);\n  const [txSort, setTxSort] = useState<\"\" | \"dateDesc\" | \"dateAsc\" | \"cantidadDesc\" | \"cantidadAsc\">(\"\");\n  const [txFilters, setTxFilters] = useState({ search: \"\", tipo: \"\", estado: \"\", cantidadMin: \"\", cantidadMax: \"\", dateFrom: \"\", dateTo: \"\" });\n\n  const transacciones = [\n    { fecha: \"2025-01-15\", tipo: \"Depósito\", descripcion: \"Depósito inicial producto 9%\", cantidad: 50000, estado: \"Completada\" },\n    { fecha: \"2025-02-15\", tipo: \"Intereses\", descripcion: \"Intereses mensuales\", cantidad: 375, estado: \"Completada\" },\n    { fecha: \"2025-03-10\", tipo: \"Retiro\", descripcion: \"Retiro parcial\", cantidad: -1000, estado: \"Pendiente\" },\n    { fecha: \"2025-04-15\", tipo: \"Intereses\", descripcion: \"Intereses mensuales\", cantidad: 375, estado: \"Completada\" },\n  ];\n\n  // ====== FILTROS: Contratos ======\n  const [showCFilters, setShowCFilters] = useState(false);\n  const [cSort, setCSort] = useState<\"\" | \"dateDesc\" | \"dateAsc\">(\"\");\n  const [cFilters, setCFilters] = useState({ search: \"\", estado: \"\", dateFrom: \"\", dateTo: \"\", tipo: \"\" });\n\n  // ====== CONTROL DE TABS DE PERFIL ======\n  const [profileActiveTab, setProfileActiveTab] = useState(\"personal\");\n\n  const contratosCliente = [\n    { \n      titulo: \"Depósito Bancario\", \n      descripcion: \"Confirmación de depósito a plazo fijo con detalles de inversión\", \n      tipo: \"PDF\", \n      fecha: \"2025-01-25\", \n      estado: \"Disponible\", \n      categoria: \"Producto\",\n      archivo: \"/attached_assets/07. Depósito Bancario_1756335354455.pdf\"\n    },\n    { \n      titulo: \"Contrato de Colaboración Partner Para Captación de Inversores\", \n      descripcion: \"Acuerdo de colaboración comercial para asesores y partners\", \n      tipo: \"DOCX\", \n      fecha: \"2025-01-25\", \n      estado: \"Disponible\", \n      categoria: \"Legal\",\n      archivo: \"/attached_assets/08. CONTRATO DE COLABORACIÓN PARTNER PARA CAPTACIÓN DE INVERSORES_1756335354457.docx\"\n    },\n  ];\n\n  /* ======== KYC avanzado (perfil) ======== */\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  \n  // KYC data state\n  const [kycFormData, setKycFormData] = useState({\n    fullName: \"\",\n    documentType: \"dni\",\n    documentNumber: \"\",\n    country: \"España\",\n    documentsUrls: [] as string[],\n  });\n  const [kycDocs, setKycDocs] = useState<File[]>([]);\n  \n  // Document viewing states (similar to admin dashboard)\n  const [showDocumentsDialog, setShowDocumentsDialog] = useState(false);\n  const [viewingDocuments, setViewingDocuments] = useState<string[] | null>(null);\n\n  // Fetch user's KYC data\n  const { data: kycData, isLoading: kycLoading } = useQuery({\n    queryKey: [\"/api/kyc/me\"],\n    enabled: !!user,\n    refetchInterval: 30000, // Refetch every 30 seconds\n    refetchOnWindowFocus: true, // Refetch when user focuses window\n  });\n\n  // Fetch user's profile data\n  const { data: userData, isLoading: userLoading } = useQuery({\n    queryKey: [\"/api/me\"],\n    enabled: !!user,\n  });\n\n  // Create/Update KYC mutation\n  const kycMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const kycPayload = {\n        ...data,\n        documentsUrls: data.documentsUrls || [],\n      };\n\n      const method = kycData?.kyc ? 'PUT' : 'POST';\n      const url = kycData?.kyc ? '/api/kyc/me' : '/api/kyc';\n      \n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify(kycPayload),\n      });\n\n      if (!response.ok) {\n        throw new Error(await response.text());\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/kyc/me\"] });\n      // Registrar actividad de KYC - específico para actualización de documentos\n      logActivity('Documentos KYC actualizados');\n    },\n  });\n\n  // Mutación para actualizar el perfil\n  const profileMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch('/api/me/profile', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error(await response.text());\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/me\"] });\n      // Registrar actividad de perfil actualizado\n      logActivity('Perfil actualizado');\n    },\n  });\n\n  // Función para registrar actividad del cliente\n  const logActivity = async (action: string) => {\n    try {\n      await fetch('/api/client/activity-logs', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify({ action }),\n      });\n      // Invalidar las consultas del historial para mostrar la nueva actividad\n      queryClient.invalidateQueries({ queryKey: ['/api/client/activity-logs'] });\n    } catch (error) {\n      console.error('Error registrando actividad:', error);\n    }\n  };\n\n  // Update form data when KYC data is loaded\n  useEffect(() => {\n    if (kycData?.kyc) {\n      setKycFormData({\n        fullName: kycData.kyc.fullName || \"\",\n        documentType: kycData.kyc.documentType || \"dni\",\n        documentNumber: kycData.kyc.documentNumber || \"\",\n        country: kycData.kyc.country || \"España\",\n      });\n    }\n  }, [kycData]);\n\n  // Update profile form data when user data is loaded\n  useEffect(() => {\n    if (userData?.user) {\n      setProfileFormData({\n        nombre: userData.user.name || \"\",\n        apellidos: userData.user.apellidos || \"\",\n        telefono: userData.user.telefono || \"\",\n        fechaNacimiento: userData.user.fechaNacimiento || \"\",\n        pais: userData.user.pais || \"espana\",\n        direccion: userData.user.direccion || \"\",\n      });\n    }\n  }, [userData]);\n\n  const handleKycUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files ?? []);\n    if (!files.length) return;\n    const accepted = files.filter((f) => {\n      const okType = [\"image/jpeg\", \"image/png\", \"application/pdf\"].includes(f.type) || f.type === \"\";\n      const okSize = f.size <= 10 * 1024 * 1024;\n      return okType && okSize;\n    });\n    setKycDocs(accepted);\n  };\n\n  // This function is no longer needed as file management is handled by KycFileUpload component\n  \n  const handleKycSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!kycFormData.fullName || !kycFormData.documentNumber || !kycFormData.documentsUrls.length) return;\n    \n    try {\n      await kycMutation.mutateAsync(kycFormData);\n    } catch (error) {\n      console.error('Error submitting KYC:', error);\n    }\n  };\n\n  // Función para manejar el submit del perfil\n  const handleProfileSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      await profileMutation.mutateAsync(profileFormData);\n    } catch (error) {\n      console.error('Error updating profile:', error);\n    }\n  };\n  \n  // Initialize form data when KYC data is loaded\n  useEffect(() => {\n    if (kycData?.kyc) {\n      setKycFormData({\n        fullName: kycData.kyc.fullName || \"\",\n        documentType: kycData.kyc.documentType || \"dni\",\n        documentNumber: kycData.kyc.documentNumber || \"\",\n        country: kycData.kyc.country || \"España\",\n        documentsUrls: kycData.kyc.documentsUrls || [],\n      });\n    }\n  }, [kycData]);\n\n  // Get KYC status and messages\n  const currentKyc = kycData?.kyc;\n  const kycStatus = currentKyc?.status === \"approved\" ? \"Aprobado\" : \n                   currentKyc?.status === \"rejected\" ? \"Rechazado\" : \"Pendiente\";\n  const kycFeedback = currentKyc?.rejectionReason || \"\";\n\n  const formatBytes = (bytes: number) => {\n    if (bytes === 0) return \"0 B\";\n    const k = 1024;\n    const sizes = [\"B\", \"KB\", \"MB\", \"GB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;\n  };\n\n  // Document viewing functions (similar to admin dashboard)\n  const handleViewDocuments = (documentsUrls: string[] | null) => {\n    if (!documentsUrls || documentsUrls.length === 0) {\n      alert(\"No hay documentos disponibles\");\n      return;\n    }\n    setViewingDocuments(documentsUrls);\n    setShowDocumentsDialog(true);\n  };\n\n  const handleCloseDocumentsDialog = () => {\n    setShowDocumentsDialog(false);\n    setViewingDocuments(null);\n  };\n\n  const kycBadgeClass =\n    kycStatus === \"Aprobado\"\n      ? \"bg-emerald-500 text-black\"\n      : kycStatus === \"Rechazado\"\n      ? \"bg-red-500 text-white\"\n      : \"bg-amber-500 text-black\";\n\n  const kycMessage =\n    kycStatus === \"Aprobado\"\n      ? \"¡Tu cuenta está verificada! Ya puedes operar sin límites.\"\n      : kycStatus === \"Rechazado\"\n      ? kycFeedback || \"Hemos detectado inconsistencias. Vuelve a subir los documentos.\"\n      : kycDocs.length\n      ? \"Tus documentos están en revisión. Te notificaremos al finalizar.\"\n      : \"Aún no has subido documentos. Sube tu DNI o pasaporte para iniciar la verificación.\";\n\n  return (\n    <div\n      className={[\n        \"relative min-h-screen text-white flex overflow-hidden\",\n        \"bg-gradient-to-br from-black via-[#0A1713] to-[#0E2A1F]\",\n        \"before:pointer-events-none before:absolute before:inset-0\",\n        \"before:bg-[radial-gradient(80%_60%_at_110%_-10%,rgba(16,185,129,0.18),transparent),radial-gradient(60%_40%_at_-20%_110%,rgba(16,185,129,0.12),transparent)]\",\n      ].join(\" \")}\n    >\n      {/* Sidebar */}\n      <aside\n        className={[\n          \"w-64 fixed h-full z-40 p-6\",\n          \"bg-black/40 backdrop-blur-sm\",\n          \"border-r border-emerald-500/15\",\n          \"shadow-[0_0_0_1px_rgba(16,185,129,0.08),_0_20px_60px_-20px_rgba(16,185,129,0.25)]\",\n        ].join(\" \")}\n      >\n        <div className=\"flex items-center space-x-3 mb-8\">\n          <img src={logoImg} alt=\"Nakama&Partners\" className=\"w-8 h-8 drop-shadow-[0_0_14px_rgba(16,185,129,0.35)]\" />\n          <div>\n            <h1 className=\"font-cormorant text-lg font-bold text-emerald-50\">Nakama&Partners</h1>\n            <p className=\"text-emerald-300 text-xs\">Portal de Cliente</p>\n          </div>\n        </div>\n\n        <nav className=\"space-y-2 flex-1\">\n          {[\n            { id: \"inicio\", label: \"Resumen\", icon: Calendar },\n            { id: \"perfil\", label: \"Perfil\", icon: User },\n            { id: \"productos\", label: \"Productos\", icon: Package },\n            { id: \"contratos\", label: \"Contratos\", icon: FileText },\n            { id: \"deposito\", label: \"Depósito\", icon: Banknote },\n            { id: \"retiro\", label: \"Retiro\", icon: Wallet },\n          ].map((item) => (\n            <button\n              key={item.id}\n              onClick={() => {\n                setActiveTab(item.id as any);\n                if (item.id === \"productos\") setActiveProductsView(\"default\");\n              }}\n              className={[\n                \"w-full flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors\",\n                activeTab === (item.id as any)\n                  ? \"bg-emerald-600/20 border border-emerald-500/30 text-emerald-50 shadow-[0_8px_24px_-12px_rgba(16,185,129,0.45)]\"\n                  : \"text-emerald-200 hover:bg-emerald-900/10\",\n              ].join(\" \")}\n            >\n              <item.icon className=\"h-4 w-4\" />\n              <span>{item.label}</span>\n            </button>\n          ))}\n        </nav>\n\n        <Button\n          onClick={handleLogout}\n          variant=\"outline\"\n          className=\"w-full mt-4 justify-start border-emerald-500/20 text-emerald-50 hover:bg-emerald-900/10\"\n        >\n          <LogOut className=\"h-4 w-4 mr-3\" />\n          Cerrar sesión\n        </Button>\n      </aside>\n\n      {/* Main Content */}\n      <main className=\"flex-1 p-8 ml-64\">\n        {/* ====== PERFIL ====== */}\n        {activeTab === \"perfil\" ? (\n          <div>\n            <div className=\"mb-8\">\n              <h1 className=\"text-3xl font-bold text-emerald-50\">Mi Perfil</h1>\n              <p className=\"text-emerald-200/80\">Gestiona tu información personal</p>\n            </div>\n\n            <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl\">\n              <CardContent className=\"p-6\">\n                <Tabs value={profileActiveTab} onValueChange={setProfileActiveTab} className=\"w-full\">\n                  <TabsList className=\"grid w-full grid-cols-2 bg-black/40 border border-emerald-500/15 rounded-xl\">\n                    <TabsTrigger\n                      value=\"personal\"\n                      className=\"data-[state=active]:bg-emerald-600/20 data-[state=active]:text-emerald-50 rounded-lg\"\n                    >\n                      Información Personal\n                    </TabsTrigger>\n                    <TabsTrigger\n                      value=\"kyc\"\n                      className=\"data-[state=active]:bg-emerald-600/20 data-[state=active]:text-emerald-50 rounded-lg\"\n                    >\n                      Estado KYC\n                    </TabsTrigger>\n                  </TabsList>\n\n                  <TabsContent value=\"personal\" className=\"mt-6\">\n                    <form onSubmit={handleProfileSubmit} className=\"space-y-6\">\n                      {/* Profile Photo */}\n                      <div className=\"flex flex-col items-center mb-8\">\n                        <div className=\"relative mb-4\">\n                          <div className=\"w-32 h-32 rounded-full overflow-hidden bg-black/50 border-2 border-emerald-500/20 flex items-center justify-center\">\n                            {profilePhoto ? (\n                              <img src={profilePhoto} alt=\"Foto de perfil\" className=\"w-full h-full object-cover\" />\n                            ) : (\n                              <User className=\"w-16 h-16 text-emerald-300\" />\n                            )}\n                          </div>\n                          <label\n                            htmlFor=\"photo-upload\"\n                            className=\"absolute bottom-0 right-0 bg-emerald-600 hover:bg-emerald-500 rounded-full p-2 cursor-pointer transition-colors\"\n                          >\n                            <Camera className=\"w-4 h-4 text-white\" />\n                          </label>\n                          <input id=\"photo-upload\" type=\"file\" accept=\"image/*\" onChange={handlePhotoUpload} className=\"hidden\" />\n                        </div>\n                        <p className=\"text-emerald-200/80 text-sm text-center\">Haz clic en el icono de cámara para subir tu foto</p>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div>\n                          <Label htmlFor=\"nombre\" className=\"text-emerald-50\">Nombre</Label>\n                          <Input \n                            id=\"nombre\" \n                            name=\"nombre\" \n                            value={profileFormData.nombre}\n                            onChange={(e) => setProfileFormData(prev => ({ ...prev, nombre: e.target.value }))}\n                            className=\"bg-black/50 border-emerald-500/20 text-emerald-50\" \n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"apellidos\" className=\"text-emerald-50\">Apellidos</Label>\n                          <Input \n                            id=\"apellidos\" \n                            name=\"apellidos\" \n                            value={profileFormData.apellidos}\n                            onChange={(e) => setProfileFormData(prev => ({ ...prev, apellidos: e.target.value }))}\n                            className=\"bg-black/50 border-emerald-500/20 text-emerald-50\" \n                          />\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div>\n                          <Label htmlFor=\"email\" className=\"text-emerald-50\">Correo Electrónico</Label>\n                          <Input\n                            id=\"email\"\n                            defaultValue=\"test@test.com\"\n                            disabled\n                            className=\"bg-black/60 border-emerald-500/20 text-emerald-300/80 cursor-not-allowed\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"telefono\" className=\"text-emerald-50\">Número de Teléfono</Label>\n                          <div className=\"relative\">\n                            <Phone className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-emerald-300/70\" />\n                            <Input\n                              id=\"telefono\"\n                              name=\"telefono\"\n                              value={profileFormData.telefono}\n                              onChange={(e) => setProfileFormData(prev => ({ ...prev, telefono: e.target.value }))}\n                              placeholder=\"Ej: +34 646 123 456\"\n                              className=\"bg-black/50 border-emerald-500/20 text-emerald-50 pl-10\"\n                            />\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div>\n                          <Label htmlFor=\"fecha-nacimiento\" className=\"text-emerald-50\">Fecha de Nacimiento</Label>\n                          <Input \n                            id=\"fecha-nacimiento\" \n                            name=\"fecha-nacimiento\" \n                            value={profileFormData.fechaNacimiento}\n                            onChange={(e) => setProfileFormData(prev => ({ ...prev, fechaNacimiento: e.target.value }))}\n                            className=\"bg-black/50 border-emerald-500/20 text-emerald-50\" \n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"fecha-registro\" className=\"text-emerald-50\">Fecha de Registro</Label>\n                          <Input\n                            id=\"fecha-registro\"\n                            defaultValue=\"15/01/2024\"\n                            disabled\n                            className=\"bg-black/60 border-emerald-500/20 text-emerald-300/80 cursor-not-allowed\"\n                          />\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div>\n                          <Label htmlFor=\"pais\" className=\"text-emerald-50\">País</Label>\n                          <select \n                            name=\"pais\" \n                            value={profileFormData.pais}\n                            onChange={(e) => setProfileFormData(prev => ({ ...prev, pais: e.target.value }))}\n                            className=\"flex h-10 w-full rounded-md border border-emerald-500/20 bg-black/50 px-3 py-2 text-sm text-emerald-50 ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n                          >\n                            <option value=\"espana\">España</option>\n                            <option value=\"francia\">Francia</option>\n                            <option value=\"portugal\">Portugal</option>\n                            <option value=\"italia\">Italia</option>\n                            <option value=\"alemania\">Alemania</option>\n                          </select>\n                        </div>\n                        <div />\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"direccion\" className=\"text-emerald-50\">Dirección</Label>\n                        <Input\n                          id=\"direccion\"\n                          name=\"direccion\"\n                          value={profileFormData.direccion}\n                          onChange={(e) => setProfileFormData(prev => ({ ...prev, direccion: e.target.value }))}\n                          className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                        />\n                      </div>\n\n                      <div className=\"pt-4\">\n                        <Button\n                          type=\"submit\"\n                          disabled={profileMutation.isPending}\n                          className=\"w-full rounded-xl bg-gradient-to-r from-emerald-600 to-emerald-500 hover:from-emerald-500 hover:to-emerald-400 text-white font-semibold disabled:opacity-50\"\n                        >\n                          {profileMutation.isPending ? \"ACTUALIZANDO...\" : \"ACTUALIZAR INFORMACIÓN PERSONAL\"}\n                        </Button>\n                      </div>\n                    </form>\n                  </TabsContent>\n\n                  {/* ====== KYC ====== */}\n                  <TabsContent value=\"kyc\" className=\"mt-6\">\n                    <div className=\"bg-black/40 rounded-xl p-8 border border-emerald-500/15\">\n                      <div className=\"flex items-center gap-4 mb-6\">\n                        <div className=\"bg-emerald-500/20 rounded-full p-3\">\n                          <User className=\"h-8 w-8 text-emerald-400\" />\n                        </div>\n                        <div className=\"flex-1\">\n                          <h3 className=\"text-2xl font-bold text-emerald-50 mb-1\">Verificación KYC</h3>\n                          <p className=\"text-emerald-200/80\">{kycMessage}</p>\n                        </div>\n                        <Badge className={`${kycBadgeClass} px-4 py-2 text-sm font-semibold`}>{kycStatus}</Badge>\n                      </div>\n\n                      {/* Documents Uploaded */}\n                      {currentKyc?.documentsUrls && currentKyc.documentsUrls.length > 0 && (\n                        <div className=\"mt-6 bg-emerald-500/10 border border-emerald-500/20 rounded-lg p-4\">\n                          <h4 className=\"text-emerald-300 font-semibold mb-4 flex items-center gap-2\">\n                            <FileText className=\"w-5 h-5\" />\n                            Documentos Subidos\n                          </h4>\n                          <div className=\"grid grid-cols-1 gap-3\">\n                            {currentKyc.documentsUrls.map((docUrl, index) => (\n                              <div key={index} className=\"flex items-center justify-between bg-black/30 rounded-lg p-4 border border-emerald-500/15\">\n                                <div className=\"flex items-center gap-3\">\n                                  <FileText className=\"w-5 h-5 text-emerald-400\" />\n                                  <div>\n                                    <p className=\"text-emerald-50 text-sm font-medium\">\n                                      Documento {index + 1}\n                                    </p>\n                                    <p className=\"text-emerald-300/70 text-xs\">\n                                      {docUrl.split('/').pop()?.substring(0, 40)}...\n                                    </p>\n                                  </div>\n                                </div>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  className=\"border-emerald-500/20 text-emerald-300 hover:bg-emerald-500/10\"\n                                  onClick={() => handleViewDocuments(currentKyc.documentsUrls)}\n                                >\n                                  Ver Documentos\n                                </Button>\n                              </div>\n                            ))}\n                          </div>\n                          \n                          {/* Quick View All Button */}\n                          <div className=\"mt-4 pt-4 border-t border-emerald-500/20\">\n                            <Button\n                              variant=\"outline\"\n                              className=\"w-full border-emerald-500/20 text-emerald-300 hover:bg-emerald-500/10\"\n                              onClick={() => handleViewDocuments(currentKyc.documentsUrls)}\n                            >\n                              <FileText className=\"w-4 h-4 mr-2\" />\n                              Ver Todos los Documentos\n                            </Button>\n                          </div>\n                        </div>\n                      )}\n\n                      {/* KYC Form */}\n                      <div className=\"mt-2 bg-black/40 rounded-xl p-6 border border-emerald-500/15\">\n                        <form onSubmit={handleKycSubmit} className=\"space-y-6\">\n                          {/* Personal Information */}\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                            <div className=\"space-y-2\">\n                              <Label className=\"text-emerald-50\">Nombre Completo</Label>\n                              <Input\n                                value={kycFormData.fullName}\n                                onChange={(e) => setKycFormData({ ...kycFormData, fullName: e.target.value })}\n                                placeholder=\"Introduce tu nombre completo\"\n                                className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                                required\n                              />\n                            </div>\n                            <div className=\"space-y-2\">\n                              <Label className=\"text-emerald-50\">Tipo de Documento</Label>\n                              <Select\n                                value={kycFormData.documentType}\n                                onValueChange={(value) => setKycFormData({ ...kycFormData, documentType: value })}\n                              >\n                                <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                                  <SelectValue />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value=\"dni\">DNI</SelectItem>\n                                  <SelectItem value=\"passport\">Pasaporte</SelectItem>\n                                  <SelectItem value=\"license\">Carnet de Conducir</SelectItem>\n                                </SelectContent>\n                              </Select>\n                            </div>\n                            <div className=\"space-y-2\">\n                              <Label className=\"text-emerald-50\">Número de Documento</Label>\n                              <Input\n                                value={kycFormData.documentNumber}\n                                onChange={(e) => setKycFormData({ ...kycFormData, documentNumber: e.target.value })}\n                                placeholder=\"Número del documento\"\n                                className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                                required\n                              />\n                            </div>\n                            <div className=\"space-y-2\">\n                              <Label className=\"text-emerald-50\">País</Label>\n                              <Input\n                                value={kycFormData.country}\n                                onChange={(e) => setKycFormData({ ...kycFormData, country: e.target.value })}\n                                placeholder=\"País de residencia\"\n                                className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                                required\n                              />\n                            </div>\n                          </div>\n\n                          {/* Document Upload */}\n                          <KycFileUpload \n                            onFilesUploaded={(urls) => setKycFormData({ ...kycFormData, documentsUrls: urls })}\n                            currentFiles={kycFormData.documentsUrls || []}\n                            disabled={kycStatus === \"Aprobado\"}\n                          />\n\n                          {/* Submit Button */}\n                          {kycStatus !== \"Aprobado\" && (\n                            <Button \n                              type=\"submit\" \n                              disabled={kycMutation.isPending || !kycFormData.fullName || !kycFormData.documentNumber || !kycFormData.documentsUrls?.length}\n                              className=\"w-full bg-emerald-600 hover:bg-emerald-500 text-white disabled:opacity-50\"\n                            >\n                              {kycMutation.isPending ? \"Enviando...\" : \n                               kycData?.kyc ? \"Actualizar documentos\" : \"Enviar documentos\"}\n                            </Button>\n                          )}\n\n                          {/* Status Messages */}\n                          {kycStatus === \"Pendiente\" && currentKyc && (\n                            <div className=\"bg-amber-500/10 border border-amber-500/20 rounded-lg p-4\">\n                              <p className=\"text-amber-300 text-sm\">\n                                Tus documentos están en revisión. Te notificaremos al finalizar.\n                              </p>\n                            </div>\n                          )}\n                          {kycStatus === \"Rechazado\" && (\n                            <div className=\"bg-red-500/10 border border-red-500/20 rounded-lg p-4\">\n                              <p className=\"text-red-300 text-sm font-medium mb-2\">Documentos rechazados</p>\n                              <p className=\"text-red-200 text-sm\">\n                                {kycFeedback || \"Revisa tus documentos y vuelve a subirlos.\"}\n                              </p>\n                            </div>\n                          )}\n                          {kycStatus === \"Aprobado\" && (\n                            <div className=\"bg-emerald-500/10 border border-emerald-500/20 rounded-lg p-4\">\n                              <p className=\"text-emerald-300 text-sm\">\n                                ✅ Tu verificación KYC está completa. Ya puedes operar sin límites.\n                              </p>\n                            </div>\n                          )}\n                        </form>\n                      </div>\n                    </div>\n                  </TabsContent>\n                </Tabs>\n              </CardContent>\n            </Card>\n          </div>\n        ) : activeTab === \"productos\" ? (\n          <div>\n            {/* Encabezado Productos */}\n            <div className=\"mb-8\">\n              <h1 className=\"text-3xl font-bold text-emerald-50\">Productos e Inversiones</h1>\n              <p className=\"text-emerald-200/80\">Gestiona tus productos disponibles e inversiones activas</p>\n            </div>\n\n            {/* ----------- Vista DETALLE de producto (info-only) ----------- */}\n            {activeProductsView === \"producto-detalle\" ? (\n              <ProductInfoView\n                onBack={() => setActiveProductsView(\"default\")}\n                goToDeposit={() => setActiveTab(\"deposito\")}\n              />\n            ) : null}\n\n            {/* -------------------------- Vista por defecto -------------------------- */}\n            {activeProductsView === \"default\" ? (\n              <div className=\"mb-8\">\n                {/* Hero */}\n                <div\n                  className=\"relative h-80 rounded-2xl overflow-hidden mb-8 border border-emerald-500/15\"\n                  style={{ backgroundImage: `url(${landscapeSvg})`, backgroundSize: \"cover\", backgroundPosition: \"center\" }}\n                >\n                  <div className=\"absolute inset-0 bg-gradient-to-b from-black/70 via-[#0A1713]/80 to-[#0E2A1F]/80 flex items-center justify-center\">\n                    <div className=\"text-center\">\n                      <h1 className=\"text-4xl font-bold text-emerald-50 mb-2\">Productos Disponibles</h1>\n                      <p className=\"text-emerald-200/80 text-lg\">Descubre nuestras opciones de inversión</p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Action Buttons */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-8\">\n                  <Button\n                    variant=\"outline\"\n                    className=\"border-emerald-500/30 text-emerald-50 hover:bg-emerald-900/10 hover:border-emerald-400 py-4 rounded-xl\"\n                    onClick={() => setActiveProductsView(\"mis-productos\")}\n                  >\n                    <Package className=\"h-5 w-5 mr-2\" />\n                    Mis Productos\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    className=\"border-emerald-500/30 text-emerald-50 hover:bg-emerald-900/10 hover:border-emerald-400 py-4 rounded-xl\"\n                    onClick={() => setActiveProductsView(\"historial\")}\n                  >\n                    <Calendar className=\"h-5 w-5 mr-2\" />\n                    Historial\n                  </Button>\n                </div>\n\n                {/* Products Grid (producto 9%) */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n                  <Card className=\"bg-black/40 border border-emerald-500/15 hover:border-emerald-400 hover:shadow-[0_16px_40px_-20px_rgba(16,185,129,0.45)] transition-all rounded-2xl\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center gap-3 mb-4\">\n                        <h2 className=\"text-xl font-bold text-emerald-50\">Plazo fijo 9% 175 días</h2>\n                        <Badge className=\"bg-emerald-500 text-black\">175 días</Badge>\n                      </div>\n                      <p className=\"text-emerald-200/80 mb-6 leading-relaxed text-sm\">\n                        Depósito bancario con un 9% de rentabilidad anual, mediante préstamo participativo y\n                        cesión de la pignoración al cliente depositante.\n                      </p>\n                      <div className=\"flex items-center justify-between mb-6\">\n                        <div>\n                          <p className=\"text-3xl font-bold text-emerald-400\">9.00%</p>\n                          <p className=\"text-emerald-200/80 text-xs\">Rentabilidad anual</p>\n                        </div>\n                        <Badge className=\"bg-emerald-900/30 text-emerald-200 border border-emerald-500/20\">No renovable</Badge>\n                      </div>\n                      <Button\n                        className=\"w-full rounded-xl bg-gradient-to-r from-emerald-600 to-emerald-500 hover:from-emerald-500 hover:to-emerald-400 text-white\"\n                        onClick={() => setActiveProductsView(\"producto-detalle\")}\n                      >\n                        VER DETALLES\n                      </Button>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            ) : null}\n\n            {/* ----------------------------- Historial ----------------------------- */}\n            {activeProductsView === \"historial\" ? (\n              <HistorialActivityView onBack={() => setActiveProductsView(\"default\")} />\n            ) : null}\n\n\n            {/* ------------------------------ Mis productos ------------------------------ */}\n            {activeProductsView === \"mis-productos\" ? (\n              <div className=\"mb-8\">\n                <div className=\"flex items-center gap-4 mb-4\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setActiveProductsView(\"default\")}\n                    className=\"border-emerald-500/30 text-emerald-50 hover:bg-emerald-900/10\"\n                  >\n                    <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                    Volver\n                  </Button>\n                  <h2 className=\"text-2xl font-bold text-emerald-50\">Mis Productos</h2>\n                </div>\n\n                {/* Filtros Mis Productos */}\n                <div className=\"mb-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setShowMPFilters(!showMPFilters)}\n                      className=\"border-emerald-500/20 text-emerald-50 hover:bg-emerald-900/10\"\n                    >\n                      <Filter className=\"w-4 h-4 mr-2\" />\n                      {showMPFilters ? \"Ocultar Filtros\" : \"Mostrar Filtros\"}\n                    </Button>\n\n                    {(Object.values(mpFilters).some((v) => v !== \"\") || mpSort !== \"\") && (\n                      <Button\n                        variant=\"ghost\"\n                        onClick={() => {\n                          setMpSort(\"\");\n                          setMpFilters({\n                            search: \"\",\n                            cantidadMin: \"\",\n                            cantidadMax: \"\",\n                            fechaFrom: \"\",\n                            fechaTo: \"\",\n                            rentMin: \"\",\n                            rentMax: \"\",\n                          });\n                        }}\n                        className=\"text-emerald-200 hover:text-emerald-50\"\n                      >\n                        <X className=\"w-4 h-4 mr-2\" />\n                        Limpiar Filtros\n                      </Button>\n                    )}\n                  </div>\n\n                  {showMPFilters && (\n                    <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl\">\n                      <CardContent className=\"p-6\">\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                          <div className=\"space-y-2\">\n                            <Label className=\"text-emerald-50\">Búsqueda</Label>\n                            <Input\n                              placeholder=\"Buscar por nombre…\"\n                              value={mpFilters.search}\n                              onChange={(e) => setMpFilters({ ...mpFilters, search: e.target.value })}\n                              className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                            />\n                          </div>\n\n                          <div className=\"space-y-2\">\n                            <Label className=\"text-emerald-50\">Cantidad (€)</Label>\n                            <div className=\"flex space-x-2\">\n                              <Input\n                                placeholder=\"Mín\"\n                                value={mpFilters.cantidadMin}\n                                onChange={(e) => setMpFilters({ ...mpFilters, cantidadMin: e.target.value })}\n                                className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                              />\n                              <Input\n                                placeholder=\"Máx\"\n                                value={mpFilters.cantidadMax}\n                                onChange={(e) => setMpFilters({ ...mpFilters, cantidadMax: e.target.value })}\n                                className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                              />\n                            </div>\n                          </div>\n\n                          <div className=\"space-y-2\">\n                            <Label className=\"text-emerald-50\">Rend. (%)</Label>\n                            <div className=\"flex space-x-2\">\n                              <Input\n                                placeholder=\"Mín\"\n                                value={mpFilters.rentMin}\n                                onChange={(e) => setMpFilters({ ...mpFilters, rentMin: e.target.value })}\n                                className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                              />\n                              <Input\n                                placeholder=\"Máx\"\n                                value={mpFilters.rentMax}\n                                onChange={(e) => setMpFilters({ ...mpFilters, rentMax: e.target.value })}\n                                className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                              />\n                            </div>\n                            <p className=\"text-xs text-emerald-200/70\">* En “Activos” usa “Rentabilidad Estimada”</p>\n                          </div>\n\n                          <div className=\"space-y-2\">\n                            <Label className=\"text-emerald-50\">Fecha desde</Label>\n                            <Input\n                              type=\"date\"\n                              value={mpFilters.fechaFrom}\n                              onChange={(e) => setMpFilters({ ...mpFilters, fechaFrom: e.target.value })}\n                              className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                            />\n                          </div>\n\n                          <div className=\"space-y-2\">\n                            <Label className=\"text-emerald-50\">Fecha hasta</Label>\n                            <Input\n                              type=\"date\"\n                              value={mpFilters.fechaTo}\n                              onChange={(e) => setMpFilters({ ...mpFilters, fechaTo: e.target.value })}\n                              className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                            />\n                          </div>\n\n                          <div className=\"space-y-2\">\n                            <Label className=\"text-emerald-50\">Ordenar por</Label>\n                            <Select value={mpSort} onValueChange={(v) => setMpSort(v as typeof mpSort)}>\n                              <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                                <SelectValue placeholder=\"Sin orden\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"cantidadDesc\">Cantidad (Mayor a menor)</SelectItem>\n                                <SelectItem value=\"cantidadAsc\">Cantidad (Menor a mayor)</SelectItem>\n                                <SelectItem value=\"fechaAsc\">Fecha (Más antiguos)</SelectItem>\n                                <SelectItem value=\"fechaDesc\">Fecha (Más recientes)</SelectItem>\n                                <SelectItem value=\"rentDesc\">Rentabilidad (Mayor)</SelectItem>\n                                <SelectItem value=\"rentAsc\">Rentabilidad (Menor)</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  )}\n                </div>\n\n                <Tabs value={activeProductsSubTab} onValueChange={(value) => setActiveProductsSubTab(value as \"activos\" | \"completados\" | \"cancelados\")} className=\"mb-6\">\n                  <TabsList className=\"grid w-full grid-cols-3 bg-black/40 border border-emerald-500/15 rounded-xl\">\n                    <TabsTrigger value=\"activos\" className=\"data-[state=active]:bg-emerald-600/20 rounded-lg\">\n                      Activos\n                    </TabsTrigger>\n                    <TabsTrigger value=\"completados\" className=\"data-[state=active]:bg-emerald-600/20 rounded-lg\">\n                      Completados\n                    </TabsTrigger>\n                    <TabsTrigger value=\"cancelados\" className=\"data-[state=active]:bg-emerald-600/20 rounded-lg\">\n                      Cancelados\n                    </TabsTrigger>\n                  </TabsList>\n\n                  {/* Activos */}\n                  <TabsContent value=\"activos\" className=\"mt-6\">\n                    <div className=\"space-y-4\">\n                      {productosActivos\n                        .filter((p) => {\n                          const q = mpFilters.search.toLowerCase();\n                          const matchesSearch = !q || p.nombre.toLowerCase().includes(q);\n\n                          const cantidad = parseEuro(p.cantidad);\n                          const minC = mpFilters.cantidadMin ? parseFloat(mpFilters.cantidadMin) : -Infinity;\n                          const maxC = mpFilters.cantidadMax ? parseFloat(mpFilters.cantidadMax) : Infinity;\n                          const matchesCantidad = cantidad >= minC && cantidad <= maxC;\n\n                          const rent = parsePercent(p.rentabilidad);\n                          const minR = mpFilters.rentMin ? parseFloat(mpFilters.rentMin) : -Infinity;\n                          const maxR = mpFilters.rentMax ? parseFloat(mpFilters.rentMax) : Infinity;\n                          const matchesRent = rent >= minR && rent <= maxR;\n\n                          const f = parseESDate(p.fechaInicio).getTime();\n                          const fromOk = !mpFilters.fechaFrom || f >= new Date(mpFilters.fechaFrom).getTime();\n                          const toOk = !mpFilters.fechaTo || f <= new Date(mpFilters.fechaTo).getTime();\n\n                          return matchesSearch && matchesCantidad && matchesRent && fromOk && toOk;\n                        })\n                        .sort((a, b) => {\n                          if (mpSort === \"cantidadDesc\") return parseEuro(b.cantidad) - parseEuro(a.cantidad);\n                          if (mpSort === \"cantidadAsc\") return parseEuro(a.cantidad) - parseEuro(b.cantidad);\n                          if (mpSort === \"fechaAsc\") return parseESDate(a.fechaInicio).getTime() - parseESDate(b.fechaInicio).getTime();\n                          if (mpSort === \"fechaDesc\") return parseESDate(b.fechaInicio).getTime() - parseESDate(a.fechaInicio).getTime();\n                          if (mpSort === \"rentDesc\") return parsePercent(b.rentabilidad) - parsePercent(a.rentabilidad);\n                          if (mpSort === \"rentAsc\") return parsePercent(a.rentabilidad) - parsePercent(b.rentabilidad);\n                          return 0;\n                        })\n                        .map((p, i) => (\n                          <Card key={i} className=\"bg-black/40 border border-emerald-500/15 hover:border-emerald-400 transition-all rounded-xl\">\n                            <CardContent className=\"p-6\">\n                              <div className=\"flex items-start justify-between mb-4\">\n                                <div>\n                                  <h4 className=\"text-lg font-semibold text-emerald-50 mb-2\">{p.nombre}</h4>\n                                  <Badge className=\"bg-emerald-500 text-black\">{p.estado}</Badge>\n                                </div>\n                                <div className=\"text-right\">\n                                  <p className=\"text-2xl font-bold text-emerald-400\">{p.cantidad}</p>\n                                </div>\n                              </div>\n                              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                                <div>\n                                  <p className=\"text-emerald-200/80\">Fecha de inicio</p>\n                                  <p className=\"text-emerald-50 font-medium\">{p.fechaInicio}</p>\n                                </div>\n                                <div>\n                                  <p className=\"text-emerald-200/80\">Rentabilidad Estimada</p>\n                                  <p className=\"text-emerald-50 font-medium\">{p.rentabilidad}</p>\n                                </div>\n                              </div>\n                            </CardContent>\n                          </Card>\n                        ))}\n                    </div>\n                  </TabsContent>\n\n                  {/* Completados */}\n                  <TabsContent value=\"completados\" className=\"mt-6\">\n                    <div className=\"space-y-4\">\n                      {productosCompletados\n                        .filter((p) => {\n                          const q = mpFilters.search.toLowerCase();\n                          const matchesSearch = !q || p.nombre.toLowerCase().includes(q);\n\n                          const cantidad = parseEuro(p.cantidad);\n                          const minC = mpFilters.cantidadMin ? parseFloat(mpFilters.cantidadMin) : -Infinity;\n                          const maxC = mpFilters.cantidadMax ? parseFloat(mpFilters.cantidadMax) : Infinity;\n                          const matchesCantidad = cantidad >= minC && cantidad <= maxC;\n\n                          const rent = parsePercent(p.rentabilidadFinal);\n                          const minR = mpFilters.rentMin ? parseFloat(mpFilters.rentMin) : -Infinity;\n                          const maxR = mpFilters.rentMax ? parseFloat(mpFilters.rentMax) : Infinity;\n                          const matchesRent = rent >= minR && rent <= maxR;\n\n                          const f = parseESDate(p.fechaFin).getTime();\n                          const fromOk = !mpFilters.fechaFrom || f >= new Date(mpFilters.fechaFrom).getTime();\n                          const toOk = !mpFilters.fechaTo || f <= new Date(mpFilters.fechaTo).getTime();\n\n                          return matchesSearch && matchesCantidad && matchesRent && fromOk && toOk;\n                        })\n                        .sort((a, b) => {\n                          if (mpSort === \"cantidadDesc\") return parseEuro(b.cantidad) - parseEuro(a.cantidad);\n                          if (mpSort === \"cantidadAsc\") return parseEuro(a.cantidad) - parseEuro(b.cantidad);\n                          if (mpSort === \"fechaAsc\") return parseESDate(a.fechaFin).getTime() - parseESDate(b.fechaFin).getTime();\n                          if (mpSort === \"fechaDesc\") return parseESDate(b.fechaFin).getTime() - parseESDate(a.fechaFin).getTime();\n                          if (mpSort === \"rentDesc\") return parsePercent(b.rentabilidadFinal) - parsePercent(a.rentabilidadFinal);\n                          if (mpSort === \"rentAsc\") return parsePercent(a.rentabilidadFinal) - parsePercent(b.rentabilidadFinal);\n                          return 0;\n                        })\n                        .map((p, i) => (\n                          <Card key={i} className=\"bg-black/40 border border-emerald-500/15 hover:border-emerald-400 transition-all rounded-xl\">\n                            <CardContent className=\"p-6\">\n                              <div className=\"flex items-start justify-between mb-4\">\n                                <div>\n                                  <h4 className=\"text-lg font-semibold text-emerald-50 mb-2\">{p.nombre}</h4>\n                                  <Badge className=\"bg-blue-500 text-white\">{p.estado}</Badge>\n                                </div>\n                                <div className=\"text-right\">\n                                  <p className=\"text-2xl font-bold text-emerald-400\">{p.cantidad}</p>\n                                </div>\n                              </div>\n                              <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                                <div>\n                                  <p className=\"text-emerald-200/80\">Inicio</p>\n                                  <p className=\"text-emerald-50 font-medium\">{p.fechaInicio}</p>\n                                </div>\n                                <div>\n                                  <p className=\"text-emerald-200/80\">Finalizado</p>\n                                  <p className=\"text-emerald-50 font-medium\">{p.fechaFin}</p>\n                                </div>\n                                <div>\n                                  <p className=\"text-emerald-200/80\">Rentabilidad Final</p>\n                                  <p className=\"text-emerald-50 font-medium\">{p.rentabilidadFinal}</p>\n                                </div>\n                              </div>\n                            </CardContent>\n                          </Card>\n                        ))}\n                    </div>\n                  </TabsContent>\n\n                  {/* Cancelados */}\n                  <TabsContent value=\"cancelados\" className=\"mt-6\">\n                    <div className=\"space-y-4\">\n                      {productosCancelados\n                        .filter((p) => {\n                          const q = mpFilters.search.toLowerCase();\n                          const matchesSearch = !q || p.nombre.toLowerCase().includes(q);\n\n                          const cantidad = parseEuro(p.cantidad);\n                          const minC = mpFilters.cantidadMin ? parseFloat(mpFilters.cantidadMin) : -Infinity;\n                          const maxC = mpFilters.cantidadMax ? parseFloat(mpFilters.cantidadMax) : Infinity;\n                          const matchesCantidad = cantidad >= minC && cantidad <= maxC;\n\n                          const f = parseESDate(p.fechaCancelacion).getTime();\n                          const fromOk = !mpFilters.fechaFrom || f >= new Date(mpFilters.fechaFrom).getTime();\n                          const toOk = !mpFilters.fechaTo || f <= new Date(mpFilters.fechaTo).getTime();\n\n                          return matchesSearch && matchesCantidad && fromOk && toOk;\n                        })\n                        .sort((a, b) => {\n                          if (mpSort === \"cantidadDesc\") return parseEuro(b.cantidad) - parseEuro(a.cantidad);\n                          if (mpSort === \"cantidadAsc\") return parseEuro(a.cantidad) - parseEuro(b.cantidad);\n                          if (mpSort === \"fechaAsc\") return parseESDate(a.fechaCancelacion).getTime() - parseESDate(b.fechaCancelacion).getTime();\n                          if (mpSort === \"fechaDesc\") return parseESDate(b.fechaCancelacion).getTime() - parseESDate(a.fechaCancelacion).getTime();\n                          return 0;\n                        })\n                        .map((p, i) => (\n                          <Card key={i} className=\"bg-black/40 border border-emerald-500/15 hover:border-emerald-400 transition-all rounded-xl\">\n                            <CardContent className=\"p-6\">\n                              <div className=\"flex items-start justify-between mb-4\">\n                                <div>\n                                  <h4 className=\"text-lg font-semibold text-emerald-50 mb-2\">{p.nombre}</h4>\n                                  <Badge className=\"bg-red-500 text-white\">{p.estado}</Badge>\n                                </div>\n                                <div className=\"text-right\">\n                                  <p className=\"text-2xl font-bold text-red-400\">{p.cantidad}</p>\n                                </div>\n                              </div>\n                              <div className=\"grid grid-cols-1 gap-4 text-sm\">\n                                <div>\n                                  <p className=\"text-emerald-200/80\">Fecha de cancelación</p>\n                                  <p className=\"text-emerald-50 font-medium\">{p.fechaCancelacion}</p>\n                                </div>\n                                <div>\n                                  <p className=\"text-emerald-200/80\">Motivo</p>\n                                  <p className=\"text-emerald-50 font-medium italic\">{p.motivo}</p>\n                                </div>\n                              </div>\n                            </CardContent>\n                          </Card>\n                        ))}\n                    </div>\n                  </TabsContent>\n                </Tabs>\n              </div>\n            ) : null}\n\n\n\n\n          </div>\n        ) : activeTab === \"contratos\" ? (\n          <div>\n            <div className=\"mb-8\">\n              <h1 className=\"text-3xl font-bold text-emerald-50\">Contratos</h1>\n              <p className=\"text-emerald-200/80\">Gestiona y descarga tus contratos</p>\n            </div>\n\n            {/* Filtros Contratos */}\n            <div className=\"mb-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowCFilters(!showCFilters)}\n                  className=\"border-emerald-500/20 text-emerald-50 hover:bg-emerald-900/10\"\n                >\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  {showCFilters ? \"Ocultar Filtros\" : \"Mostrar Filtros\"}\n                </Button>\n\n                {(Object.values(cFilters).some((v) => v !== \"\") || cSort !== \"\") && (\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => {\n                      setCFilters({ search: \"\", estado: \"\", dateFrom: \"\", dateTo: \"\", tipo: \"\" });\n                      setCSort(\"\");\n                    }}\n                    className=\"text-emerald-200 hover:text-emerald-50\"\n                  >\n                    <X className=\"w-4 h-4 mr-2\" />\n                    Limpiar Filtros\n                  </Button>\n                )}\n              </div>\n\n              {showCFilters && (\n                <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-emerald-50\">Búsqueda</Label>\n                        <Input\n                          placeholder=\"Buscar por título o descripción…\"\n                          value={cFilters.search}\n                          onChange={(e) => setCFilters({ ...cFilters, search: e.target.value })}\n                          className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-emerald-50\">Estado</Label>\n                        <Select value={cFilters.estado} onValueChange={(v) => setCFilters({ ...cFilters, estado: v })}>\n                          <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                            <SelectValue placeholder=\"Todos\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"Disponible\">Disponible</SelectItem>\n                            <SelectItem value=\"No disponible\">No disponible</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-emerald-50\">Categoría</Label>\n                        <Select value={cFilters.tipo} onValueChange={(v) => setCFilters({ ...cFilters, tipo: v })}>\n                          <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                            <SelectValue placeholder=\"Todas\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"Producto\">Producto</SelectItem>\n                            <SelectItem value=\"Legal\">Legal</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-emerald-50\">Desde</Label>\n                        <Input\n                          type=\"date\"\n                          value={cFilters.dateFrom}\n                          onChange={(e) => setCFilters({ ...cFilters, dateFrom: e.target.value })}\n                          className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-emerald-50\">Hasta</Label>\n                        <Input\n                          type=\"date\"\n                          value={cFilters.dateTo}\n                          onChange={(e) => setCFilters({ ...cFilters, dateTo: e.target.value })}\n                          className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-emerald-50\">Ordenar por</Label>\n                        <Select value={cSort} onValueChange={(v) => setCSort(v as typeof cSort)}>\n                          <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                            <SelectValue placeholder=\"Sin orden\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"dateDesc\">Fecha (Más recientes)</SelectItem>\n                            <SelectItem value=\"dateAsc\">Fecha (Más antiguos)</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n\n            {/* Listado de contratos filtrados */}\n            <div className=\"space-y-4\">\n              {contratosCliente\n                .filter((c) => {\n                  const q = cFilters.search.toLowerCase();\n                  const matchesSearch =\n                    !q ||\n                    c.titulo.toLowerCase().includes(q) ||\n                    c.descripcion.toLowerCase().includes(q);\n\n                  const matchesEstado = !cFilters.estado || c.estado === cFilters.estado;\n                  const matchesTipo = !cFilters.tipo || c.categoria === cFilters.tipo;\n\n                  const t = new Date(c.fecha).getTime();\n                  const fromOk = !cFilters.dateFrom || t >= new Date(cFilters.dateFrom).getTime();\n                  const toOk = !cFilters.dateTo || t <= new Date(cFilters.dateTo).getTime();\n\n                  return matchesSearch && matchesEstado && matchesTipo && fromOk && toOk;\n                })\n                .sort((a, b) => {\n                  if (cSort === \"dateDesc\") return new Date(b.fecha).getTime() - new Date(a.fecha).getTime();\n                  if (cSort === \"dateAsc\") return new Date(a.fecha).getTime() - new Date(b.fecha).getTime();\n                  return 0;\n                })\n                .map((doc, index) => (\n                  <Card key={index} className=\"bg-black/40 border border-emerald-500/15 hover:border-emerald-400 transition-all rounded-2xl\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-3 mb-2\">\n                            <div className=\"w-10 h-10 bg-emerald-500 rounded-lg flex items-center justify-center\">\n                              <Download className=\"h-5 w-5 text-black\" />\n                            </div>\n                            <div>\n                              <h4 className=\"text-lg font-semibold text-emerald-50\">{doc.titulo}</h4>\n                              <p className=\"text-emerald-200/80 text-sm\">{doc.descripcion}</p>\n                            </div>\n                          </div>\n                          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 text-sm mt-4\">\n                            <div>\n                              <p className=\"text-emerald-200/80\">Tipo</p>\n                              <p className=\"text-emerald-50 font-medium\">{doc.tipo}</p>\n                            </div>\n                            <div>\n                              <p className=\"text-emerald-200/80\">Fecha</p>\n                              <p className=\"text-emerald-50 font-medium\">\n                                {new Date(doc.fecha).toLocaleDateString(\"es-ES\")}\n                              </p>\n                            </div>\n                            <div>\n                              <p className=\"text-emerald-200/80\">Estado</p>\n                              <Badge className=\"bg-emerald-500 text-black\">{doc.estado}</Badge>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"ml-6\">\n                          <Button\n                            className=\"rounded-xl bg-gradient-to-r from-emerald-600 to-emerald-500 hover:from-emerald-500 hover:to-emerald-400 text-white px-6\"\n                            onClick={() => {\n                              const link = document.createElement('a');\n                              link.href = doc.archivo;\n                              link.download = `${doc.titulo}.${doc.tipo.toLowerCase()}`;\n                              document.body.appendChild(link);\n                              link.click();\n                              document.body.removeChild(link);\n                              \n                              // Registrar actividad de descarga\n                              logActivity(`Contrato descargado: ${doc.titulo}`);\n                            }}\n                          >\n                            <Download className=\"h-4 w-4 mr-2\" />\n                            Descargar\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n\n              {/* Placeholder si no hay resultados */}\n              {contratosCliente\n                .filter((c) => {\n                  const q = cFilters.search.toLowerCase();\n                  const matchesSearch =\n                    !q ||\n                    c.titulo.toLowerCase().includes(q) ||\n                    c.descripcion.toLowerCase().includes(q);\n                  const matchesEstado = !cFilters.estado || c.estado === cFilters.estado;\n                  const matchesTipo = !cFilters.tipo || c.categoria === cFilters.tipo;\n                  const t = new Date(c.fecha).getTime();\n                  const fromOk = !cFilters.dateFrom || t >= new Date(cFilters.dateFrom).getTime();\n                  const toOk = !cFilters.dateTo || t <= new Date(cFilters.dateTo).getTime();\n                  return matchesSearch && matchesEstado && matchesTipo && fromOk && toOk;\n                }).length === 0 && (\n                <Card className=\"bg-black/30 border border-emerald-500/15 border-dashed rounded-2xl\">\n                  <CardContent className=\"p-8\">\n                    <div className=\"text-center text-emerald-200/80\">\n                      <Download className=\"h-12 w-12 mx-auto mb-4 text-emerald-400\" />\n                      <p className=\"text-lg mb-2 text-emerald-50/90\">No hay contratos para los filtros aplicados</p>\n                      <p className=\"text-sm\">Ajusta los filtros para ver más resultados.</p>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </div>\n        ) : activeTab === \"deposito\" ? (\n          <DepositoView \n            setHasActiveDeposit={setHasActiveDeposit} \n            setActiveTab={setActiveTab}\n            setProfileActiveTab={setProfileActiveTab}\n          />\n        ) : activeTab === \"retiro\" ? (\n          <RetiroView hasActiveDeposit={hasActiveDeposit} />\n        ) : (\n          /* ------------------------------- INICIO (home) ------------------------------- */\n          <div>\n            <div className=\"mb-8\">\n              <h1 className=\"text-3xl font-bold text-emerald-50\">Dashboard</h1>\n              <p className=\"text-emerald-200/80\">Vista general de tu actividad</p>\n            </div>\n\n            {/* KPIs (3 tarjetas) */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n              {kpis.map((kpi, i) => (\n                <Card\n                  key={i}\n                  className=\"bg-black/40 border border-emerald-500/15 rounded-2xl hover:shadow-[0_16px_40px_-20px_rgba(16,185,129,0.45)] transition-all\"\n                >\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-emerald-200/80 text-sm\">{kpi.title}</p>\n                        <p className=\"text-2xl font-bold text-emerald-50\">{kpi.value}</p>\n                      </div>\n                      <div className={`flex items-center space-x-1 ${kpi.trending === \"up\" ? \"text-emerald-400\" : \"text-red-400\"}`}>\n                        {kpi.trending === \"up\" ? <TrendingUp className=\"h-4 w-4\" /> : <TrendingDown className=\"h-4 w-4\" />}\n                        <span className=\"text-sm\">{kpi.change}</span>\n                      </div>\n                    </div>\n\n                    {kpi.title === \"Capital Invertido\" && (\n                      <ProgressBar percent={percentCapital} monthsRemaining={mesesRestantes} />\n                    )}\n                    {kpi.title === \"Progreso en Meses\" && (\n                      <ProgressBar percent={percentMeses} monthsRemaining={mesesRestantes} />\n                    )}\n\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Producto destacado + gráfica (proyección a 10 años) */}\n            <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl mb-8\">\n              <CardContent className=\"p-8\">\n                <div className=\"text-center mb-6\">\n                  <h2 className=\"text-2xl font-bold text-emerald-50 mb-2\">Un Producto Sólido, Simple y Rentable</h2>\n                  <p className=\"text-emerald-200/80 max-w-3xl mx-auto\">\n                    Seguridad, rentabilidad y simplicidad. Ideal para hacer crecer tu capital de forma predecible.\n                  </p>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n                  {[\n                    { icon: <TrendingUp className=\"h-6 w-6 text-white\" />, title: \"Rentabilidad Garantizada\", value: \"9% Anual\", note: \"Retorno fijo\" },\n                    { icon: <TrendingUp className=\"h-6 w-6 text-white\" />, title: \"Capital Protegido\", value: \"100%\", note: \"Garantía bancaria\" },\n                    { icon: <Calendar className=\"h-6 w-6 text-white\" />, title: \"Flexibilidad\", value: \"1-5 años\", note: \"Plazos adaptables\" },\n                  ].map((b, idx) => (\n                    <div\n                      key={idx}\n                      className=\"bg-black/40 p-6 rounded-xl text-center border border-emerald-500/15 hover:border-emerald-400 hover:shadow-[0_16px_40px_-20px_rgba(16,185,129,0.45)] transition-all rounded-xl\">\n                      <div className=\"mx-auto mb-3 w-10 h-10 rounded-full bg-emerald-600/20 flex items-center justify-center\">\n                        {b.icon}\n                      </div>\n                      <p className=\"text-emerald-200/80 text-sm\">{b.title}</p>\n                      <p className=\"text-emerald-50 font-bold text-lg\">{b.value}</p>\n                      <p className=\"text-emerald-200/70 text-xs\">{b.note}</p>\n                    </div>\n                  ))}\n                </div>\n\n                {/* Proyección */}\n                <div className=\"rounded-xl border border-emerald-500/15 bg-black/30 p-4\">\n                  <CompoundInterestChart />\n                </div>\n                </CardContent>\n              </Card>\n\n              {/* Actividad reciente */}\n            <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl\">\n              <CardHeader>\n                <CardTitle className=\"text-emerald-50\">Actividad reciente</CardTitle>\n                <CardDescription className=\"text-emerald-200/80\">\n                  Resumen de tus últimas acciones\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-4\">\n                  {recentActivityLogs.length > 0 ? (\n                    recentActivityLogs.map((activity: any) => (\n                      <div\n                        key={activity.id}\n                        className=\"flex items-center justify-between rounded-xl border border-emerald-500/10 bg-black/30 px-4 py-3\"\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-9 h-9 rounded-lg bg-emerald-600/20 flex items-center justify-center\">\n                            <FileText className=\"w-4 h-4 text-emerald-400\" />\n                          </div>\n                          <p className=\"text-sm text-emerald-50\">{activity.action}</p>\n                        </div>\n\n                        {/* Fecha y hora separados */}\n                        <div className=\"flex items-center gap-3 text-xs text-emerald-200/70\">\n                          <div className=\"flex items-center gap-1\">\n                            <Calendar className=\"h-3.5 w-3.5\" />\n                            <span>\n                              {new Date(activity.createdAt).toLocaleDateString(\"es-ES\")}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <span>⏰</span>\n                            <span>\n                              {new Date(activity.createdAt).toLocaleTimeString(\"es-ES\", {\n                                hour: \"2-digit\",\n                                minute: \"2-digit\",\n                              })}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center text-emerald-200/60 py-4\">\n                      <p>No hay actividades recientes</p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n\n              {/* Acciones rápidas */}\n              <div className=\"mt-8\">\n                <h2 className=\"text-xl font-bold text-emerald-50 mb-4\">Acciones Rápidas</h2>\n                <div className=\"flex flex-col sm:flex-row gap-4\">\n                  <Button onClick={handleDownloadStatement} className=\"rounded-xl bg-emerald-700 hover:bg-emerald-600 text-white\">\n                    <Download className=\"h-4 w-4 mr-2\" />\n                    Descargar Estado de Cuenta\n                  </Button>\n                  <Button\n                    onClick={handleCalculateInvestment}\n                    className=\"rounded-xl bg-gradient-to-r from-emerald-600 to-emerald-500 hover:from-emerald-500 hover:to-emerald-400 text-white\"\n                  >\n                    <Calculator className=\"h-4 w-4 mr-2\" />\n                    Calcular Nueva Inversión\n                  </Button>\n                </div>\n              </div>\n            </div>\n          )}       \n        </main>\n\n        {/* Modales */}\n        {showCalculator && <InvestmentCalculator onClose={() => setShowCalculator(false)} onLogActivity={logActivity} />}\n\n        {/* Documents Dialog */}\n        <Dialog open={showDocumentsDialog} onOpenChange={handleCloseDocumentsDialog}>\n          <DialogContent className=\"bg-black/40 border border-emerald-500/15 text-emerald-50 max-w-4xl\">\n            <DialogHeader>\n              <DialogTitle>Mis Documentos KYC</DialogTitle>\n              <DialogDescription className=\"text-emerald-200/80\">\n                Documentos subidos para verificación\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"grid gap-4 py-4\">\n              {viewingDocuments && viewingDocuments.length > 0 ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {viewingDocuments.map((docUrl, index) => (\n                    <div key={index} className=\"border border-emerald-500/20 rounded-lg p-4 bg-black/20\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <div className=\"text-sm text-emerald-200/80\">\n                          Documento {index + 1}\n                        </div>\n                        <Badge className=\"bg-emerald-500/20 text-emerald-200\">\n                          {docUrl.toLowerCase().includes('.pdf') ? 'PDF' : 'Imagen'}\n                        </Badge>\n                      </div>\n                      \n                      <div className=\"flex flex-col items-center space-y-3\">\n                        <FileText className=\"w-16 h-16 text-emerald-400\" />\n                        <div className=\"text-sm text-emerald-200/80 text-center\">\n                          <p className=\"font-medium\">{docUrl.split('/').pop()}</p>\n                          <p className=\"text-xs text-emerald-200/60\">\n                            {docUrl.toLowerCase().includes('.pdf') ? 'Archivo PDF' : 'Imagen'}\n                          </p>\n                        </div>\n                        <Button\n                          size=\"sm\"\n                          className=\"bg-gradient-to-r from-emerald-600 to-emerald-500 hover:from-emerald-500 hover:to-emerald-400 text-white\"\n                          onClick={() => {\n                            // Create a temporary download link\n                            const link = document.createElement('a');\n                            link.href = docUrl;\n                            link.download = docUrl.split('/').pop() || 'documento';\n                            link.target = '_blank';\n                            document.body.appendChild(link);\n                            link.click();\n                            document.body.removeChild(link);\n                          }}\n                        >\n                          <Download className=\"w-4 h-4 mr-2\" />\n                          Descargar\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-center text-emerald-200/60\">No hay documentos disponibles</p>\n              )}\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    );\n}\n\n// Componente para el historial de actividad del cliente\nfunction HistorialActivityView({ onBack }: { onBack: () => void }) {\n  // Hook para obtener las actividades del cliente\n  const { data: activityData, isLoading } = useQuery({\n    queryKey: ['/api/client/activity-logs'],\n    enabled: true,\n  });\n\n  const activityLogs = activityData?.logs || [];\n\n  return (\n    <div className=\"mb-8\">\n      <div className=\"flex items-center gap-4 mb-6\">\n        <Button\n          variant=\"outline\"\n          onClick={onBack}\n          className=\"border-emerald-500/30 text-emerald-50 hover:bg-emerald-900/10\"\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Volver\n        </Button>\n        <h2 className=\"text-2xl font-bold text-emerald-50\">Historial de Actividad</h2>\n      </div>\n\n      {/* Descripción */}\n      <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl mb-6\">\n        <CardContent className=\"p-6\">\n          <p className=\"text-emerald-200/80\">\n            Aquí puedes ver un registro de todas las actividades realizadas en tu cuenta.\n          </p>\n        </CardContent>\n      </Card>\n\n      {/* Lista de actividades */}\n      {isLoading ? (\n        <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl\">\n          <CardContent className=\"p-6\">\n            <div className=\"text-center text-emerald-200/80\">\n              <div className=\"animate-spin w-8 h-8 border-2 border-emerald-400 border-t-transparent rounded-full mx-auto mb-4\"></div>\n              <p>Cargando historial de actividad...</p>\n            </div>\n          </CardContent>\n        </Card>\n      ) : activityLogs.length > 0 ? (\n        <div className=\"space-y-4\">\n          {activityLogs.map((activity: any) => (\n            <Card key={activity.id} className=\"bg-black/40 border border-emerald-500/15 hover:border-emerald-400 transition-all rounded-2xl\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"w-10 h-10 bg-emerald-500/20 rounded-lg flex items-center justify-center\">\n                      <FileText className=\"h-5 w-5 text-emerald-400\" />\n                    </div>\n                    <div>\n                      <h4 className=\"text-lg font-semibold text-emerald-50 mb-1\">\n                        {activity.action}\n                      </h4>\n                      <div className=\"flex items-center gap-4 text-sm text-emerald-200/80\">\n                        <div className=\"flex items-center gap-1\">\n                          <Calendar className=\"h-4 w-4\" />\n                          <span>\n                            {new Date(activity.createdAt).toLocaleDateString(\"es-ES\")}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <span>⏰</span>\n                          <span>\n                            {new Date(activity.createdAt).toLocaleTimeString(\"es-ES\", {\n                              hour: \"2-digit\",\n                              minute: \"2-digit\"\n                            })}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <Card className=\"bg-black/30 border border-emerald-500/15 border-dashed rounded-2xl\">\n          <CardContent className=\"p-8\">\n            <div className=\"text-center text-emerald-200/80\">\n              <FileText className=\"h-12 w-12 mx-auto mb-4 text-emerald-400\" />\n              <p className=\"text-lg mb-2 text-emerald-50/90\">No hay actividad registrada</p>\n              <p className=\"text-sm\">Cuando realices acciones en tu cuenta, aparecerán aquí.</p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n\n","size_bytes":132606},"client/src/pages/home.tsx":{"content":"import Header from \"@/components/header\";\nimport Hero from \"@/components/hero\";\nimport Security from \"@/components/security\";\nimport Downloads from \"@/components/downloads\";\nimport FinalCTA from \"@/components/final-cta\";\nimport Footer from \"@/components/footer\";\n\nimport { useScrollToTop } from \"@/hooks/useScrollToTop\";\n\nexport default function Home() {\n  useScrollToTop();\n  return (\n    <div className={[\n      \"min-h-screen text-white relative\",\n      \"bg-gradient-to-br from-black via-[#0A1713] to-[#0E2A1F]\",\n      \"before:pointer-events-none before:absolute before:inset-0\",\n      \"before:bg-[radial-gradient(80%_60%_at_110%_-10%,rgba(16,185,129,0.18),transparent),radial-gradient(60%_40%_at_-20%_110%,rgba(16,185,129,0.12),transparent)]\",\n    ].join(\" \")}>\n      <div className=\"relative z-10\">\n        <Header />\n        <Hero />\n        <Security />\n        <Downloads />\n        <FinalCTA />\n        <Footer />\n      </div>\n    </div>\n  );\n}\n","size_bytes":953},"client/src/pages/inversiones.tsx":{"content":"import Header from \"@/components/header\";\nimport Strategy from \"@/components/strategy\";\nimport Comparison from \"@/components/comparison\";\nimport Process from \"@/components/process\";\nimport Footer from \"@/components/footer\";\n\nimport { useScrollToTop } from \"@/hooks/useScrollToTop\";\n\nexport default function Inversiones() {\n  useScrollToTop();\n  return (\n    <div className={[\n      \"min-h-screen text-white relative\",\n      \"bg-gradient-to-br from-black via-[#0A1713] to-[#0E2A1F]\",\n      \"before:pointer-events-none before:absolute before:inset-0\",\n      \"before:bg-[radial-gradient(80%_60%_at_110%_-10%,rgba(16,185,129,0.18),transparent),radial-gradient(60%_40%_at_-20%_110%,rgba(16,185,129,0.12),transparent)]\",\n    ].join(\" \")}>\n      <div className=\"relative z-10\">\n        <Header />\n        <main className=\"pt-32\">\n        <Strategy />\n        <Process />\n        <Comparison />\n      </main>\n      <Footer />\n      </div>\n    </div>\n  );\n}","size_bytes":948},"client/src/pages/login.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  User,\n  Lock,\n  Eye,\n  EyeOff,\n  ArrowLeft,\n  ShieldCheck,\n  Sparkles,\n  Clock,\n  HelpCircle,\n  Mail,\n  Github,\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport logoImg from \"@/assets/Logo-removeBG_1752488347081.png\";\nimport { useScrollToTop } from \"@/hooks/useScrollToTop\";\n\n// Variante por defecto\nconst DEFAULT_VARIANT: 1 | 2 | 3 = 1;\n\nexport default function Login() {\n  useScrollToTop();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { login, isLoading } = useAuth();\n\n  const [loginForm, setLoginForm] = useState({ email: \"\", password: \"\" });\n  const [showPassword, setShowPassword] = useState(false);\n  const [variant, setVariant] = useState<1 | 2 | 3>(DEFAULT_VARIANT);\n\n  useEffect(() => {\n    if (typeof window !== \"undefined\") {\n      const sp = new URLSearchParams(window.location.search);\n      const v = Number(sp.get(\"v\") || sp.get(\"variant\"));\n      if (v === 1 || v === 2 || v === 3) setVariant(v as 1 | 2 | 3);\n      else setVariant(DEFAULT_VARIANT);\n    }\n  }, []);\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!loginForm.email || !loginForm.password) {\n      toast({\n        title: \"Campos requeridos\",\n        description: \"Por favor complete todos los campos.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const result = await login(loginForm.email, loginForm.password);\n\n    if (result.success) {\n      toast({ title: \"¡Bienvenido!\", description: \"Has iniciado sesión correctamente\" });\n      setLocation(\"/dashboard\");\n    } else {\n      toast({\n        title: \"Credenciales incorrectas\",\n        description: result.error || \"Email o contraseña incorrectos\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // ---------- Bloques UI ----------\n  const BrandHeader = () => (\n    <div className=\"flex flex-col items-center text-center\">\n      <img\n        src={logoImg}\n        alt=\"Logo\"\n        className=\"w-14 h-14 md:w-36 md:h-36 mb-3 drop-shadow-[0_0_18px_rgba(16,185,129,0.35)]\"\n      />\n      <div className=\"space-y-0.5\">\n        <h1 className=\"font-cormorant text-2xl md:text-3xl font-bold text-emerald-50 leading-tight\">\n          Nakama Partner\n        </h1>\n        <p className=\"text-emerald-300 text-sm md:text-base tracking-wide\">Acceso Corporativo</p>\n      </div>\n    </div>\n  );\n\n  const BrandInline = () => (\n    <div className=\"flex items-center gap-3 md:gap-4 mb-5\">\n      <img\n        src={logoImg}\n        alt=\"Logo\"\n        className=\"w-8 h-8 md:w-10 md:h-10 drop-shadow-[0_0_12px_rgba(16,185,129,0.35)]\"\n      />\n      <div>\n        <h2 className=\"font-cormorant text-xl md:text-2xl font-bold text-emerald-50 leading-tight\">\n          Nakama Partne\n        </h2>\n        <p className=\"text-emerald-400 text-xs md:text-sm\">Portal de Asesores</p>\n      </div>\n    </div>\n  );\n\n  // ---- FORM CARDS (compactados) ----\n  const LoginFormCard = () => (\n    <Card\n      className={[\n        \"rounded-3xl bg-black/40 backdrop-blur-sm\",\n        \"border border-emerald-500/15\",\n        \"shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_24px_70px_-20px_rgba(16,185,129,0.28)]\",\n      ].join(\" \")}\n    >\n      {/* ⬇️ Centrado perfecto del título y descripción en X e Y */}\n      <CardHeader className=\"text-center\">\n        <div className=\"flex flex-col items-center justify-center min-h-[80px] space-y-2 md:space-y-3\">\n          <CardTitle className=\"text-xl md:text-2xl text-emerald-50\">Iniciar Sesión</CardTitle>\n          <CardDescription className=\"text-emerald-200/80 text-xs md:text-sm\">\n            Ingresa tus credenciales para continuar\n          </CardDescription>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"p-4 md:p-6\">\n        <form onSubmit={handleLogin} className=\"space-y-4 md:space-y-5\">\n          {/* Email */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\" className=\"text-emerald-100 text-sm md:text-base\">\n              Email\n            </Label>\n            <div className=\"relative\">\n              <User className=\"absolute left-4 top-1/2 -translate-y-1/2 h-5 w-5 text-emerald-300/80\" />\n              <Input\n                id=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                placeholder=\"tu@email.com\"\n                value={loginForm.email}\n                onChange={(e) =>\n                  setLoginForm((prev) => ({ ...prev, email: e.target.value }))\n                }\n                className={[\n                  \"h-11 md:h-12 pl-12 pr-4 text-[15px] md:text-base\",\n                  \"bg-emerald-950/40 text-emerald-50 placeholder:text-emerald-200/50\",\n                  \"border border-emerald-500/20\",\n                  \"focus-visible:ring-2 focus-visible:ring-emerald-400 focus-visible:ring-offset-0\",\n                ].join(\" \")}\n                required\n              />\n            </div>\n          </div>\n\n          {/* Password */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\" className=\"text-emerald-100 text-sm md:text-base\">\n              Contraseña\n            </Label>\n            <div className=\"relative\">\n              <Lock className=\"absolute left-4 top-1/2 -translate-y-1/2 h-5 w-5 text-emerald-300/80\" />\n              <Input\n                id=\"password\"\n                type={showPassword ? \"text\" : \"password\"}\n                autoComplete=\"current-password\"\n                placeholder=\"Tu contraseña\"\n                value={loginForm.password}\n                onChange={(e) =>\n                  setLoginForm((prev) => ({ ...prev, password: e.target.value }))\n                }\n                className={[\n                  \"h-11 md:h-12 pl-12 pr-12 text-[15px] md:text-base\",\n                  \"bg-emerald-950/40 text-emerald-50 placeholder:text-emerald-200/50\",\n                  \"border border-emerald-500/20\",\n                  \"focus-visible:ring-2 focus-visible:ring-emerald-400 focus-visible:ring-offset-0\",\n                ].join(\" \")}\n                required\n              />\n              <button\n                type=\"button\"\n                onClick={() => setShowPassword((s) => !s)}\n                className=\"absolute right-4 top-1/2 -translate-y-1/2 text-emerald-300/80 hover:text-emerald-200\"\n                aria-label={showPassword ? \"Ocultar contraseña\" : \"Mostrar contraseña\"}\n              >\n                {showPassword ? <EyeOff className=\"h-5 w-5\" /> : <Eye className=\"h-5 w-5\" />}\n              </button>\n            </div>\n          </div>\n\n          {/* Submit */}\n          <Button\n            type=\"submit\"\n            className={[\n              \"w-full rounded-2xl h-11 md:h-12\",\n              \"bg-gradient-to-r from-emerald-600 to-emerald-500\",\n              \"hover:from-emerald-500 hover:to-emerald-400\",\n              \"text-[15px] md:text-base font-semibold\",\n              \"shadow-[0_12px_34px_-10px_rgba(16,185,129,0.55)]\",\n            ].join(\" \")}\n            disabled={isLoading}\n          >\n            {isLoading ? \"Ingresando...\" : \"Iniciar Sesión\"}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n\n  const LoginFormCardV2 = () => (\n    <div className=\"relative group\">\n      {/* Borde degradado sutil */}\n      <div className=\"pointer-events-none absolute -inset-[1.2px] rounded-[20px] bg-gradient-to-r from-emerald-500/30 via-emerald-400/20 to-emerald-500/30 opacity-70 group-hover:opacity-100 blur-[2px] transition-opacity\" />\n      <Card\n        className={[\n          \"relative rounded-[20px] bg-black/50 backdrop-blur-md\",\n          \"border border-emerald-500/15\",\n          \"shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_24px_70px_-20px_rgba(16,185,129,0.35)]\",\n        ].join(\" \")}\n      >\n        <CardHeader className=\"space-y-1 text-left pb-3 md:pb-4\">\n          <CardTitle className=\"text-[20px] md:text-[22px] leading-tight text-emerald-50\">\n            Accede a tu cuenta\n          </CardTitle>\n          <CardDescription className=\"text-emerald-200/80 text-[14px]\">\n            Usa tu correo corporativo para iniciar sesión\n          </CardDescription>\n        </CardHeader>\n\n        <CardContent className=\"pt-0 pb-6 md:pb-7\">\n          <form onSubmit={handleLogin} className=\"space-y-4.5 md:space-y-5\">\n            {/* Email */}\n            <div className=\"space-y-1.5\">\n              <Label htmlFor=\"email\" className=\"text-emerald-100 text-sm md:text-[15px]\">\n                Email\n              </Label>\n              <div className=\"relative\">\n                <User className=\"absolute left-4 top-1/2 -translate-y-1/2 h-[18px] w-[18px] text-emerald-300/80\" />\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  autoComplete=\"email\"\n                  placeholder=\"tu@email.com\"\n                  value={loginForm.email}\n                  onChange={(e) =>\n                    setLoginForm((prev) => ({ ...prev, email: e.target.value }))\n                  }\n                  className={[\n                    \"h-11 md:h-12 pl-11 md:pl-12 pr-4 text-[14.5px] md:text-[15px] leading-none\",\n                    \"bg-emerald-950/40 text-emerald-50 placeholder:text-emerald-200/50\",\n                    \"border border-emerald-500/20\",\n                    \"focus-visible:ring-2 focus-visible:ring-emerald-400 focus-visible:ring-offset-0\",\n                  ].join(\" \")}\n                  required\n                />\n              </div>\n            </div>\n\n            {/* Password */}\n            <div className=\"space-y-1.5\">\n              <Label htmlFor=\"password\" className=\"text-emerald-100 text-sm md:text-[15px]\">\n                Contraseña\n              </Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-4 top-1/2 -translate-y-1/2 h-[18px] w-[18px] text-emerald-300/80\" />\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  autoComplete=\"current-password\"\n                  placeholder=\"Tu contraseña\"\n                  value={loginForm.password}\n                  onChange={(e) =>\n                    setLoginForm((prev) => ({ ...prev, password: e.target.value }))\n                  }\n                  className={[\n                    \"h-11 md:h-12 pl-11 md:pl-12 pr-11 md:pr-12 text-[14.5px] md:text-[15px] leading-none\",\n                    \"bg-emerald-950/40 text-emerald-50 placeholder:text-emerald-200/50\",\n                    \"border border-emerald-500/20\",\n                    \"focus-visible:ring-2 focus-visible:ring-emerald-400 focus-visible:ring-offset-0\",\n                  ].join(\" \")}\n                  required\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword((s) => !s)}\n                  className=\"absolute right-4 top-1/2 -translate-y-1/2 text-emerald-300/80 hover:text-emerald-200\"\n                  aria-label={showPassword ? \"Ocultar contraseña\" : \"Mostrar contraseña\"}\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"h-[18px] w-[18px]\" />\n                  ) : (\n                    <Eye className=\"h-[18px] w-[18px]\" />\n                  )}\n                </button>\n              </div>\n            </div>\n\n            {/* Submit */}\n            <Button\n              type=\"submit\"\n              className={[\n                \"w-full rounded-xl h-11 md:h-12\",\n                \"bg-gradient-to-r from-emerald-600 to-emerald-500\",\n                \"hover:from-emerald-500 hover:to-emerald-400\",\n                \"text-[15px] font-semibold\",\n                \"shadow-[0_12px_34px_-10px_rgba(16,185,129,0.55)]\",\n              ].join(\" \")}\n              disabled={isLoading}\n            >\n              {isLoading ? \"Ingresando...\" : \"Iniciar Sesión\"}\n            </Button>\n\n            <p className=\"text-[11.5px] text-emerald-200/70 text-center\">\n              Al continuar aceptas los Términos y la Política de Privacidad.\n            </p>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const LoginFormCardV3Centered = () => (\n    <Card\n      className={[\n        \"rounded-3xl bg-black/45 backdrop-blur-md\",\n        \"border border-emerald-500/15\",\n        \"shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_24px_70px_-20px_rgba(16,185,129,0.30)]\",\n      ].join(\" \")}\n    >\n      {/* ⬇️ Centrado perfecto del título y descripción en X e Y */}\n      <CardHeader className=\"text-center\">\n        <div className=\"flex flex-col items-center justify-center min-h-[100px] space-y-2 md:space-y-3\">\n          <CardTitle className=\"text-2xl md:text-3xl text-emerald-50\">Iniciar Sesión</CardTitle>\n          <CardDescription className=\"text-emerald-200/80 text-sm md:text-base\">\n            Ingresa tus credenciales para continuar\n          </CardDescription>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"p-6 md:p-8\">\n        <form onSubmit={handleLogin} className=\"space-y-5 md:space-y-6 max-w-sm mx-auto\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\" className=\"block text-left text-emerald-100 text-sm md:text-base\">\n              Email\n            </Label>\n            <div className=\"relative\">\n              <User className=\"absolute left-4 top-1/2 -translate-y-1/2 h-5 w-5 text-emerald-300/80\" />\n              <Input\n                id=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                placeholder=\"tu@email.com\"\n                value={loginForm.email}\n                onChange={(e) =>\n                  setLoginForm((prev) => ({ ...prev, email: e.target.value }))\n                }\n                className={[\n                  \"h-11 md:h-12 pl-12 pr-4 text-[15px] md:text-base\",\n                  \"bg-emerald-950/40 text-emerald-50 placeholder:text-emerald-200/50\",\n                  \"border border-emerald-500/20\",\n                  \"focus-visible:ring-2 focus-visible:ring-emerald-400 focus-visible:ring-offset-0\",\n                ].join(\" \")}\n                required\n              />\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\" className=\"block text-left text-emerald-100 text-sm md:text-base\">\n              Contraseña\n            </Label>\n            <div className=\"relative\">\n              <Lock className=\"absolute left-4 top-1/2 -translate-y-1/2 h-5 w-5 text-emerald-300/80\" />\n              <Input\n                id=\"password\"\n                type={showPassword ? \"text\" : \"password\"}\n                autoComplete=\"current-password\"\n                placeholder=\"Tu contraseña\"\n                value={loginForm.password}\n                onChange={(e) =>\n                  setLoginForm((prev) => ({ ...prev, password: e.target.value }))\n                }\n                className={[\n                  \"h-11 md:h-12 pl-12 pr-12 text-[15px] md:text-base\",\n                  \"bg-emerald-950/40 text-emerald-50 placeholder:text-emerald-200/50\",\n                  \"border border-emerald-500/20\",\n                  \"focus-visible:ring-2 focus-visible:ring-emerald-400 focus-visible:ring-offset-0\",\n                ].join(\" \")}\n                required\n              />\n              <button\n                type=\"button\"\n                onClick={() => setShowPassword((s) => !s)}\n                className=\"absolute right-4 top-1/2 -translate-y-1/2 text-emerald-300/80 hover:text-emerald-200\"\n                aria-label={showPassword ? \"Ocultar contraseña\" : \"Mostrar contraseña\"}\n              >\n                {showPassword ? <EyeOff className=\"h-5 w-5\" /> : <Eye className=\"h-5 w-5\" />}\n              </button>\n            </div>\n          </div>\n\n          <Button\n            type=\"submit\"\n            className={[\n              \"w-full rounded-2xl h-11 md:h-12\",\n              \"bg-gradient-to-r from-emerald-600 to-emerald-500\",\n              \"hover:from-emerald-500 hover:to-emerald-400\",\n              \"text-[15px] md:text-base font-semibold\",\n              \"shadow-[0_12px_34px_-10px_rgba(16,185,129,0.55)]\",\n            ].join(\" \")}\n            disabled={isLoading}\n          >\n            {isLoading ? \"Ingresando...\" : \"Iniciar Sesión\"}\n          </Button>\n\n          <p className=\"text-center text-[11.5px] text-emerald-200/70\">\n            Al continuar aceptas los Términos y la Política de Privacidad.\n          </p>\n        </form>\n      </CardContent>\n    </Card>\n  );\n\n  const BackButton = () => (\n    <div className=\"absolute top-6 left-6\">\n      <Button\n        onClick={() => setLocation(\"/\")}\n        variant=\"ghost\"\n        className=\"text-emerald-100 hover:bg-emerald-900/20 hover:text-emerald-50 gap-2 text-sm md:text-base\"\n        aria-label=\"Volver al inicio\"\n      >\n        <ArrowLeft className=\"h-5 w-5\" />\n        Volver al Inicio\n      </Button>\n    </div>\n  );\n\n  const ValueItem = ({ icon: Icon, title, desc }: { icon: any; title: string; desc: string }) => (\n    <div className=\"flex items-start gap-3\">\n      <div className=\"mt-0.5\">\n        <Icon className=\"h-5 w-5 text-emerald-400\" />\n      </div>\n      <div>\n        <p className=\"text-emerald-50 font-medium text-[15px]\">{title}</p>\n        <p className=\"text-emerald-200/80 text-sm\">{desc}</p>\n      </div>\n    </div>\n  );\n\n  const SSOButtons = () => (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n      <Button\n        variant=\"outline\"\n        className=\"w-full bg-white/5 border-emerald-500/20 text-emerald-50 hover:bg-white/10\"\n        aria-label=\"Continuar con Google\"\n      >\n        <Sparkles className=\"mr-2 h-4 w-4\" /> Google\n      </Button>\n      <Button\n        variant=\"outline\"\n        className=\"w-full bg-white/5 border-emerald-500/20 text-emerald-50 hover:bg-white/10\"\n        aria-label=\"Continuar con GitHub\"\n      >\n        <Github className=\"mr-2 h-4 w-4\" /> GitHub\n      </Button>\n    </div>\n  );\n\n  const HelpCard = () => (\n    <Card className=\"rounded-2xl bg-white/5 backdrop-blur-sm border border-emerald-500/15\">\n      <CardHeader className=\"pb-2\">\n        <div className=\"flex items-center gap-2\">\n          <HelpCircle className=\"h-5 w-5 text-emerald-300\" />\n          <CardTitle className=\"text-emerald-50 text-lg\">¿Necesitas ayuda?</CardTitle>\n        </div>\n        <CardDescription className=\"text-emerald-200/80 text-sm\">\n          Estamos disponibles para resolver incidencias de acceso.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"pt-0 space-y-3\">\n        <Button variant=\"ghost\" className=\"w-full justify-start text-emerald-100 hover:bg-white/10\">\n          <Mail className=\"mr-2 h-4 w-4\" /> soporte@nakama.partner\n        </Button>\n        <p className=\"text-xs text-emerald-200/60 flex items-center gap-2\">\n          <Clock className=\"h-4 w-4\" /> Lunes a Viernes, 9:00–18:00\n        </p>\n      </CardContent>\n    </Card>\n  );\n\n  // ---------- Shells (compactados) ----------\n  const ShellVariant1 = () => (\n    <div\n      className={[\n        \"relative min-h-[100svh] overflow-hidden\",\n        \"bg-gradient-to-br from-black via-[#0A1713] to-[#0E2A1F]\",\n        \"before:pointer-events-none before:absolute before:inset-0\",\n        \"before:bg-[radial-gradient(80%_60%_at_110%_-10%,rgba(16,185,129,0.18),transparent),radial-gradient(60%_40%_at_-20%_110%,rgba(16,185,129,0.12),transparent)]\",\n        \"flex items-center justify-center px-5 md:px-8\",\n      ].join(\" \")}\n    >\n      {BackButton()}\n      <div className=\"w-full max-w-sm md:max-w-md space-y-7 md:space-y-9\">\n        {BrandHeader()}\n        {LoginFormCard()}\n      </div>\n    </div>\n  );\n\n  const ShellVariant2 = () => (\n    <div\n      className={[\n        \"relative min-h-[100svh] overflow-hidden\",\n        \"bg-gradient-to-br from-black via-[#091611] to-[#0E2A1F]\",\n        \"px-5 md:px-10\",\n        \"flex items-center justify-center\",\n      ].join(\" \")}\n    >\n      {BackButton()}\n\n      <div className=\"grid md:grid-cols-2 gap-8 lg:gap-10 items-center max-w-5xl mx-auto py-10 md:py-0 w-full\">\n        {/* Columna izquierda */}\n        <div className=\"order-2 md:order-1\">\n          <div className=\"flex items-center gap-4 mb-5\">\n            <img\n              src={logoImg}\n              alt=\"Logo\"\n              className=\"w-14 h-14 md:w-20 md:h-20 drop-shadow-[0_0_14px_rgba(16,185,129,0.35)]\"\n            />\n            <div>\n              <h1 className=\"font-cormorant text-3xl lg:text-4xl font-bold text-emerald-50 leading-tight\">\n                Nakama Partner\n              </h1>\n              <p className=\"text-emerald-300 text-base\">Acceso Corporativo</p>\n            </div>\n          </div>\n\n          <div className=\"mb-3\">\n            <div className=\"inline-flex items-center gap-2 rounded-full px-3 py-1 text-xs md:text-sm bg-emerald-500/10 border border-emerald-400/20 text-emerald-200\">\n              <Sparkles className=\"h-4 w-4\" />\n              Acceso exclusivo para asesores & clientes\n            </div>\n          </div>\n\n          <p className=\"text-emerald-100/90 text-sm md:text-base mb-7 max-w-prose\">\n            Gestiona tus comisiones, monitoriza referidos en tiempo real y recibe soporte prioritario desde un único lugar.\n            Todo con seguridad de nivel empresarial.\n          </p>\n\n          <div className=\"grid sm:grid-cols-2 gap-4\">\n            <ValueItem icon={ShieldCheck} title=\"Seguridad reforzada\" desc=\"Cifrado y acceso por rol.\" />\n            <ValueItem icon={Clock} title=\"Eficiencia\" desc=\"Actualizaciones en tiempo real.\" />\n            <ValueItem icon={Sparkles} title=\"Experiencia cuidada\" desc=\"Interfaz clara y sin fricciones.\" />\n            <ValueItem icon={User} title=\"Soporte cercano\" desc=\"Equipo de ayuda especializado.\" />\n          </div>\n        </div>\n\n        {/* Columna derecha */}\n        <div className=\"order-1 md:order-2 w-full max-w-sm md:max-w-md md:ml-auto\">\n          {/* Cabecera compacta + form */}\n          {LoginFormCardV2()}\n        </div>\n      </div>\n    </div>\n  );\n\n  const ShellVariant3 = () => (\n    <div\n      className={[\n        \"relative min-h-[100svh] overflow-hidden\",\n        \"bg-gradient-to-br from-black via-[#07140F] to-[#0E2A1F]\",\n        \"px-5 md:px-10\",\n        \"flex items-center justify-center\",\n      ].join(\" \")}\n    >\n      {BackButton()}\n\n      <div className=\"max-w-6xl mx-auto w-full\">\n        <div className=\"grid lg:grid-cols-[1fr_minmax(0,500px)_340px] gap-8 items-center\">\n          {/* Izquierda */}\n          <div className=\"hidden lg:flex flex-col gap-5\">\n            <div className=\"flex items-center gap-4\">\n              <img\n                src={logoImg}\n                alt=\"Logo\"\n                className=\"w-14 h-14 md:w-24 md:h-24 drop-shadow-[0_0_14px_rgba(16,185,129,0.35)]\"\n              />\n              <div>\n                <h2 className=\"font-cormorant text-3xl font-bold text-emerald-50 leading-tight\">\n                  Nakama Partner\n                </h2>\n                <p className=\"text-emerald-300 text-base\">Para asesores</p>\n              </div>\n            </div>\n\n            <p className=\"text-emerald-100/90 max-w-sm text-sm md:text-base\">\n              Accede a tu panel en segundos. Interfaz clara y soporte inmediato si lo necesitas.\n            </p>\n\n            <div className=\"flex items-center gap-3 text-sm text-emerald-200/75\">\n              <ShieldCheck className=\"h-4 w-4\" />\n              Cumplimiento de buenas prácticas y privacidad.\n            </div>\n\n            <div className=\"flex items-center gap-3 text-sm text-emerald-200/75\">\n              <Sparkles className=\"h-4 w-4\" />\n              Panel de métricas en tiempo real.\n            </div>\n            <div className=\"flex items-center gap-3 text-sm text-emerald-200/75\">\n              <User className=\"h-4 w-4\" />\n              Gestión avanzada de roles y permisos.\n            </div>\n            <div className=\"flex items-center gap-3 text-sm text-emerald-200/75\">\n              <Clock className=\"h-4 w-4\" />\n              Auditoría y registro de actividad.\n            </div>\n          </div>\n\n          {/* Centro */}\n          <div className=\"w-full max-w-sm md:max-w-md mx-auto\">\n            {LoginFormCardV3Centered()}\n          </div>\n\n          {/* Derecha */}\n          <div className=\"space-y-5\">\n            {HelpCard()}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  // ---------- Render ----------\n  if (variant === 2) return ShellVariant2();\n  if (variant === 3) return ShellVariant3();\n  return ShellVariant1();\n}\n","size_bytes":24850},"client/src/pages/nosotros.tsx":{"content":"import Header from \"@/components/header\";\nimport Story from \"@/components/story\";\nimport Footer from \"@/components/footer\";\n\nimport { useScrollToTop } from \"@/hooks/useScrollToTop\";\n\nexport default function Nosotros() {\n  useScrollToTop();\n  return (\n    <div className={[\n      \"min-h-screen text-white relative\",\n      \"bg-gradient-to-br from-black via-[#0A1713] to-[#0E2A1F]\",\n      \"before:pointer-events-none before:absolute before:inset-0\",\n      \"before:bg-[radial-gradient(80%_60%_at_110%_-10%,rgba(16,185,129,0.18),transparent),radial-gradient(60%_40%_at_-20%_110%,rgba(16,185,129,0.12),transparent)]\",\n    ].join(\" \")}>\n      <div className=\"relative z-10\">\n        <Header />\n        <main className=\"pt-32\">\n        <section className=\"py-6 bg-transparent\">\n          <div className=\"container mx-auto px-6\">\n            <div className=\"text-center mb-8\">\n              <h1 className=\"font-playfair text-5xl md:text-6xl font-bold text-white mb-6\">\n                Sobre <span className=\"text-green\">Nosotros</span>\n              </h1>\n              <p className=\"text-xl text-silver-100 max-w-3xl mx-auto\">\n                Conozca la historia detrás de Nakama&Partners y nuestro compromiso con la protección patrimonial.\n              </p>\n            </div>\n          </div>\n        </section>\n        \n        <section className=\"py-10 bg-transparent\">\n          <div className=\"container mx-auto px-6\">\n            <div className=\"max-w-4xl mx-auto\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-12 mb-16\">\n                <div className=\"bg-black/70 p-8 rounded-xl border border-emerald-500/15 transition-all duration-300 hover:border-emerald-500/25 hover:bg-black/50 hover:shadow-lg hover:shadow-emerald-500/20 cursor-pointer\">\n                  <h2 className=\"font-playfair text-3xl font-bold text-white mb-6\">Nuestra Misión</h2>\n                  <p className=\"text-silver-100 leading-relaxed\">\n                    Proteger y hacer crecer el patrimonio de nuestros clientes mediante estructuras \n                    financieras sólidas, transparentes y legalmente blindadas. Ofrecemos tranquilidad \n                    en un mundo financiero lleno de incertidumbre.\n                  </p>\n                </div>\n                \n                <div className=\"bg-black/70 p-8 rounded-xl border border-emerald-500/15 transition-all duration-300 hover:border-emerald-500/25 hover:bg-black/50 hover:shadow-lg hover:shadow-emerald-500/20 cursor-pointer\">\n                  <h2 className=\"font-playfair text-3xl font-bold text-white mb-6\">Nuestra Visión</h2>\n                  <p className=\"text-silver-100 leading-relaxed\">\n                    Ser la referencia en inversiones conservadoras, donde la seguridad del capital \n                    es prioritaria y la rentabilidad es constante y predecible. Construimos relaciones \n                    de confianza duraderas.\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"mb-8\">\n                <h2 className=\"font-playfair text-4xl md:text-5xl font-bold text-white mb-8 text-center\">Nuestros Valores</h2>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n                  \n                  {/* Transparencia */}\n                  <div className=\"flip-card\">\n                    <div className=\"flip-card-inner\">\n                      <div className=\"flip-card-front\">\n                        <div className=\"flip-card-letter\">T</div>\n                      </div>\n                      <div className=\"flip-card-back\">\n                        <div className=\"flip-card-title\">Transparencia</div>\n                        <div className=\"flip-card-description\">\n                          Información clara y accesible en cada paso del proceso. \n                          Nuestros clientes conocen exactamente cómo funciona su inversión, \n                          sin letra pequeña ni sorpresas.\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Seguridad */}\n                  <div className=\"flip-card\">\n                    <div className=\"flip-card-inner\">\n                      <div className=\"flip-card-front\">\n                        <div className=\"flip-card-letter\">S</div>\n                      </div>\n                      <div className=\"flip-card-back\">\n                        <div className=\"flip-card-title\">Seguridad</div>\n                        <div className=\"flip-card-description\">\n                          Protección del capital como prioridad absoluta. \n                          Estructuras bancarias sólidas y contratos pignorados \n                          garantizan la seguridad de cada inversión.\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Excelencia */}\n                  <div className=\"flip-card\">\n                    <div className=\"flip-card-inner\">\n                      <div className=\"flip-card-front\">\n                        <div className=\"flip-card-letter\">E</div>\n                      </div>\n                      <div className=\"flip-card-back\">\n                        <div className=\"flip-card-title\">Excelencia</div>\n                        <div className=\"flip-card-description\">\n                          Compromiso con la calidad en cada detalle. \n                          Desde el primer contacto hasta el seguimiento continuo, \n                          buscamos la perfección en cada interacción.\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n        \n        <Story />\n      </main>\n      <Footer />\n      </div>\n    </div>\n  );\n}","size_bytes":5914},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/partner-dashboard.tsx":{"content":"import { useState, useMemo, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { KycFileUpload } from \"@/components/KycFileUpload\";\nimport {\n  Users,\n  TrendingUp,\n  DollarSign,\n  Crown,\n  Briefcase,\n  BarChart3,\n  UserPlus,\n  Calendar,\n  LogOut,\n  Star,\n  User,\n  FileText,\n  Download,\n  Filter,\n  X,\n  Camera,\n  Phone,\n  Trash2,\n  PlusCircle,\n  Banknote,\n  Wallet,\n  ShieldCheck,\n  CheckCircle2,\n  AlertTriangle,\n  QrCode,\n  Hash,\n  HelpCircle,\n  RefreshCw,\n  Archive,\n} from \"lucide-react\";\nimport logoImg from \"@/assets/Logo-removeBG_1752488347081.png\";\nimport { useScrollToTop } from \"@/hooks/useScrollToTop\";\nimport CompoundInterestChart from \"@/components/compound-interest-chart\";\n\n/* -------------------------------------------------------------------------- */\n/*                             Tipos para Depósito                            */\n/* -------------------------------------------------------------------------- */\ntype Metodo = \"banco\" | \"crypto\";\ntype PasoBanco = \"Pendiente\" | \"Conciliado\" | \"Asignado\";\ntype PasoCrypto = \"Detectado\" | \"Confirmado\" | \"Asignado\";\n\n/* -------------------------------------------------------------------------- */\n/*                               VISTA: DEPÓSITO                              */\n/* -------------------------------------------------------------------------- */\nfunction DepositoView({\n  setHasActiveDeposit,\n  setActiveTab,\n  setProfileActiveTab,\n}: {\n  setHasActiveDeposit: (v: boolean) => void;\n  setActiveTab: (tab: string) => void;\n  setProfileActiveTab: (tab: string) => void;\n}) {\n  const { user } = useAuth();\n\n  // Consulta del estado KYC real\n  const { data: kycData } = useQuery({\n    queryKey: [\"/api/kyc/me\"],\n    enabled: !!user,\n  });\n\n  // ---- Precondiciones de firma (simuladas) ----\n  const [contratoMarco, setContratoMarco] = useState(false);\n  const [perfilOk, setPerfilOk] = useState(false);\n  const [docsProducto, setDocsProducto] = useState(false);\n  \n  // Estado KYC real basado en la consulta\n  const currentKyc = kycData?.kyc;\n  const kycOk = currentKyc?.status === \"approved\";\n  const allPreOk = contratoMarco && kycOk && perfilOk && docsProducto;\n\n  // ---- Depósito ----\n  const [productoElegido, setProductoElegido] = useState<\"fija\" | \"variable\" | \"mixto\">(\"fija\");\n  const [metodo, setMetodo] = useState<Metodo | \"\">(\"\");\n  const [montoEur, setMontoEur] = useState<number>(50000);\n  const [instruccionesGeneradas, setInstruccionesGeneradas] = useState(false);\n  const [reciboSubido, setReciboSubido] = useState(false);\n  const [bancoPaso, setBancoPaso] = useState<PasoBanco | null>(null);\n\n  // Crypto fields\n  const [tasaEurUsdt, setTasaEurUsdt] = useState<number>(1.0);\n  const [cryptoNetwork, setCryptoNetwork] = useState(\"USDT ERC20\");\n  const [txHash, setTxHash] = useState(\"\");\n  const [capturaCrypto, setCapturaCrypto] = useState(false);\n  const [cryptoPaso, setCryptoPaso] = useState<PasoCrypto | null>(null);\n\n  const montoToUsdt = Number.isFinite(montoEur) ? +(montoEur / (tasaEurUsdt || 1)).toFixed(2) : 0;\n\n  // Copys\n  const puedeIniciarAportacion = allPreOk;\n  const depositoBancoListo = montoEur >= 50000 && instruccionesGeneradas && reciboSubido;\n  const depositoCryptoListo = montoEur >= 50000 && !!txHash && capturaCrypto;\n\n  // Simulaciones de avance de estado\n  const simularConciliado = () => setBancoPaso(\"Conciliado\");\n  const simularAsignado = () => {\n    setBancoPaso(\"Asignado\");\n    setHasActiveDeposit(true);\n  };\n  const simularConfirmado = () => setCryptoPaso(\"Confirmado\");\n  const simularAsignadoCrypto = () => {\n    setCryptoPaso(\"Asignado\");\n    setHasActiveDeposit(true);\n  };\n\n  // UI helper: Checklist\n  const ChecklistItem = ({\n    label,\n    checked,\n    onFix,\n  }: {\n    label: string;\n    checked: boolean;\n    onFix?: () => void;\n  }) => (\n    <div className=\"flex items-center justify-between py-2\">\n      <div className=\"flex items-center gap-2\">\n        {checked ? <CheckCircle2 className=\"w-4 h-4 text-emerald-400\" /> : <AlertTriangle className=\"w-4 h-4 text-amber-400\" />}\n        <span className=\"text-sm\">{label}</span>\n      </div>\n      {!checked && (\n        <Button size=\"sm\" variant=\"outline\" className=\"border-emerald-500/30 hover:bg-emerald-900/10\" onClick={onFix}>\n          Firmar/Completar ahora\n        </Button>\n      )}\n    </div>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"mb-2\">\n        <h1 className=\"text-3xl font-bold text-emerald-50\">Depósito</h1>\n        <p className=\"text-emerald-200/80\">Inicia una nueva aportación por banco o cripto</p>\n      </div>\n\n      {/* Condición previa de firma */}\n      <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center gap-2 mb-3\">\n            <ShieldCheck className=\"w-5 h-5 text-emerald-400\" />\n            <h4 className=\"text-emerald-50 font-semibold\">Condición previa de firma (obligatoria)</h4>\n          </div>\n          <div className=\"rounded-xl border border-emerald-500/15 bg-black/30 p-4\">\n            <ChecklistItem label=\"Contrato Marco de Servicios (firmado)\" checked={contratoMarco} onFix={() => setContratoMarco(true)} />\n            <ChecklistItem \n              label={`KYC/AML ${currentKyc?.status === \"approved\" ? \"aprobado\" : currentKyc?.status === \"rejected\" ? \"rechazado\" : \"pendiente\"}`} \n              checked={kycOk} \n              onFix={() => {\n                if (!kycOk) {\n                  // Navegar a la sección Perfil > Estado KYC\n                  setActiveTab(\"perfil\");\n                  setProfileActiveTab(\"kyc\");\n                }\n              }} \n            />\n            <ChecklistItem label=\"Perfil de idoneidad completado\" checked={perfilOk} onFix={() => setPerfilOk(true)} />\n            <ChecklistItem\n              label=\"Documentación específica del producto (Depósito Pignorado / Riesgos de Mercado)\"\n              checked={docsProducto}\n              onFix={() => setDocsProducto(true)}\n            />\n          </div>\n          {!allPreOk && (\n            <p className=\"text-xs text-emerald-200/70 mt-3\">\n              Para iniciar una aportación, primero firma/activa los pasos pendientes.\n            </p>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Paso 1: Nueva aportación */}\n      <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl\">\n        <CardContent className=\"p-6 space-y-6\">\n          <div className=\"rounded-xl border border-emerald-500/15 bg-black/30 p-5\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-emerald-200/80\">Paso 1</p>\n                <h5 className=\"text-emerald-50 font-semibold mb-3\">Nueva aportación</h5>\n                <div className=\"flex flex-wrap gap-3\">\n                  <Button\n                    variant={productoElegido === \"fija\" ? \"default\" : \"outline\"}\n                    onClick={() => setProductoElegido(\"fija\")}\n                    className={productoElegido === \"fija\" ? \"bg-emerald-600 hover:bg-emerald-500\" : \"border-emerald-500/30 hover:bg-emerald-900/10\"}\n                  >\n                    Renta Fija 9%\n                  </Button>\n                  <Button\n                    variant={productoElegido === \"variable\" ? \"default\" : \"outline\"}\n                    onClick={() => setProductoElegido(\"variable\")}\n                    className={productoElegido === \"variable\" ? \"bg-emerald-600 hover:bg-emerald-500\" : \"border-emerald-500/30 hover:bg-emerald-900/10\"}\n                  >\n                    Variable\n                  </Button>\n                  <Button\n                    variant={productoElegido === \"mixto\" ? \"default\" : \"outline\"}\n                    onClick={() => setProductoElegido(\"mixto\")}\n                    className={productoElegido === \"mixto\" ? \"bg-emerald-600 hover:bg-emerald-500\" : \"border-emerald-500/30 hover:bg-emerald-900/10\"}\n                  >\n                    Mixto\n                  </Button>\n                </div>\n              </div>\n              <Button disabled={!puedeIniciarAportacion} className=\"rounded-xl\">\n                Nueva aportación\n              </Button>\n            </div>\n            {!puedeIniciarAportacion && (\n              <p className=\"text-xs text-emerald-200/70 mt-3\">\n                Botón deshabilitado: completa las firmas/validaciones para continuar.\n              </p>\n            )}\n          </div>\n\n          {/* Paso 2: Método */}\n          <div className=\"rounded-xl border border-emerald-500/15 bg-black/30 p-5\">\n            <p className=\"text-sm text-emerald-200/80\">Paso 2</p>\n            <h5 className=\"text-emerald-50 font-semibold mb-3\">Elige método de depósito</h5>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Button\n                variant={metodo === \"banco\" ? \"default\" : \"outline\"}\n                onClick={() => setMetodo(\"banco\")}\n                className={`rounded-xl justify-start ${metodo === \"banco\" ? \"bg-emerald-600 hover:bg-emerald-500\" : \"border-emerald-500/30 hover:bg-emerald-900/10\"}`}\n              >\n                <Banknote className=\"w-4 h-4 mr-2\" />\n                Cuenta bancaria\n              </Button>\n              <Button\n                variant={metodo === \"crypto\" ? \"default\" : \"outline\"}\n                onClick={() => setMetodo(\"crypto\")}\n                className={`rounded-xl justify-start ${metodo === \"crypto\" ? \"bg-emerald-600 hover:bg-emerald-500\" : \"border-emerald-500/30 hover:bg-emerald-900/10\"}`}\n              >\n                <Wallet className=\"w-4 h-4 mr-2\" />\n                Cripto\n              </Button>\n            </div>\n          </div>\n\n          {/* Método: Banco */}\n          {metodo === \"banco\" && (\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <div className=\"rounded-xl border border-emerald-500/15 bg-black/30 p-5\">\n                <h6 className=\"text-emerald-50 font-semibold mb-3\">Importe y Instrucciones</h6>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label className=\"text-emerald-50\">Importe (€) — mínimo 50.000</Label>\n                    <Input\n                      type=\"number\"\n                      min={0}\n                      value={montoEur}\n                      onChange={(e) => setMontoEur(parseFloat(e.target.value) || 0)}\n                      className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                    />\n                    {montoEur < 50000 && <p className=\"text-xs text-amber-400 mt-1\">El importe mínimo es 50.000 €.</p>}\n                  </div>\n\n                  <div className=\"flex items-center gap-3\">\n                    <Button\n                      variant=\"outline\"\n                      className=\"border-emerald-500/30 hover:bg-emerald-900/10\"\n                      onClick={() => setInstruccionesGeneradas(true)}\n                    >\n                      Generar instrucciones\n                    </Button>\n                    {instruccionesGeneradas && <Badge className=\"bg-emerald-500 text-black\">Generadas</Badge>}\n                  </div>\n\n                  {instruccionesGeneradas && (\n                    <div className=\"rounded-lg p-4 bg-black/40 border border-emerald-500/15 text-sm\">\n                      <p><span className=\"text-emerald-300\">IBAN:</span> ES11 2222 3333 4444 5555 6666</p>\n                      <p><span className=\"text-emerald-300\">BIC:</span> ABCDESMMXXX</p>\n                      <p><span className=\"text-emerald-300\">Referencia:</span> NAKAMA-DEP-000123</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"rounded-xl border border-emerald-500/15 bg-black/30 p-5\">\n                <h6 className=\"text-emerald-50 font-semibold mb-3\">Justificante y Confirmación</h6>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label className=\"text-emerald-50\">Subir justificante (PDF/JPG/PNG)</Label>\n                    <Input\n                      type=\"file\"\n                      accept=\".pdf,.jpg,.jpeg,.png\"\n                      onChange={(e) => setReciboSubido((e.target.files?.length ?? 0) > 0)}\n                      className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                    />\n                    {!reciboSubido && <p className=\"text-xs text-amber-400 mt-1\">Obligatorio para continuar.</p>}\n                  </div>\n\n                  <div className=\"flex flex-wrap gap-3\">\n                    <Button disabled={!depositoBancoListo} onClick={() => setBancoPaso(\"Pendiente\")} className=\"rounded-xl\">\n                      He realizado la transferencia\n                    </Button>\n                    <Button variant=\"outline\" className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                      Descargar certificado\n                    </Button>\n                  </div>\n\n                  {/* Seguimiento */}\n                  {bancoPaso && (\n                    <div className=\"mt-4\">\n                      <p className=\"text-sm text-emerald-200/80 mb-2\">Seguimiento</p>\n                      <div className=\"flex flex-wrap items-center gap-2\">\n                        <Badge className={`px-3 ${bancoPaso ? \"bg-emerald-500 text-black\" : \"bg-emerald-900/30 text-emerald-200\"}`}>Pendiente</Badge>\n                        <span>→</span>\n                        <Badge className={`${bancoPaso === \"Conciliado\" || bancoPaso === \"Asignado\" ? \"bg-emerald-500 text-black\" : \"bg-emerald-900/30 text-emerald-200\"}`}>Conciliado</Badge>\n                        <span>→</span>\n                        <Badge className={`${bancoPaso === \"Asignado\" ? \"bg-emerald-500 text-black\" : \"bg-emerald-900/30 text-emerald-200\"}`}>Asignado</Badge>\n                      </div>\n\n                      {bancoPaso === \"Pendiente\" && (\n                        <div className=\"flex gap-2 mt-3\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={simularConciliado} className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Simular conciliación\n                          </Button>\n                        </div>\n                      )}\n                      {bancoPaso === \"Conciliado\" && (\n                        <div className=\"flex gap-2 mt-3\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={simularAsignado} className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Simular asignación\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Método: Crypto */}\n          {metodo === \"crypto\" && (\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <div className=\"rounded-xl border border-emerald-500/15 bg-black/30 p-5\">\n                <h6 className=\"text-emerald-50 font-semibold mb-3\">Importe, activo y red</h6>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label className=\"text-emerald-50\">Importe en EUR — mínimo 50.000</Label>\n                    <Input\n                      type=\"number\"\n                      min={0}\n                      value={montoEur}\n                      onChange={(e) => setMontoEur(parseFloat(e.target.value) || 0)}\n                      className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                    />\n                    {montoEur < 50000 && <p className=\"text-xs text-amber-400 mt-1\">El importe mínimo es 50.000 €.</p>}\n                  </div>\n                  <div>\n                    <Label className=\"text-emerald-50\">Tasa EUR → USDT (editable)</Label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.0001\"\n                      value={tasaEurUsdt}\n                      onChange={(e) => setTasaEurUsdt(parseFloat(e.target.value) || 1)}\n                      className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                    />\n                    <p className=\"text-xs text-emerald-200/70 mt-1\">Conversión estimada: {montoToUsdt.toLocaleString(\"es-ES\")} USDT</p>\n                  </div>\n\n                  <div>\n                    <Label className=\"text-emerald-50\">Activo y red</Label>\n                    <Select value={cryptoNetwork} onValueChange={setCryptoNetwork}>\n                      <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                        <SelectValue placeholder=\"Selecciona\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-black/40 border-emerald-500/15 text-emerald-50\">\n                        <SelectItem value=\"USDT ERC20\">USDT (ERC20)</SelectItem>\n                        <SelectItem value=\"USDT TRC20\">USDT (TRC20)</SelectItem>\n                        <SelectItem value=\"USDT BEP20\">USDT (BEP20)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"rounded-lg p-4 bg-black/40 border border-emerald-500/15 text-sm\">\n                    <p className=\"mb-2\"><span className=\"text-emerald-300\">Dirección:</span> 0xNAKAMA...DEPOSIT</p>\n                    <p className=\"mb-2\"><span className=\"text-emerald-300\">Memo (si aplica):</span> —</p>\n                    <div className=\"flex items-center gap-3 mt-2\">\n                      <div className=\"w-20 h-20 rounded-lg border border-emerald-500/20 bg-black/50 flex items-center justify-center\">\n                        <QrCode className=\"w-10 h-10 text-emerald-400\" />\n                      </div>\n                      <Button size=\"sm\" variant=\"outline\" className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                        Copiar dirección\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"rounded-xl border border-emerald-500/15 bg-black/30 p-5\">\n                <h6 className=\"text-emerald-50 font-semibold mb-3\">Comprobante y Confirmación</h6>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label className=\"text-emerald-50 flex items-center gap-2\"><Hash className=\"w-4 h-4\" /> Hash de transacción</Label>\n                    <Input\n                      placeholder=\"0xabc123...\"\n                      value={txHash}\n                      onChange={(e) => setTxHash(e.target.value)}\n                      className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"text-emerald-50\">Subir captura/imagen del envío</Label>\n                    <Input\n                      type=\"file\"\n                      accept=\".pdf,.jpg,.jpeg,.png\"\n                      onChange={(e) => setCapturaCrypto((e.target.files?.length ?? 0) > 0)}\n                      className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                    />\n                    {(!txHash || !capturaCrypto) && <p className=\"text-xs text-amber-400 mt-1\">Debes adjuntar hash + captura para continuar.</p>}\n                  </div>\n\n                  <div className=\"flex flex-wrap gap-3\">\n                    <Button disabled={!depositoCryptoListo} onClick={() => setCryptoPaso(\"Detectado\")} className=\"rounded-xl\">\n                      He realizado el envío\n                    </Button>\n                    <Button variant=\"outline\" className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                      Descargar certificado\n                    </Button>\n                  </div>\n\n                  {/* Seguimiento */}\n                  {cryptoPaso && (\n                    <div className=\"mt-4\">\n                      <p className=\"text-sm text-emerald-200/80 mb-2\">Seguimiento</p>\n                      <div className=\"flex flex-wrap items-center gap-2\">\n                        <Badge className={`px-3 ${cryptoPaso ? \"bg-emerald-500 text-black\" : \"bg-emerald-900/30 text-emerald-200\"}`}>Detectado</Badge>\n                        <span>→</span>\n                        <Badge className={`${cryptoPaso === \"Confirmado\" || cryptoPaso === \"Asignado\" ? \"bg-emerald-500 text-black\" : \"bg-emerald-900/30 text-emerald-200\"}`}>Confirmado</Badge>\n                        <span>→</span>\n                        <Badge className={`${cryptoPaso === \"Asignado\" ? \"bg-emerald-500 text-black\" : \"bg-emerald-900/30 text-emerald-200\"}`}>Asignado</Badge>\n                      </div>\n\n                      {cryptoPaso === \"Detectado\" && (\n                        <div className=\"flex gap-2 mt-3\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={simularConfirmado} className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Simular confirmación\n                          </Button>\n                        </div>\n                      )}\n                      {cryptoPaso === \"Confirmado\" && (\n                        <div className=\"flex gap-2 mt-3\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={simularAsignadoCrypto} className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Simular asignación\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n/* -------------------------------------------------------------------------- */\n/*                                VISTA: RETIRO                               */\n/* -------------------------------------------------------------------------- */\nfunction RetiroView({\n  hasActiveDeposit,\n}: {\n  hasActiveDeposit: boolean;\n}) {\n  // ---- Retiros ----\n  const [retiroProducto, setRetiroProducto] = useState(\"Plazo fijo 9% - 175 días\");\n  const [retiroMetodo, setRetiroMetodo] = useState<Metodo | \"\">(\"\");\n  const [retiroTotal, setRetiroTotal] = useState(true);\n  const [retiroImporte, setRetiroImporte] = useState<number>(1000);\n\n  const [ibanList, setIbanList] = useState<{ iban: string; verified: boolean }[]>([\n    { iban: \"ES12 3456 7890 1234 5678 9012\", verified: true },\n  ]);\n  const [walletList, setWalletList] = useState<{ name: string; address: string; verified: boolean }[]>([\n    { name: \"Mi USDT ERC20\", address: \"0xABCD...1234\", verified: true },\n  ]);\n  const [ibanSeleccionado, setIbanSeleccionado] = useState<string>(ibanList[0]?.iban ?? \"\");\n  const [walletSeleccionada, setWalletSeleccionada] = useState<string>(walletList[0]?.address ?? \"\");\n  const [retiroPasoBanco, setRetiroPasoBanco] = useState<\"Recibida\" | \"Programada\" | \"Transferida\" | \"Finalizada\" | null>(null);\n  const [retiroPasoCrypto, setRetiroPasoCrypto] = useState<\"Recibida\" | \"TX enviada\" | \"Finalizada\" | null>(null);\n\n  // Añadir/validar IBAN/Wallet\n  const handleAddIban = () => {\n    const nuevo = prompt(\"Introduce un IBAN nuevo (formato ejemplo ES12 3456 7890 1234 5678 9012):\");\n    if (!nuevo) return;\n    setIbanList((l) => [...l, { iban: nuevo, verified: false }]);\n    setIbanSeleccionado(nuevo);\n  };\n  const handleVerifyIban = () => {\n    setIbanList((l) => l.map((i) => (i.iban === ibanSeleccionado ? { ...i, verified: true } : i)));\n  };\n\n  const handleAddWallet = () => {\n    const nombre = prompt(\"Nombre de la wallet (ej. 'Mi USDT TRC20'):\");\n    const dir = prompt(\"Dirección de la wallet:\");\n    if (!nombre || !dir) return;\n    setWalletList((l) => [...l, { name: nombre, address: dir, verified: false }]);\n    setWalletSeleccionada(dir);\n  };\n  const handleVerifyWallet = () => {\n    setWalletList((l) => l.map((w) => (w.address === walletSeleccionada ? { ...w, verified: true } : w)));\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"mb-2\">\n        <h1 className=\"text-3xl font-bold text-emerald-50\">Retiro</h1>\n        <p className=\"text-emerald-200/80\">Solicita un retiro a cuenta bancaria o wallet</p>\n      </div>\n\n      <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl\">\n        <CardContent className=\"p-6 space-y-6 max-h-[72vh] overflow-y-auto\">\n          {!hasActiveDeposit ? (\n            <div className=\"text-emerald-200/80 text-sm\">\n              Aún no tienes aportaciones activas, por eso no hay retiros disponibles.\n            </div>\n          ) : (\n            <>\n              {/* Paso 1: Solicitar retiro */}\n              <div className=\"rounded-xl border border-emerald-500/15 bg-black/30 p-5\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\n                  <div>\n                    <Label className=\"text-emerald-50\">Producto</Label>\n                    <Select value={retiroProducto} onValueChange={setRetiroProducto}>\n                      <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-black/40 border-emerald-500/15 text-emerald-50\">\n                        <SelectItem value=\"Plazo fijo 9% - 175 días\">Plazo fijo 9% - 175 días</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label className=\"text-emerald-50\">Importe</Label>\n                    <div className=\"flex gap-2\">\n                      <Input\n                        type=\"number\"\n                        disabled={retiroTotal}\n                        min={0}\n                        value={retiroImporte}\n                        onChange={(e) => setRetiroImporte(parseFloat(e.target.value) || 0)}\n                        className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant={retiroTotal ? \"default\" : \"outline\"}\n                        onClick={() => setRetiroTotal((v) => !v)}\n                        className={retiroTotal ? \"bg-emerald-600 hover:bg-emerald-500\" : \"border-emerald-500/30 hover:bg-emerald-900/10\"}\n                      >\n                        {retiroTotal ? \"Total\" : \"Parcial\"}\n                      </Button>\n                    </div>\n                  </div>\n                  <div>\n                    <Label className=\"text-emerald-50\">Método</Label>\n                    <Select value={retiroMetodo} onValueChange={(v) => setRetiroMetodo(v as Metodo)}>\n                      <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                        <SelectValue placeholder=\"Selecciona método\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"bg-black/40 border-emerald-500/15 text-emerald-50\">\n                        <SelectItem value=\"banco\">Cuenta bancaria</SelectItem>\n                        <SelectItem value=\"crypto\">Cripto</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                <div className=\"mt-4\">\n                  <Button className=\"rounded-xl\">Solicitar retiro</Button>\n                </div>\n              </div>\n\n              {/* Paso 2: Según método */}\n              {retiroMetodo === \"banco\" && (\n                <div className=\"rounded-xl border border-emerald-500/15 bg-black/30 p-5\">\n                  <h6 className=\"text-emerald-50 font-semibold mb-3\">Cuenta bancaria</h6>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label className=\"text-emerald-50\">IBAN verificado</Label>\n                      <Select value={ibanSeleccionado} onValueChange={setIbanSeleccionado}>\n                        <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent className=\"bg-black/40 border-emerald-500/15 text-emerald-50\">\n                          {ibanList.map((i) => (\n                            <SelectItem key={i.iban} value={i.iban}>\n                              {i.iban} {i.verified ? \"✓\" : \"\"}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <div className=\"flex gap-2 mt-3\">\n                        <Button variant=\"outline\" onClick={handleAddIban} className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                          Añadir IBAN/Wallet\n                        </Button>\n                        {!ibanList.find((i) => i.iban === ibanSeleccionado)?.verified && (\n                          <Button variant=\"outline\" onClick={handleVerifyIban} className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Verificar IBAN\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex items-end\">\n                      <Button className=\"rounded-xl\" onClick={() => setRetiroPasoBanco(\"Recibida\")}>\n                        Confirmar retiro\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Seguimiento */}\n                  {retiroPasoBanco && (\n                    <div className=\"mt-4\">\n                      <p className=\"text-sm text-emerald-200/80 mb-2\">Seguimiento</p>\n                      <div className=\"flex flex-wrap items-center gap-2\">\n                        <Badge className={`${retiroPasoBanco ? \"bg-emerald-500 text-black\" : \"bg-emerald-900/30 text-emerald-200\"}`}>Recibida</Badge>\n                        <span>→</span>\n                        <Badge className={`${[\"Programada\", \"Transferida\", \"Finalizada\"].includes(retiroPasoBanco) ? \"bg-emerald-500 text-black\" : \"bg-emerald-900/30 text-emerald-200\"}`}>Programada</Badge>\n                        <span>→</span>\n                        <Badge className={`${[\"Transferida\", \"Finalizada\"].includes(retiroPasoBanco) ? \"bg-emerald-500 text-black\" : \"bg-emerald-900/30 text-emerald-200\"}`}>Transferida</Badge>\n                        <span>→</span>\n                        <Badge className={`${retiroPasoBanco === \"Finalizada\" ? \"bg-emerald-500 text-black\" : \"bg-emerald-900/30 text-emerald-200\"}`}>Finalizada</Badge>\n                      </div>\n\n                      {retiroPasoBanco === \"Recibida\" && (\n                        <div className=\"flex gap-2 mt-3\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={() => setRetiroPasoBanco(\"Programada\")} className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Simular programación\n                          </Button>\n                        </div>\n                      )}\n                      {retiroPasoBanco === \"Programada\" && (\n                        <div className=\"flex gap-2 mt-3\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={() => setRetiroPasoBanco(\"Transferida\")} className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Simular transferencia\n                          </Button>\n                        </div>\n                      )}\n                      {retiroPasoBanco === \"Transferida\" && (\n                        <div className=\"flex gap-2 mt-3\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={() => setRetiroPasoBanco(\"Finalizada\")} className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Simular finalización\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Descargar justificante\n                          </Button>\n                        </div>\n                      )}\n                      {retiroPasoBanco === \"Finalizada\" && (\n                        <div className=\"flex gap-2 mt-3\">\n                          <Button size=\"sm\" variant=\"outline\" className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Descargar justificante\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {retiroMetodo === \"crypto\" && (\n                <div className=\"rounded-xl border border-emerald-500/15 bg-black/30 p-5\">\n                  <h6 className=\"text-emerald-50 font-semibold mb-3\">Cripto</h6>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label className=\"text-emerald-50\">Wallet verificada</Label>\n                      <Select value={walletSeleccionada} onValueChange={setWalletSeleccionada}>\n                        <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent className=\"bg-black/40 border-emerald-500/15 text-emerald-50\">\n                          {walletList.map((w) => (\n                            <SelectItem key={w.address} value={w.address}>\n                              {w.name} — {w.address.slice(0, 8)}... {w.verified ? \"✓\" : \"\"}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <div className=\"flex gap-2 mt-3\">\n                        <Button variant=\"outline\" onClick={handleAddWallet} className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                          Añadir IBAN/Wallet\n                        </Button>\n                        {!walletList.find((w) => w.address === walletSeleccionada)?.verified && (\n                          <Button variant=\"outline\" onClick={handleVerifyWallet} className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Verificar Wallet\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex items-end\">\n                      <Button className=\"rounded-xl\" onClick={() => setRetiroPasoCrypto(\"Recibida\")}>\n                        Confirmar retiro\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Seguimiento */}\n                  {retiroPasoCrypto && (\n                    <div className=\"mt-4\">\n                      <p className=\"text-sm text-emerald-200/80 mb-2\">Seguimiento</p>\n                      <div className=\"flex flex-wrap items-center gap-2\">\n                        <Badge className={`${retiroPasoCrypto ? \"bg-emerald-500 text-black\" : \"bg-emerald-900/30 text-emerald-200\"}`}>Recibida</Badge>\n                        <span>→</span>\n                        <Badge className={`${[\"TX enviada\", \"Finalizada\"].includes(retiroPasoCrypto) ? \"bg-emerald-500 text-black\" : \"bg-emerald-900/30 text-emerald-200\"}`}>TX enviada</Badge>\n                        <span>→</span>\n                        <Badge className={`${retiroPasoCrypto === \"Finalizada\" ? \"bg-emerald-500 text-black\" : \"bg-emerald-900/30 text-emerald-200\"}`}>Finalizada</Badge>\n                      </div>\n\n                      {retiroPasoCrypto === \"Recibida\" && (\n                        <div className=\"flex gap-2 mt-3\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={() => setRetiroPasoCrypto(\"TX enviada\")} className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Simular TX enviada\n                          </Button>\n                        </div>\n                      )}\n                      {retiroPasoCrypto === \"TX enviada\" && (\n                        <div className=\"flex gap-2 mt-3\">\n                          <Button size=\"sm\" variant=\"outline\" onClick={() => setRetiroPasoCrypto(\"Finalizada\")} className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Simular finalización\n                          </Button>\n                          <Button size=\"sm\" variant=\"outline\" className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Descargar justificante\n                          </Button>\n                        </div>\n                      )}\n                      {retiroPasoCrypto === \"Finalizada\" && (\n                        <div className=\"flex gap-2 mt-3\">\n                          <Button size=\"sm\" variant=\"outline\" className=\"border-emerald-500/30 hover:bg-emerald-900/10\">\n                            Descargar justificante\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              )}\n            </>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n/* -------------------------------------------------------------------------- */\n/*                                DASHBOARD PARTNER                           */\n/* -------------------------------------------------------------------------- */\n\ntype Client = {\n  id: string;\n  name: string;\n  investment: number;\n  returns: number;\n  tier: string;\n  status: \"Activo\" | \"Vencido\";\n  depositDate: string; // yyyy-mm-dd\n  maturityDate: string; // yyyy-mm-dd\n  compoundInterest: boolean;\n  email: string;\n  phone: string;\n  pais: string;\n  sexo: \"Hombre\" | \"Mujer\";\n};\n\ntype KycStatus = \"Pendiente\" | \"Aprobado\" | \"Rechazado\";\n\nexport default function PartnerDashboard() {\n  useScrollToTop();\n  const { user, logout } = useAuth();\n  const [activeTab, setActiveTab] = useState(\"resumen\");\n\n  // Foto y teléfono (como en el dashboard de clientes)\n  const [profilePhoto, setProfilePhoto] = useState<string | null>(null);\n  const [phoneNumber, setPhoneNumber] = useState(\"646 123 456\");\n\n  // Tooltip responsive: right en desktop, bottom en móvil\n  const [tooltipSide, setTooltipSide] = useState<\"right\" | \"bottom\">(\"bottom\");\n  useEffect(() => {\n    const mq = window.matchMedia(\"(min-width: 768px)\");\n    const update = () => setTooltipSide(mq.matches ? \"right\" : \"bottom\");\n    update();\n    mq.addEventListener?.(\"change\", update);\n    return () => mq.removeEventListener?.(\"change\", update);\n  }, []);\n\n\n  // 👇 Necesario para habilitar Retiro cuando el depósito queda \"Asignado\"\n  const [hasActiveDeposit, setHasActiveDeposit] = useState<boolean>(false);\n\n  // ===== KYC: estado y manejadores =====\n  const queryClient = useQueryClient();\n  \n  // Dialog states for document viewing\n  const [showDocumentsDialog, setShowDocumentsDialog] = useState(false);\n  const [viewingDocuments, setViewingDocuments] = useState<string[] | null>(null);\n\n  // KYC form data\n  const [kycFormData, setKycFormData] = useState({\n    fullName: \"\",\n    documentType: \"dni\" as \"dni\" | \"passport\",\n    documentNumber: \"\",\n    country: \"España\",\n    documentsUrls: [] as string[],\n  });\n\n  // Fetch KYC data\n  const { data: kycData, isLoading: kycLoading } = useQuery({\n    queryKey: [\"/api/kyc/me\"],\n    enabled: !!user,\n  });\n\n  // KYC mutation\n  const kycMutation = useMutation({\n    mutationFn: async (formData: typeof kycFormData) => {\n      const token = localStorage.getItem(\"token\");\n      const response = await fetch(\"/api/kyc/me\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(formData),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Error updating KYC\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/kyc/me\"] });\n    },\n  });\n\n  // Initialize form data when KYC data is loaded\n  useEffect(() => {\n    if (kycData?.kyc) {\n      setKycFormData({\n        fullName: kycData.kyc.fullName || \"\",\n        documentType: kycData.kyc.documentType || \"dni\",\n        documentNumber: kycData.kyc.documentNumber || \"\",\n        country: kycData.kyc.country || \"España\",\n        documentsUrls: kycData.kyc.documentsUrls || [],\n      });\n    }\n  }, [kycData]);\n\n  // KYC submit handler\n  const handleKycSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!kycFormData.fullName || !kycFormData.documentNumber || !kycFormData.documentsUrls.length) return;\n    \n    try {\n      await kycMutation.mutateAsync(kycFormData);\n    } catch (error) {\n      console.error('Error submitting KYC:', error);\n    }\n  };\n\n  // Get KYC status and messages\n  const currentKyc = kycData?.kyc;\n  const kycStatus = currentKyc?.status === \"approved\" ? \"Aprobado\" : \n                   currentKyc?.status === \"rejected\" ? \"Rechazado\" : \"Pendiente\";\n  const kycFeedback = currentKyc?.rejectionReason || \"\";\n  const kycDocs = kycFormData.documentsUrls;\n\n  const kycBadgeClass =\n    kycStatus === \"Aprobado\"\n      ? \"bg-emerald-500 text-black\"\n      : kycStatus === \"Rechazado\"\n      ? \"bg-red-500 text-white\"\n      : \"bg-amber-500 text-black\";\n\n  const kycMessage =\n    kycStatus === \"Aprobado\"\n      ? \"¡Tu cuenta está verificada! Ya puedes operar sin límites.\"\n      : kycStatus === \"Rechazado\"\n      ? kycFeedback || \"Hemos detectado inconsistencias. Vuelve a subir los documentos.\"\n      : kycDocs.length\n      ? \"Tus documentos están en revisión. Te notificaremos al finalizar.\"\n      : \"Aún no has subido documentos. Sube tu DNI o pasaporte para iniciar la verificación.\";\n\n  // Document viewing functions\n  const handleViewDocuments = (documentsUrls: string[] | null) => {\n    if (!documentsUrls || documentsUrls.length === 0) {\n      alert(\"No hay documentos disponibles\");\n      return;\n    }\n    setViewingDocuments(documentsUrls);\n    setShowDocumentsDialog(true);\n  };\n\n  const handleCloseDocumentsDialog = () => {\n    setShowDocumentsDialog(false);\n    setViewingDocuments(null);\n  };\n\n  // Filtros CLIENTES\n  const [showFilters, setShowFilters] = useState(false);\n  const [filters, setFilters] = useState({\n    inversionMin: \"\",\n    inversionMax: \"\",\n    gananciasMin: \"\",\n    gananciasMax: \"\",\n    pais: \"\",\n    sexo: \"\",\n    estado: \"\",\n  });\n  const [sortOrder, setSortOrder] = useState<\"\" | \"asc\" | \"desc\">(\"\");\n  // Filtro rápido por tarjetas\n  const [quickFilter, setQuickFilter] =\n    useState<\"all\" | \"activos\" | \"compuesto\" | \"vencidos\">(\"all\");\n\n\n  // Filtros CONTRATOS\n  const [showContractFilters, setShowContractFilters] = useState(false);\n  const [contractSort, setContractSort] = useState<\"\" | \"amountDesc\" | \"amountAsc\" | \"endAsc\" | \"endDesc\">(\"\");\n  const [contractFilters, setContractFilters] = useState({\n    search: \"\",\n    status: \"\",\n    type: \"\",\n    tier: \"\",\n    amountMin: \"\",\n    amountMax: \"\",\n    signedFrom: \"\",\n    signedTo: \"\",\n    vencimiento: \"\",\n  });\n\n  // Google Calendar (herramientas)\n  const [gcalView, setGcalView] = useState<\"month\" | \"week\" | \"agenda\">(\"month\");\n  const [gcalTz, setGcalTz] = useState<string>(\"Europe/Madrid\");\n  const gcalPublicSrc = \"es.spain%23holiday%40group.v.calendar.google.com\";\n  const gcalMode = useMemo(\n    () => (gcalView === \"agenda\" ? \"AGENDA\" : gcalView === \"week\" ? \"WEEK\" : \"MONTH\"),\n    [gcalView]\n  );\n  const gcalEmbedUrl = useMemo(\n    () =>\n      `https://calendar.google.com/calendar/embed?src=${gcalPublicSrc}&ctz=${encodeURIComponent(\n        gcalTz\n      )}&mode=${gcalMode}&wkst=1&showTitle=0&showPrint=0&showCalendars=0&showTabs=1&bgcolor=%230A1713`,\n    [gcalMode, gcalTz]\n  );\n  const handleOpenGoogleCalendar = () => {\n    window.open(\"https://calendar.google.com/calendar/u/0/r\", \"_blank\", \"noopener,noreferrer\");\n  };\n\n  const handlePhotoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = (e) => setProfilePhoto(e.target?.result as string);\n    reader.readAsDataURL(file);\n  };\n\n  // ======== CLIENTES: estado, alta y eliminación ========\n  const todayISO = new Date().toISOString().slice(0, 10);\n  const nextYearISO = new Date(new Date().setFullYear(new Date().getFullYear() + 1))\n    .toISOString()\n    .slice(0, 10);\n\n  const [clients, setClients] = useState<Client[]>([\n    {\n      id: \"c1\",\n      name: \"María González\",\n      investment: 150000,\n      returns: 13500,\n      tier: \"Premium\",\n      status: \"Activo\",\n      depositDate: \"2024-01-15\",\n      maturityDate: \"2026-01-15\",\n      compoundInterest: true,\n      email: \"maria.gonzalez@email.com\",\n      phone: \"+34 666 123 456\",\n      pais: \"España\",\n      sexo: \"Mujer\",\n    },\n    {\n      id: \"c2\",\n      name: \"Carlos Ruiz\",\n      investment: 75000,\n      returns: 6750,\n      tier: \"Standard\",\n      status: \"Vencido\",\n      depositDate: \"2024-03-10\",\n      maturityDate: \"2024-12-10\",\n      compoundInterest: false,\n      email: \"carlos.ruiz@email.com\",\n      phone: \"+34 666 789 012\",\n      pais: \"Francia\",\n      sexo: \"Hombre\",\n    },\n    {\n      id: \"c3\",\n      name: \"Ana López\",\n      investment: 200000,\n      returns: 18000,\n      tier: \"Premium\",\n      status: \"Activo\",\n      depositDate: \"2024-08-20\",\n      maturityDate: \"2026-08-20\",\n      compoundInterest: true,\n      email: \"ana.lopez@email.com\",\n      phone: \"+34 666 345 678\",\n      pais: \"Portugal\",\n      sexo: \"Mujer\",\n    },\n    {\n      id: \"c4\",\n      name: \"Miguel Santos\",\n      investment: 120000,\n      returns: 10800,\n      tier: \"Premium\",\n      status: \"Vencido\",\n      depositDate: \"2023-11-15\",\n      maturityDate: \"2024-11-15\",\n      compoundInterest: true,\n      email: \"miguel.santos@email.com\",\n      phone: \"+34 666 987 654\",\n      pais: \"España\",\n      sexo: \"Hombre\",\n    },\n  ]);\n\n  const [showAddClient, setShowAddClient] = useState(false);\n  const [newClient, setNewClient] = useState<Omit<Client, \"id\">>({\n    name: \"\",\n    investment: 50000,\n    returns: 0,\n    tier: \"Standard\",\n    status: \"Activo\",\n    depositDate: todayISO,\n    maturityDate: nextYearISO,\n    compoundInterest: true,\n    email: \"\",\n    phone: \"\",\n    pais: \"España\",\n    sexo: \"Hombre\",\n  });\n\n  const handleAddClient = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newClient.name.trim()) return;\n    setClients((prev) => [{ id: `c${Date.now()}`, ...newClient }, ...prev]);\n    setNewClient({\n      name: \"\",\n      investment: 50000,\n      returns: 0,\n      tier: \"Standard\",\n      status: \"Activo\",\n      depositDate: todayISO,\n      maturityDate: nextYearISO,\n      compoundInterest: true,\n      email: \"\",\n      phone: \"\",\n      pais: \"España\",\n      sexo: \"Hombre\",\n    });\n    setShowAddClient(false);\n  };\n\n  // ✅ Doble verificación para eliminación\n  const handleDeleteClient = (id: string, name: string) => {\n    const first = confirm(`¿Seguro que quieres eliminar a \"${name}\"?`);\n    if (!first) return;\n    const second = confirm(\n      `Última confirmación.\\nEsta acción eliminará permanentemente a \"${name}\" y no se puede deshacer.\\n¿Confirmas la eliminación?`\n    );\n    if (!second) return;\n    setClients((prev) => prev.filter((c) => c.id !== id));\n  };\n\n  // KPIs de clientes (para tarjetas rápidas y otras vistas)\n  const statsClients = useMemo(() => {\n    const total = clients.length;\n    const activos = clients.filter((c) => c.status === \"Activo\").length;\n    const comp = clients.filter((c) => c.compoundInterest).length;\n    const vencidos = clients.filter((c) => {\n      const days = Math.ceil((new Date(c.maturityDate).getTime() - Date.now()) / 86400000);\n      return days <= 0 || c.status === \"Vencido\";\n    }).length;\n    return { total, activos, comp, vencidos };\n  }, [clients]);\n\n  // 📊 Estadísticas superiores del dashboard RESUMEN alimentadas por los clientes\n  const resumenStats = useMemo(() => {\n    const activeClients = clients.filter((c) => c.status === \"Activo\");\n    const activeVolume = activeClients.reduce((sum, c) => sum + c.investment, 0);\n    const expiringSoon = activeClients.filter((c) => {\n      const days = Math.ceil((new Date(c.maturityDate).getTime() - Date.now()) / 86400000);\n      return days > 0 && days <= 30;\n    }).length;\n    return { activeClients: activeClients.length, activeVolume, expiringSoon };\n  }, [clients]);\n\n  const filteredClients = useMemo(() => {\n    const list = clients\n      .filter((client) => {\n        const inversionMin = filters.inversionMin ? parseFloat(filters.inversionMin) : 0;\n        const inversionMax = filters.inversionMax ? parseFloat(filters.inversionMax) : Infinity;\n        const gananciasMin = filters.gananciasMin ? parseFloat(filters.gananciasMin) : 0;\n        const gananciasMax = filters.gananciasMax ? parseFloat(filters.gananciasMax) : Infinity;\n\n        // para detectar vencidos por fecha o estado\n        const daysLeft = Math.ceil((new Date(client.maturityDate).getTime() - Date.now()) / 86400000);\n        const isExpired = daysLeft <= 0 || client.status === \"Vencido\";\n\n        const matchQuick =\n          quickFilter === \"all\" ||\n          (quickFilter === \"activos\" && client.status === \"Activo\") ||\n          (quickFilter === \"compuesto\" && client.compoundInterest) ||\n          (quickFilter === \"vencidos\" && isExpired);\n\n        return (\n          client.investment >= inversionMin &&\n          client.investment <= inversionMax &&\n          client.returns >= gananciasMin &&\n          client.returns <= gananciasMax &&\n          (filters.pais === \"\" || client.pais === filters.pais) &&\n          (filters.sexo === \"\" || client.sexo === filters.sexo) &&\n          (filters.estado === \"\" || client.status === filters.estado) &&\n          matchQuick\n        );\n      })\n      .sort((a, b) => {\n        if (sortOrder === \"desc\") return b.investment - a.investment;\n        if (sortOrder === \"asc\") return a.investment - b.investment;\n        return 0;\n      });\n\n    return list;\n  }, [clients, filters, sortOrder, quickFilter]);\n\n  // días hasta comisión (para KPI de pagos)\n  const calculateDaysToCommission = () => {\n    const now = new Date();\n    const currentDay = now.getDate();\n    const currentMonth = now.getMonth();\n    const currentYear = now.getFullYear();\n    const nextPayoutDate =\n      currentDay <= 15 ? new Date(currentYear, currentMonth, 15) : new Date(currentYear, currentMonth + 1, 15);\n    const daysDiff = Math.ceil((nextPayoutDate.getTime() - now.getTime()) / (1000 * 3600 * 24));\n    return daysDiff;\n  };\n\n  const partnerStats = {\n    monthlyCommission: 15650,\n    ytdCommission: 186200,\n    nextTierProgress: 79,\n    daysToCommission: calculateDaysToCommission(),\n    tier: \"Elite Partner\",\n  };\n\n  // ====== CONTROL DE TABS DE PERFIL ======\n  const [profileActiveTab, setProfileActiveTab] = useState(\"personal\");\n\n  return (\n    <div\n      className={[\n        \"relative min-h-screen text-white flex\",\n        \"bg-gradient-to-br from-black via-[#0A1713] to-[#0E2A1F]\",\n        \"before:pointer-events-none before:absolute before:inset-0\",\n        \"before:bg-[radial-gradient(80%_60%_at_110%_-10%,rgba(16,185,129,0.18),transparent),radial-gradient(60%_40%_at_-20%_110%,rgba(16,185,129,0.12),transparent)]\",\n      ].join(\" \")}\n    >\n      {/* Sidebar */}\n      <aside\n        className={[\n          \"w-64 fixed h-full p-6\",\n          \"bg-black/40 backdrop-blur-sm\",\n          \"border-r border-emerald-500/15\",\n          \"shadow-[0_0_0_1px_rgba(16,185,129,0.08),0_20px_60px_-20px_rgba(16,185,129,0.25)]\",\n        ].join(\" \")}\n      >\n        <div className=\"flex items-center space-x-3 mb-8\">\n          <img src={logoImg} alt=\"Nakama&Partners\" className=\"w-10 h-10 drop-shadow-[0_0_14px_rgba(16,185,129,0.35)]\" />\n        </div>\n\n        <nav className=\"space-y-2 flex-1\">\n          {[\n            { key: \"perfil\", label: \"Perfil\", icon: User },\n            { key: \"resumen\", label: \"Resumen\", icon: BarChart3 },\n            { key: \"clientes\", label: \"Clientes\", icon: Users },\n            { key: \"contratos\", label: \"Contratos\", icon: FileText },\n            { key: \"herramientas\", label: \"Herramientas\", icon: Briefcase },\n            { key: \"deposito\", label: \"Depósito\", icon: Banknote },\n            { key: \"retiro\", label: \"Retiro\", icon: Wallet },\n          ].map(({ key, label, icon: Icon }) => (\n            <button\n              key={key}\n              onClick={() => setActiveTab(key)}\n              className={[\n                \"w-full flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors\",\n                activeTab === key\n                  ? \"bg-emerald-600/20 border border-emerald-500/30 text-emerald-50 shadow-[0_8px_24px_-12px_rgba(16,185,129,0.45)]\"\n                  : \"text-emerald-200 hover:bg-emerald-900/10\",\n              ].join(\" \")}\n            >\n              <Icon className=\"h-4 w-4\" />\n              <span>{label}</span>\n            </button>\n          ))}\n\n          <Button\n            onClick={logout}\n            variant=\"ghost\"\n            className=\"w-full justify-start text-emerald-200 hover:text-emerald-50 hover:bg-emerald-900/10 mt-2\"\n          >\n            <LogOut className=\"h-4 w-4 mr-3\" />\n            Cerrar sesión\n          </Button>\n        </nav>\n\n        {/* Badge estado */}\n        <div className=\"mt-auto pt-8\">\n          <div className=\"bg-gradient-to-r from-emerald-600/15 to-emerald-400/10 border border-emerald-500/25 rounded-lg p-3\">\n            <div className=\"flex items-center space-x-2\">\n              <Star className=\"w-4 h-4 text-emerald-400\" />\n              <span className=\"text-emerald-50 text-sm font-medium\">{partnerStats.tier}</span>\n            </div>\n          </div>\n        </div>\n      </aside>\n\n      {/* Main */}\n      <main className=\"flex-1 p-8 ml-64\">\n        {/* ===== PERFIL ===== */}\n        {activeTab === \"perfil\" && (\n          <div>\n            <div className=\"mb-8\">\n              <h1 className=\"text-3xl font-bold text-emerald-50\">Mi Perfil</h1>\n              <p className=\"text-emerald-200/80\">Gestiona tu información personal</p>\n            </div>\n\n            <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl\">\n              <CardContent className=\"p-6\">\n                <Tabs value={profileActiveTab} onValueChange={setProfileActiveTab} className=\"w-full\">\n                  <TabsList className=\"grid w-full grid-cols-2 bg-black/40 border border-emerald-500/15 rounded-xl\">\n                    <TabsTrigger\n                      value=\"personal\"\n                      className=\"data-[state=active]:bg-emerald-600/20 data-[state=active]:text-emerald-50 rounded-lg\"\n                    >\n                      Información Personal\n                    </TabsTrigger>\n                    <TabsTrigger\n                      value=\"kyc\"\n                      className=\"data-[state=active]:bg-emerald-600/20 data-[state=active]:text-emerald-50 rounded-lg\"\n                    >\n                      Estado KYC\n                    </TabsTrigger>\n                  </TabsList>\n\n                  <TabsContent value=\"personal\" className=\"mt-6\">\n                    <form className=\"space-y-6\">\n                      {/* Profile Photo */}\n                      <div className=\"flex flex-col items-center mb-8\">\n                        <div className=\"relative mb-4\">\n                          <div className=\"w-32 h-32 rounded-full overflow-hidden bg-black/50 border-2 border-emerald-500/20 flex items-center justify-center\">\n                            {profilePhoto ? (\n                              <img src={profilePhoto} alt=\"Foto de perfil\" className=\"w-full h-full object-cover\" />\n                            ) : (\n                              <User className=\"w-16 h-16 text-emerald-300\" />\n                            )}\n                          </div>\n                          <label\n                            htmlFor=\"photo-upload\"\n                            className=\"absolute bottom-0 right-0 bg-emerald-600 hover:bg-emerald-500 rounded-full p-2 cursor-pointer transition-colors\"\n                          >\n                            <Camera className=\"w-4 h-4 text-white\" />\n                          </label>\n                          <input id=\"photo-upload\" type=\"file\" accept=\"image/*\" onChange={handlePhotoUpload} className=\"hidden\" />\n                        </div>\n                        <p className=\"text-emerald-200/80 text-sm text-center\">Haz clic en el icono de cámara para subir tu foto</p>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div>\n                          <Label htmlFor=\"nombre\" className=\"text-emerald-50\">Nombre</Label>\n                          <Input id=\"nombre\" defaultValue=\"Test\" className=\"bg-black/50 border-emerald-500/20 text-emerald-50\" />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"apellidos\" className=\"text-emerald-50\">Apellidos</Label>\n                          <Input id=\"apellidos\" defaultValue=\"Placeholder\" className=\"bg-black/50 border-emerald-500/20 text-emerald-50\" />\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div>\n                          <Label htmlFor=\"email\" className=\"text-emerald-50\">Correo Electrónico</Label>\n                          <Input\n                            id=\"email\"\n                            defaultValue=\"test@test.com\"\n                            disabled\n                            className=\"bg-black/60 border-emerald-500/20 text-emerald-300/80 cursor-not-allowed\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"telefono\" className=\"text-emerald-50\">Número de Teléfono</Label>\n                          <div className=\"relative\">\n                            <Phone className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-emerald-300/70\" />\n                            <Input\n                              id=\"telefono\"\n                              value={phoneNumber}\n                              onChange={(e) => setPhoneNumber(e.target.value)}\n                              placeholder=\"Ej: +34 646 123 456\"\n                              className=\"bg-black/50 border-emerald-500/20 text-emerald-50 pl-10\"\n                            />\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div>\n                          <Label htmlFor=\"fecha-nacimiento\" className=\"text-emerald-50\">Fecha de Nacimiento</Label>\n                          <Input id=\"fecha-nacimiento\" defaultValue=\"25/02/1962\" className=\"bg-black/50 border-emerald-500/20 text-emerald-50\" />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"fecha-registro\" className=\"text-emerald-50\">Fecha de Registro</Label>\n                          <Input\n                            id=\"fecha-registro\"\n                            defaultValue=\"15/01/2024\"\n                            disabled\n                            className=\"bg-black/60 border-emerald-500/20 text-emerald-300/80 cursor-not-allowed\"\n                          />\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div>\n                          <Label htmlFor=\"pais\" className=\"text-emerald-50\">País</Label>\n                          <Select defaultValue=\"espana\">\n                            <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent className=\"bg-black/40 border-emerald-500/15 text-emerald-50\">\n                              <SelectItem value=\"espana\">España</SelectItem>\n                              <SelectItem value=\"francia\">Francia</SelectItem>\n                              <SelectItem value=\"portugal\">Portugal</SelectItem>\n                              <SelectItem value=\"italia\">Italia</SelectItem>\n                              <SelectItem value=\"alemania\">Alemania</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <div />\n                      </div>\n\n                      <div>\n                        <Label htmlFor=\"direccion\" className=\"text-emerald-50\">Dirección</Label>\n                        <Input\n                          id=\"direccion\"\n                          defaultValue=\"Calle Nueva Era 45, 2ºA, 08035 Barcelona\"\n                          className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                        />\n                      </div>\n\n                      <div className=\"pt-4\">\n                        <Button\n                          type=\"submit\"\n                          className=\"w-full rounded-xl bg-gradient-to-r from-emerald-600 to-emerald-500 hover:from-emerald-500 hover:to-emerald-400 text-white font-semibold\"\n                        >\n                          ACTUALIZAR INFORMACIÓN PERSONAL\n                        </Button>\n                      </div>\n                    </form>\n                  </TabsContent>\n\n                  <TabsContent value=\"kyc\" className=\"mt-6\">\n                    <div className=\"bg-black/40 rounded-xl p-8 border border-emerald-500/15\">\n                      <div className=\"flex items-center gap-4 mb-6\">\n                        <div className=\"bg-emerald-500/20 rounded-full p-3\">\n                          <User className=\"h-8 w-8 text-emerald-400\" />\n                        </div>\n                        <div className=\"flex-1\">\n                          <h3 className=\"text-2xl font-bold text-emerald-50 mb-1\">Verificación KYC</h3>\n                          <p className=\"text-emerald-200/80\">{kycMessage}</p>\n                        </div>\n                        <Badge className={`${kycBadgeClass} px-4 py-2 text-sm font-semibold`}>{kycStatus}</Badge>\n                      </div>\n\n                      {/* Documents Uploaded */}\n                      {currentKyc?.documentsUrls && currentKyc.documentsUrls.length > 0 && (\n                        <div className=\"mt-6 bg-emerald-500/10 border border-emerald-500/20 rounded-lg p-4\">\n                          <h4 className=\"text-emerald-300 font-semibold mb-4 flex items-center gap-2\">\n                            <FileText className=\"w-5 h-5\" />\n                            Documentos Subidos\n                          </h4>\n                          <div className=\"grid grid-cols-1 gap-3\">\n                            {currentKyc.documentsUrls.map((docUrl, index) => (\n                              <div key={index} className=\"flex items-center justify-between bg-black/30 rounded-lg p-4 border border-emerald-500/15\">\n                                <div className=\"flex items-center gap-3\">\n                                  <FileText className=\"w-5 h-5 text-emerald-400\" />\n                                  <div>\n                                    <p className=\"text-emerald-50 text-sm font-medium\">\n                                      Documento {index + 1}\n                                    </p>\n                                    <p className=\"text-emerald-300/70 text-xs\">\n                                      {docUrl.split('/').pop()?.substring(0, 40)}...\n                                    </p>\n                                  </div>\n                                </div>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  className=\"border-emerald-500/20 text-emerald-300 hover:bg-emerald-500/10\"\n                                  onClick={() => handleViewDocuments(currentKyc.documentsUrls)}\n                                >\n                                  Ver Documentos\n                                </Button>\n                              </div>\n                            ))}\n                          </div>\n                          \n                          {/* Quick View All Button */}\n                          <div className=\"mt-4 pt-4 border-t border-emerald-500/20\">\n                            <Button\n                              variant=\"outline\"\n                              className=\"w-full border-emerald-500/20 text-emerald-300 hover:bg-emerald-500/10\"\n                              onClick={() => handleViewDocuments(currentKyc.documentsUrls)}\n                            >\n                              <FileText className=\"w-4 h-4 mr-2\" />\n                              Ver Todos los Documentos\n                            </Button>\n                          </div>\n                        </div>\n                      )}\n\n                      {/* KYC Form */}\n                      <div className=\"mt-2 bg-black/40 rounded-xl p-6 border border-emerald-500/15\">\n                        <form onSubmit={handleKycSubmit} className=\"space-y-6\">\n                          {/* Personal Information */}\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                            <div className=\"space-y-2\">\n                              <Label className=\"text-emerald-50\">Nombre Completo</Label>\n                              <Input\n                                value={kycFormData.fullName}\n                                onChange={(e) => setKycFormData({ ...kycFormData, fullName: e.target.value })}\n                                placeholder=\"Introduce tu nombre completo\"\n                                className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                                required\n                              />\n                            </div>\n                            <div className=\"space-y-2\">\n                              <Label className=\"text-emerald-50\">Tipo de Documento</Label>\n                              <Select\n                                value={kycFormData.documentType}\n                                onValueChange={(value) => setKycFormData({ ...kycFormData, documentType: value })}\n                              >\n                                <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                                  <SelectValue />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value=\"dni\">DNI</SelectItem>\n                                  <SelectItem value=\"passport\">Pasaporte</SelectItem>\n                                  <SelectItem value=\"license\">Carnet de Conducir</SelectItem>\n                                </SelectContent>\n                              </Select>\n                            </div>\n                            <div className=\"space-y-2\">\n                              <Label className=\"text-emerald-50\">Número de Documento</Label>\n                              <Input\n                                value={kycFormData.documentNumber}\n                                onChange={(e) => setKycFormData({ ...kycFormData, documentNumber: e.target.value })}\n                                placeholder=\"Número del documento\"\n                                className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                                required\n                              />\n                            </div>\n                            <div className=\"space-y-2\">\n                              <Label className=\"text-emerald-50\">País</Label>\n                              <Input\n                                value={kycFormData.country}\n                                onChange={(e) => setKycFormData({ ...kycFormData, country: e.target.value })}\n                                placeholder=\"País de residencia\"\n                                className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                                required\n                              />\n                            </div>\n                          </div>\n\n                          {/* Document Upload */}\n                          <KycFileUpload \n                            onFilesUploaded={(urls) => setKycFormData({ ...kycFormData, documentsUrls: urls })}\n                            currentFiles={kycFormData.documentsUrls || []}\n                            disabled={kycStatus === \"Aprobado\"}\n                          />\n\n                          {/* Submit Button */}\n                          {kycStatus !== \"Aprobado\" && (\n                            <Button \n                              type=\"submit\" \n                              disabled={kycMutation.isPending || !kycFormData.fullName || !kycFormData.documentNumber || !kycFormData.documentsUrls?.length}\n                              className=\"w-full bg-emerald-600 hover:bg-emerald-500 text-white disabled:opacity-50\"\n                            >\n                              {kycMutation.isPending ? \"Enviando...\" : \n                               kycData?.kyc ? \"Actualizar documentos\" : \"Enviar documentos\"}\n                            </Button>\n                          )}\n\n                          {/* Status Messages */}\n                          {kycStatus === \"Pendiente\" && currentKyc && (\n                            <div className=\"bg-amber-500/10 border border-amber-500/20 rounded-lg p-4\">\n                              <p className=\"text-amber-300 text-sm\">\n                                Tus documentos están en revisión. Te notificaremos al finalizar.\n                              </p>\n                            </div>\n                          )}\n                          {kycStatus === \"Rechazado\" && (\n                            <div className=\"bg-red-500/10 border border-red-500/20 rounded-lg p-4\">\n                              <p className=\"text-red-300 text-sm font-medium mb-2\">Documentos rechazados</p>\n                              <p className=\"text-red-200 text-sm\">\n                                {kycFeedback || \"Revisa tus documentos y vuelve a subirlos.\"}\n                              </p>\n                            </div>\n                          )}\n                          {kycStatus === \"Aprobado\" && (\n                            <div className=\"bg-emerald-500/10 border border-emerald-500/20 rounded-lg p-4\">\n                              <p className=\"text-emerald-300 text-sm\">\n                                ✅ Tu verificación KYC está completa. Ya puedes operar sin límites.\n                              </p>\n                            </div>\n                          )}\n                        </form>\n                      </div>\n                    </div>\n                  </TabsContent>\n                </Tabs>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* ===== RESUMEN ===== */}\n        {activeTab === \"resumen\" && (\n          <div>\n            <div className=\"mb-8\">\n              <h1 className=\"text-4xl font-bold text-emerald-50 mb-2\">\n                Hola, {user?.name?.split(\" \")[0] ?? \"Partner\"}\n              </h1>\n              <p className=\"text-emerald-200/80 text-lg mb-6\">Bienvenido a tu panel de control ejecutivo</p>\n\n              {/* KPI grid (3 tarjetas) */}\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n                {[\n                  {\n                    label: \"Comisiones Este Mes\",\n                    value: `$${partnerStats.monthlyCommission.toLocaleString()}`,\n                    note: \"¡Excelente rendimiento!\",\n                    icon: DollarSign,\n                  },\n                  {\n                    label: \"Total Año 2025\",\n                    value: `$${(partnerStats.ytdCommission / 1000).toFixed(0)}K`,\n                    note: \"Objetivo: $250K (75% completado)\",\n                    icon: Star,\n                  },\n                  {\n                    label: partnerStats.daysToCommission === 1 ? \"Día para Cobro\" : \"Días para Cobro\",\n                    value: `${partnerStats.daysToCommission}`,\n                    note:\n                      partnerStats.daysToCommission <= 0\n                        ? \"¡Hoy es día de pago!\"\n                        : partnerStats.daysToCommission === 1\n                        ? \"Mañana es día de pago\"\n                        : \"Próximo pago de comisiones\",\n                    icon: Calendar,\n                  },\n                ].map(({ label, value, note, icon: Icon }, i) => (\n                  <Card\n                    key={i}\n                    className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)]\"\n                  >\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div>\n                          <p className=\"text-emerald-200/80 text-sm font-medium\">{label}</p>\n                          <p className=\"text-emerald-50 text-3xl font-bold\">{value}</p>\n                          <p className=\"text-emerald-400 text-xs\">{note}</p>\n                        </div>\n                        <Icon className=\"w-8 h-8 text-emerald-400\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n\n              {/* Progreso hacia tier */}\n              <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl shadow-[0_0_0_1px_rgba(16,185,129,0.12),0_20px_60px_-20px_rgba(16,185,129,0.25)] mb-8\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-6\">\n                    <div>\n                      <p className=\"text-emerald-200/80 text-sm font-medium\">Progreso hacia Diamond Partner</p>\n                      <div className=\"flex items-center gap-3\">\n                        <span className=\"text-emerald-50 text-4xl md:text-5xl font-extrabold\">\n                          {partnerStats.nextTierProgress}%\n                        </span>\n                        <Crown className=\"w-8 h-8 text-emerald-400\" />\n                      </div>\n                      <p className=\"text-emerald-400 text-sm\">Faltan $820K en volumen</p>\n                    </div>\n\n                    <div className=\"w-full md:max-w-xl\">\n                      <Progress\n                        value={partnerStats.nextTierProgress}\n                        className=\"h-4 bg-emerald-900/30 rounded-full [&>div]:bg-gradient-to-r [&>div]:from-emerald-500 [&>div]:to-emerald-400\"\n                      />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Métricas superiores DINÁMICAS basadas en clientes */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n              {[\n                { label: \"Clientes Activos\", value: resumenStats.activeClients, icon: Users, clickable: true },\n                {\n                  label: \"Volumen Activo\",\n                  value: `$${resumenStats.activeVolume.toLocaleString()}`,\n                  icon: TrendingUp,\n                  clickable: false,\n                },\n                { label: \"Por vencer (≤30 días)\", value: resumenStats.expiringSoon, icon: UserPlus, clickable: false },\n              ].map(({ label, value, icon: Icon, clickable }, i) => (\n                <Card \n                  key={i} \n                  className={`bg-black/40 border border-emerald-500/15 rounded-2xl ${\n                    clickable ? 'cursor-pointer hover:bg-black/50 hover:border-emerald-500/25 transition-all duration-200 hover:shadow-[0_0_0_1px_rgba(16,185,129,0.2)]' : ''\n                  }`}\n                  onClick={clickable ? () => setActiveTab(\"clientes\") : undefined}\n                >\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-emerald-200/80 text-sm font-medium\">{label}</p>\n                        <p className=\"text-emerald-50 text-3xl font-bold\">{value}</p>\n                        <p className=\"text-emerald-400 text-xs\">\n                          {clickable ? \"Click para ver detalles\" : \"Actualizado\"}\n                        </p>\n                      </div>\n                      <Icon className=\"w-8 h-8 text-emerald-400\" />\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n\n            {/* Chart */}\n            <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl mb-8\">\n              <CardHeader>\n                <CardTitle className=\"text-emerald-50\">\n                  <span className=\"inline-flex items-center gap-4\">\n                    Comparación: Con Interés vs Sin Interés Compuesto\n                    {/*<TooltipProvider delayDuration={100}>\n                      <Tooltip>\n                        <TooltipTrigger asChild>\n                          <HelpCircle className=\"w-8 h-8 text-emerald-300/90 hover:text-emerald-300 cursor-help\" />\n                        </TooltipTrigger>\n                        <TooltipContent\n                          side={tooltipSide}\n                          align={tooltipSide === \"right\" ? \"start\" : \"center\"}\n                          sideOffset={tooltipSide === \"right\" ? 12 : 8}\n                          avoidCollisions={tooltipSide === \"right\" ? false : true}\n                          className=\"max-w-[260px] md:max-w-[420px] lg:max-w-[440px] p-3 md:p-4 text-sm md:text-base leading-relaxed bg-black/100 text-emerald-50 border border-emerald-500/25 rounded-xl shadow-[0_10px_40px_rgba(0,0,0,0.45)]\"\n                        >\n                          El interés compuesto reinvierte automáticamente los intereses generados,\n                          así cada período calculas intereses sobre el capital inicial + los intereses previos.\n                        </TooltipContent>\n                      </Tooltip>\n                    </TooltipProvider>*/}\n                  </span>\n                </CardTitle>\n                <CardDescription className=\"text-emerald-200/80\">\n                  Visualización del crecimiento de €50,000 con 9% anual\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <CompoundInterestChart initialAmount={50000} rate={0.09} years={10} />\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* ===== CLIENTES ===== */}\n        {activeTab === \"clientes\" && (\n          <div>\n            <h1 className=\"text-3xl font-bold text-emerald-50 mb-2\">Gestión de Clientes</h1>\n            <p className=\"text-emerald-200/80 mb-6\">Administra tu cartera de inversores y gestiona renovaciones</p>\n\n            {/* Filtros */}\n            <div className=\"mb-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowFilters(!showFilters)}\n                  className=\"border-emerald-500/20 text-emerald-50 hover:bg-emerald-900/10\"\n                >\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  {showFilters ? \"Ocultar Filtros\" : \"Mostrar Filtros\"}\n                </Button>\n\n                {(Object.values(filters).some((v) => v !== \"\") || sortOrder !== \"\") && (\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => {\n                      setFilters({\n                        inversionMin: \"\",\n                        inversionMax: \"\",\n                        gananciasMin: \"\",\n                        gananciasMax: \"\",\n                        pais: \"\",\n                        sexo: \"\",\n                        estado: \"\",\n                      });\n                      setSortOrder(\"\");\n                      setQuickFilter(\"all\");\n                    }}\n                    className=\"text-emerald-200 hover:text-emerald-50\"\n                  >\n                    <X className=\"w-4 h-4 mr-2\" />\n                    Limpiar Filtros\n                  </Button>\n                )}\n              </div>\n\n              {showFilters && (\n                <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                      {/* Orden */}\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-emerald-50\">Ordenar por inversión</Label>\n                        <Select value={sortOrder} onValueChange={(v) => setSortOrder(v as \"asc\" | \"desc\")}>\n                          <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                            <SelectValue placeholder=\"Sin orden\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"desc\">Mayor a menor</SelectItem>\n                            <SelectItem value=\"asc\">Menor a mayor</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-emerald-50\">Inversión Inicial</Label>\n                        <div className=\"flex space-x-2\">\n                          <Input\n                            placeholder=\"Mín\"\n                            value={filters.inversionMin}\n                            onChange={(e) => setFilters({ ...filters, inversionMin: e.target.value })}\n                            className=\"bg-black/50 border-emerald-500/20 text-emerald-50 placeholder:text-emerald-200/60\"\n                          />\n                          <Input\n                            placeholder=\"Máx\"\n                            value={filters.inversionMax}\n                            onChange={(e) => setFilters({ ...filters, inversionMax: e.target.value })}\n                            className=\"bg-black/50 border-emerald-500/20 text-emerald-50 placeholder:text-emerald-200/60\"\n                          />\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-emerald-50\">Dinero Ganado</Label>\n                        <div className=\"flex space-x-2\">\n                          <Input\n                            placeholder=\"Mín\"\n                            value={filters.gananciasMin}\n                            onChange={(e) => setFilters({ ...filters, gananciasMin: e.target.value })}\n                            className=\"bg-black/50 border-emerald-500/20 text-emerald-50 placeholder:text-emerald-200/60\"\n                          />\n                          <Input\n                            placeholder=\"Máx\"\n                            value={filters.gananciasMax}\n                            onChange={(e) => setFilters({ ...filters, gananciasMax: e.target.value })}\n                            className=\"bg-black/50 border-emerald-500/20 text-emerald-50 placeholder:text-emerald-200/60\"\n                          />\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-emerald-50\">País</Label>\n                        <Select value={filters.pais} onValueChange={(value) => setFilters({ ...filters, pais: value })}>\n                          <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                            <SelectValue placeholder=\"Seleccionar país\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {[\"España\", \"Francia\", \"Portugal\", \"Italia\", \"Alemania\"].map((p) => (\n                              <SelectItem key={p} value={p}>\n                                {p}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-emerald-50\">Sexo</Label>\n                        <Select value={filters.sexo} onValueChange={(value) => setFilters({ ...filters, sexo: value })}>\n                          <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                            <SelectValue placeholder=\"Seleccionar sexo\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"Hombre\">Hombre</SelectItem>\n                            <SelectItem value=\"Mujer\">Mujer</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-emerald-50\">Estado</Label>\n                        <Select value={filters.estado} onValueChange={(value) => setFilters({ ...filters, estado: value })}>\n                          <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                            <SelectValue placeholder=\"Seleccionar estado\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"Activo\">Activo</SelectItem>\n                            <SelectItem value=\"Vencido\">Vencido</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n\n            {/* Stats rápidos (dinámicos) */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n              {[\n                { key: \"all\",       value: String(statsClients.total),   label: \"Total Clientes\" },\n                { key: \"activos\",   value: String(statsClients.activos), label: \"Activos\" },\n                { key: \"compuesto\", value: String(statsClients.comp),    label: \"Con Interés Compuesto\" },\n                { key: \"vencidos\",  value: String(statsClients.vencidos),label: \"Vencidos\" },\n              ].map(({ key, value, label }) => {\n                const active = quickFilter === (key as typeof quickFilter);\n                const baseBorder =\n                  key === \"activos\"   ? \"border-emerald-500/25\" :\n                  key === \"compuesto\" ? \"border-amber-500/20\" :\n                  key === \"vencidos\"  ? \"border-red-500/20\"   :\n                                        \"border-emerald-500/15\";\n                const baseText =\n                  key === \"activos\"   ? \"text-emerald-400\" :\n                  key === \"compuesto\" ? \"text-amber-400\"   :\n                  key === \"vencidos\"  ? \"text-red-400\"     :\n                                        \"text-emerald-50\";\n\n                return (\n                  <Card\n                    key={key}\n                    role=\"button\"\n                    onClick={() => setQuickFilter(key as typeof quickFilter)}\n                    className={[\n                      \"bg-black/40 rounded-2xl cursor-pointer select-none transition-all border\",\n                      baseBorder,\n                      active ? \"ring-1 ring-emerald-400/60\" : \"\",\n                      \"hover:shadow-[0_0_0_1px_rgba(16,185,129,0.25),0_10px_30px_-12px_rgba(16,185,129,0.35)]\",\n                    ].join(\" \")}\n                  >\n                    <CardContent className=\"p-4 text-center\">\n                      <div className={`text-2xl font-bold ${baseText}`}>{value}</div>\n                      <p className=\"text-emerald-200/80 text-sm\">{label}</p>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n\n            {/* Cartera */}\n            <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl\">\n              {/* Encabezado izquierda + botón */}\n              <CardHeader className=\"items-start\">\n                <CardTitle className=\"text-emerald-50\">Cartera de Clientes</CardTitle>\n                <CardDescription className=\"text-emerald-200/80\">\n                  Información detallada para seguimiento y renovaciones\n                </CardDescription>\n                <div className=\"mt-4\">\n                  <Button\n                    variant={showAddClient ? \"outline\" : \"default\"}\n                    onClick={() => setShowAddClient((v) => !v)}\n                    className={showAddClient ? \"border-emerald-500/25\" : \"bg-emerald-600 hover:bg-emerald-500\"}\n                  >\n                    {showAddClient ? <X className=\"w-4 h-4 mr-2\" /> : <PlusCircle className=\"w-4 h-4 mr-2\" />}\n                    {showAddClient ? \"Cancelar\" : \"Añadir cliente\"}\n                  </Button>\n                </div>\n              </CardHeader>\n\n              <CardContent>\n                {/* Formulario alta */}\n                {showAddClient && (\n                  <form\n                    onSubmit={handleAddClient}\n                    className=\"mb-6 grid grid-cols-1 lg:grid-cols-3 gap-4 bg-black/30 p-4 rounded-xl border border-emerald-500/15\"\n                  >\n                    <div className=\"space-y-1\">\n                      <Label className=\"text-emerald-50\">Nombre</Label>\n                      <Input\n                        value={newClient.name}\n                        onChange={(e) => setNewClient({ ...newClient, name: e.target.value })}\n                        className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                        required\n                      />\n                    </div>\n                    <div className=\"space-y-1\">\n                      <Label className=\"text-emerald-50\">Email</Label>\n                      <Input\n                        value={newClient.email}\n                        onChange={(e) => setNewClient({ ...newClient, email: e.target.value })}\n                        className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                      />\n                    </div>\n                    <div className=\"space-y-1\">\n                      <Label className=\"text-emerald-50\">Teléfono</Label>\n                      <Input\n                        value={newClient.phone}\n                        onChange={(e) => setNewClient({ ...newClient, phone: e.target.value })}\n                        className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-1\">\n                      <Label className=\"text-emerald-50\">Inversión (€)</Label>\n                      <Input\n                        type=\"number\"\n                        value={newClient.investment}\n                        onChange={(e) => setNewClient({ ...newClient, investment: parseFloat(e.target.value || \"0\") })}\n                        className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                        min={0}\n                      />\n                    </div>\n                    <div className=\"space-y-1\">\n                      <Label className=\"text-emerald-50\">Rendimientos (€)</Label>\n                      <Input\n                        type=\"number\"\n                        value={newClient.returns}\n                        onChange={(e) => setNewClient({ ...newClient, returns: parseFloat(e.target.value || \"0\") })}\n                        className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                        min={0}\n                      />\n                    </div>\n                    <div className=\"space-y-1\">\n                      <Label className=\"text-emerald-50\">Tier</Label>\n                      <Select value={newClient.tier} onValueChange={(v) => setNewClient({ ...newClient, tier: v })}>\n                        <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                          <SelectValue placeholder=\"Tier\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"Elite\">Elite</SelectItem>\n                          <SelectItem value=\"Premium\">Premium</SelectItem>\n                          <SelectItem value=\"Standard\">Standard</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-1\">\n                      <Label className=\"text-emerald-50\">Estado</Label>\n                      <Select value={newClient.status} onValueChange={(v: \"Activo\" | \"Vencido\") => setNewClient({ ...newClient, status: v })}>\n                        <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                          <SelectValue placeholder=\"Estado\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"Activo\">Activo</SelectItem>\n                          <SelectItem value=\"Vencido\">Vencido</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"space-y-1\">\n                      <Label className=\"text-emerald-50\">Fecha Depósito</Label>\n                      <Input\n                        type=\"date\"\n                        value={newClient.depositDate}\n                        onChange={(e) => setNewClient({ ...newClient, depositDate: e.target.value })}\n                        className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                      />\n                    </div>\n                    <div className=\"space-y-1\">\n                      <Label className=\"text-emerald-50\">Fecha Vencimiento</Label>\n                      <Input\n                        type=\"date\"\n                        value={newClient.maturityDate}\n                        onChange={(e) => setNewClient({ ...newClient, maturityDate: e.target.value })}\n                        className=\"bg-black/50 border-emerald-500/20 text-emerald-50\"\n                      />\n                    </div>\n                    <div className=\"space-y-1\">\n                      <Label className=\"text-emerald-50\">País</Label>\n                      <Select value={newClient.pais} onValueChange={(v) => setNewClient({ ...newClient, pais: v })}>\n                        <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                          <SelectValue placeholder=\"País\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {[\"España\", \"Francia\", \"Portugal\", \"Italia\", \"Alemania\"].map((p) => (\n                            <SelectItem key={p} value={p}>\n                              {p}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <Label className=\"text-emerald-50\">Sexo</Label>\n                      <Select value={newClient.sexo} onValueChange={(v: \"Hombre\" | \"Mujer\") => setNewClient({ ...newClient, sexo: v })}>\n                        <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                          <SelectValue placeholder=\"Sexo\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"Hombre\">Hombre</SelectItem>\n                          <SelectItem value=\"Mujer\">Mujer</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <Label className=\"text-emerald-50\">Interés Compuesto</Label>\n                      <Select\n                        value={newClient.compoundInterest ? \"si\" : \"no\"}\n                        onValueChange={(v) => setNewClient({ ...newClient, compoundInterest: v === \"si\" })}\n                      >\n                        <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                          <SelectValue placeholder=\"Sí / No\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"si\">Sí</SelectItem>\n                          <SelectItem value=\"no\">No</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"flex items-end\">\n                      <Button type=\"submit\" className=\"w-full bg-emerald-600 hover:bg-emerald-500\">\n                        <PlusCircle className=\"w-4 h-4 mr-2\" />\n                        Guardar\n                      </Button>\n                    </div>\n                  </form>\n                )}\n\n                {/* Lista de clientes */}\n                <div className=\"space-y-6\">\n                  {filteredClients.map((client) => {\n                    const daysToMaturity = Math.ceil(\n                      (new Date(client.maturityDate).getTime() - new Date().getTime()) / (1000 * 3600 * 24)\n                    );\n                    const isNearMaturity = daysToMaturity <= 30 && daysToMaturity > 0;\n                    const isExpired = daysToMaturity <= 0;\n\n                    return (\n                      <Card\n                        key={client.id}\n                        className={`relative bg-black/30 border ${\n                          isNearMaturity ? \"border-amber-500/50\" : isExpired ? \"border-red-500/50\" : \"border-emerald-500/15\"\n                        } hover:bg-black/40 transition-all rounded-2xl`}\n                      >\n                        {/* Eliminar */}\n                        <div className=\"absolute top-3 right-3 z-[1]\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"icon\"\n                            onClick={() => handleDeleteClient(client.id, client.name)}\n                            className=\"border-red-500/30 text-red-300 hover:bg-red-500/10\"\n                            title=\"Eliminar cliente\"\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n\n                        <CardContent className=\"p-6\">\n                          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                            {/* Info */}\n                            <div className=\"space-y-4\">\n                              <div className=\"flex items-center space-x-4\">\n                                <div className=\"w-12 h-12 bg-gradient-to-br from-emerald-500/20 to-emerald-500/10 rounded-full flex items-center justify-center\">\n                                  <span className=\"text-emerald-400 font-semibold\">\n                                    {client.name\n                                      .split(\" \")\n                                      .map((n) => n[0])\n                                      .join(\"\")}\n                                  </span>\n                                </div>\n                                <div>\n                                  <h3 className=\"text-emerald-50 font-semibold text-lg\">{client.name}</h3>\n                                  <div className=\"flex items-center space-x-2\">\n                                    <Badge variant=\"outline\" className=\"text-xs border-emerald-500/25 text-emerald-200\">\n                                      {client.tier}\n                                    </Badge>\n                                    <Badge\n                                      variant=\"outline\"\n                                      className={`text-xs border ${\n                                        client.status === \"Activo\"\n                                          ? \"border-emerald-500/40 text-emerald-300\"\n                                          : isNearMaturity\n                                          ? \"border-amber-500/40 text-amber-300\"\n                                          : \"border-emerald-500/25 text-emerald-200\"\n                                      }`}\n                                    >\n                                      {client.status}\n                                    </Badge>\n                                  </div>\n                                </div>\n                              </div>\n\n                              <div className=\"space-y-2 text-sm\">\n                                <p className=\"text-emerald-200/80\">{client.email}</p>\n                                <p className=\"text-emerald-200/80\">{client.phone}</p>\n                                <div className=\"flex items-center space-x-2\">\n                                  <Badge variant=\"outline\" className=\"text-xs border-emerald-500/20 text-emerald-200/90\">\n                                    {client.pais}\n                                  </Badge>\n                                  <Badge variant=\"outline\" className=\"text-xs border-emerald-500/20 text-emerald-200/90\">\n                                    {client.sexo}\n                                  </Badge>\n                                </div>\n                              </div>\n                            </div>\n\n                            {/* Detalles */}\n                            <div className=\"space-y-4\">\n                              <div>\n                                <p className=\"text-emerald-200/80 text-sm\">Inversión Inicial</p>\n                                <p className=\"text-emerald-50 font-bold text-2xl\">${client.investment.toLocaleString()}</p>\n                              </div>\n\n                              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                                <div className=\"space-y-2\">\n                                  <div>\n                                    <p className=\"text-emerald-200/80\">Fecha Depósito</p>\n                                    <p className=\"text-emerald-50 font-medium\">\n                                      {new Date(client.depositDate).toLocaleDateString(\"es-ES\")}\n                                    </p>\n                                  </div>\n                                  <div>\n                                    <p className=\"text-emerald-200/80\">Interés Compuesto</p>\n                                    <p className={`font-medium ${client.compoundInterest ? \"text-emerald-400\" : \"text-amber-400\"}`}>\n                                      {client.compoundInterest ? \"Sí\" : \"No\"}\n                                    </p>\n                                  </div>\n                                </div>\n\n                                <div>\n                                  <p className=\"text-emerald-200/80\">Fecha Vencimiento</p>\n                                  <p className=\"text-emerald-50 font-medium\">\n                                    {new Date(client.maturityDate).toLocaleDateString(\"es-ES\")}\n                                  </p>\n                                  <p\n                                    className={`text-sm font-medium ${\n                                      isExpired ? \"text-red-400\" : isNearMaturity ? \"text-amber-400\" : \"text-emerald- 400\"\n                                    }`}\n                                  >\n                                    {isExpired\n                                      ? \"Vencido\"\n                                      : isNearMaturity\n                                      ? `Vence en ${daysToMaturity} días`\n                                      : `${daysToMaturity} días restantes`}\n                                  </p>\n                                </div>\n                              </div>\n                            </div>\n\n                            {/* Rendimientos + acciones */}\n                            <div className=\"space-y-4\">\n                              <div>\n                                <p className=\"text-emerald-200/80 text-sm\">Rendimientos</p>\n                                <p className=\"text-emerald-400 font-extrabold text-3xl\">\n                                  +${client.returns.toLocaleString()}\n                                </p>\n                              </div>\n\n                              <div className=\"space-y-2\">\n                                {(isNearMaturity || isExpired) && (\n                                  <Button className=\"w-full bg-gradient-to-r from-emerald-600 to-emerald-500 hover:from-emerald-500 hover:to-emerald-400 text-white text-sm\">\n                                    Gestionar Renovación\n                                  </Button>\n                                )}\n                                <Button\n                                  variant=\"outline\"\n                                  className=\"w-full text-emerald-50 border-emerald-500/20 hover:bg-emerald-900/10 text-sm\"\n                                >\n                                  Ver Detalle Completo\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* ===== CONTRATOS ===== */}\n        {activeTab === \"contratos\" && (\n          <div>\n            <h1 className=\"text-3xl font-bold text-emerald-50 mb-2\">Contratos Firmados</h1>\n            <p className=\"text-emerald-200/80 mb-6\">Accede y descarga todos tus contratos y documentos legales</p>\n\n            {/* Filtros Contratos */}\n            <div className=\"mb-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowContractFilters(!showContractFilters)}\n                  className=\"border-emerald-500/20 text-emerald-50 hover:bg-emerald-900/10\"\n                >\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  {showContractFilters ? \"Ocultar Filtros\" : \"Mostrar Filtros\"}\n                </Button>\n\n                {(Object.values(contractFilters).some((v) => v !== \"\") || contractSort !== \"\") && (\n                  <Button\n                    variant=\"ghost\"\n                    onClick={() => {\n                      setContractFilters({\n                        search: \"\",\n                        status: \"\",\n                        type: \"\",\n                        tier: \"\",\n                        amountMin: \"\",\n                        amountMax: \"\",\n                        signedFrom: \"\",\n                        signedTo: \"\",\n                        vencimiento: \"\",\n                      });\n                      setContractSort(\"\");\n                    }}\n                    className=\"text-emerald-200 hover:text-emerald-50\"\n                  >\n                    <X className=\"w-4 h-4 mr-2\" />\n                    Limpiar Filtros\n                  </Button>\n                )}\n              </div>\n\n              {showContractFilters && (\n                <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                      {/* Búsqueda */}\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-emerald-50\">Búsqueda</Label>\n                        <Input\n                          placeholder=\"Buscar por cliente o tipo de contrato…\"\n                          value={contractFilters.search}\n                          onChange={(e) => setContractFilters({ ...contractFilters, search: e.target.value })}\n                          className=\"bg-black/50 border-emerald-500/20 text-emerald-50 placeholder:text-emerald-200/60\"\n                        />\n                      </div>\n\n                      {/* Estado */}\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-emerald-50\">Estado del Contrato</Label>\n                        <Select\n                          value={contractFilters.status}\n                          onValueChange={(value) => setContractFilters({ ...contractFilters, status: value })}\n                        >\n                          <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                            <SelectValue placeholder=\"Todos los estados\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"Vigente\">Vigente</SelectItem>\n                            <SelectItem value=\"Vencido\">Vencido</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      {/* Tipo */}\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-emerald-50\">Tipo de Producto</Label>\n                        <Select\n                          value={contractFilters.type}\n                          onValueChange={(value) => setContractFilters({ ...contractFilters, type: value })}\n                        >\n                          <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                            <SelectValue placeholder=\"Todos los tipos\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"Inversión Estructurada\">Inversión Estructurada</SelectItem>\n                            <SelectItem value=\"Plan de Ahorro\">Plan de Ahorro</SelectItem>\n                            <SelectItem value=\"Inversión Patrimonial\">Inversión Patrimonial</SelectItem>\n                            <SelectItem value=\"Contrato Marco\">Contrato Marco</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      {/* Tier del Cliente */}\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-emerald-50\">Categoría del Cliente</Label>\n                        <Select\n                          value={contractFilters.tier}\n                          onValueChange={(value) => setContractFilters({ ...contractFilters, tier: value })}\n                        >\n                          <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                            <SelectValue placeholder=\"Todas las categorías\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"Standard\">Standard</SelectItem>\n                            <SelectItem value=\"Premium\">Premium</SelectItem>\n                            <SelectItem value=\"Elite\">Elite</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      {/* Importe Invertido */}\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-emerald-50\">Importe Invertido (€)</Label>\n                        <div className=\"flex space-x-2\">\n                          <Input\n                            placeholder=\"Mínimo\"\n                            value={contractFilters.amountMin}\n                            onChange={(e) => setContractFilters({ ...contractFilters, amountMin: e.target.value })}\n                            className=\"bg-black/50 border-emerald-500/20 text-emerald-50 placeholder:text-emerald-200/60\"\n                          />\n                          <Input\n                            placeholder=\"Máximo\"\n                            value={contractFilters.amountMax}\n                            onChange={(e) => setContractFilters({ ...contractFilters, amountMax: e.target.value })}\n                            className=\"bg-black/50 border-emerald-500/20 text-emerald-50 placeholder:text-emerald-200/60\"\n                          />\n                        </div>\n                      </div>\n\n                      {/* Orden */}\n                      <div className=\"space-y-2\">\n                        <Label className=\"text-emerald-50\">Ordenar por</Label>\n                        <Select value={contractSort} onValueChange={(v) => setContractSort(v as typeof contractSort)}>\n                          <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                            <SelectValue placeholder=\"Sin orden específico\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"amountDesc\">Mayor importe invertido</SelectItem>\n                            <SelectItem value=\"amountAsc\">Menor importe invertido</SelectItem>\n                            <SelectItem value=\"endAsc\">Próximos a vencer</SelectItem>\n                            <SelectItem value=\"endDesc\">Vencimiento más lejano</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n\n            {/* Lista de contratos */}\n            {(() => {\n              const contractsData = [\n                {\n                  cliente: \"María González Martín\",\n                  type: \"Inversión Estructurada\",\n                  tier: \"Premium\",\n                  amount: 250000,\n                  status: \"Vigente\",\n                  signedDate: \"2024-06-15\",\n                  endDate: \"2025-06-15\",\n                  fileUrl: \"#\",\n                  duracion: \"12 meses\",\n                  comision: 8500,\n                  renovaciones: 2,\n                },\n                {\n                  cliente: \"Carlos Ruiz Fernández\",\n                  type: \"Plan de Ahorro\",\n                  tier: \"Standard\",\n                  amount: 85000,\n                  status: \"Vigente\",\n                  signedDate: \"2024-03-10\",\n                  endDate: \"2025-03-10\",\n                  fileUrl: \"#\",\n                  duracion: \"12 meses\",\n                  comision: 3200,\n                  renovaciones: 1,\n                },\n                {\n                  cliente: \"Ana López Santos\",\n                  type: \"Inversión Patrimonial\",\n                  tier: \"Elite\",\n                  amount: 500000,\n                  status: \"Vencido\",\n                  signedDate: \"2023-08-20\",\n                  endDate: \"2024-08-20\",\n                  fileUrl: \"#\",\n                  duracion: \"12 meses\",\n                  comision: 18000,\n                  renovaciones: 0,\n                },\n                {\n                  cliente: \"Miguel Santos Torres\",\n                  type: \"Contrato Marco\",\n                  tier: \"Premium\",\n                  amount: 180000,\n                  status: \"Vencido\",\n                  signedDate: \"2023-11-15\",\n                  endDate: \"2024-11-15\",\n                  fileUrl: \"#\",\n                  duracion: \"12 meses\",\n                  comision: 6200,\n                  renovaciones: 3,\n                },\n              ];\n\n              const q = contractFilters.search.trim().toLowerCase();\n              const min = contractFilters.amountMin ? parseFloat(contractFilters.amountMin) : -Infinity;\n              const max = contractFilters.amountMax ? parseFloat(contractFilters.amountMax) : Infinity;\n              const from = contractFilters.signedFrom ? new Date(contractFilters.signedFrom) : null;\n              const to = contractFilters.signedTo ? new Date(contractFilters.signedTo) : null;\n              const vencLimit = contractFilters.vencimiento ? parseInt(contractFilters.vencimiento, 10) : null;\n\n              const filtered = contractsData\n                .filter((c) => {\n                  const matchSearch =\n                    !q ||\n                    c.cliente.toLowerCase().includes(q) ||\n                    c.type.toLowerCase().includes(q);\n                  const matchStatus = !contractFilters.status || c.status === contractFilters.status;\n                  const matchType = !contractFilters.type || c.type === contractFilters.type;\n                  const matchTier = !contractFilters.tier || c.tier === contractFilters.tier;\n                  const matchAmount = c.amount >= min && c.amount <= max;\n\n                  const signed = new Date(c.signedDate);\n                  const matchFrom = !from || signed >= from;\n                  const matchTo = !to || signed <= to;\n\n                  const end = new Date(c.endDate);\n                  const daysLeft = Math.ceil((end.getTime() - Date.now()) / 86400000);\n                  const matchVenc = !vencLimit || (daysLeft > 0 && daysLeft <= vencLimit);\n\n                  return (\n                    matchSearch &&\n                    matchStatus &&\n                    matchType &&\n                    matchTier &&\n                    matchAmount &&\n                    matchFrom &&\n                    matchTo &&\n                    matchVenc\n                  );\n                })\n                .sort((a, b) => {\n                  if (contractSort === \"amountDesc\") return b.amount - a.amount;\n                  if (contractSort === \"amountAsc\") return a.amount - b.amount;\n                  if (contractSort === \"endAsc\") return +new Date(a.endDate) - +new Date(b.endDate);\n                  if (contractSort === \"endDesc\") return +new Date(b.endDate) - +new Date(a.endDate);\n                  return 0;\n                });\n\n              return (\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-xl font-semibold text-emerald-50\">Listado de Contratos</h3>\n                    <p className=\"text-emerald-200/80\">\n                      {filtered.length} contrato{filtered.length !== 1 ? \"s\" : \"\"}\n                    </p>\n                  </div>\n                  \n                  <div className=\"space-y-3\">\n                    {filtered.map((c, index) => {\n                      const end = new Date(c.endDate);\n                      const daysLeft = Math.ceil((end.getTime() - Date.now()) / 86400000);\n                      const isNear = daysLeft <= 30 && daysLeft > 0;\n                      const isExpired = daysLeft <= 0;\n                      const isVigente = c.status === \"Vigente\";\n\n                      return (\n                        <Card\n                          key={`${c.cliente}-${index}`}\n                          className={`bg-black/30 ${\n                            isVigente ? \"border-2 border-emerald-400\" : \n                            isExpired ? \"border border-red-500/50\" : \n                            \"border border-emerald-500/15\"\n                          } rounded-xl hover:bg-black/40 transition-colors`}\n                        >\n                          <CardContent className=\"p-6\">\n                            <div className=\"flex flex-col lg:flex-row lg:items-center justify-between gap-6\">\n                              {/* Cliente y Tipo */}\n                              <div className=\"flex items-center gap-4 flex-1\">\n                                <div className={`p-3 rounded-xl ${\n                                  isVigente ? \"bg-emerald-500/20 border border-emerald-500/30\" : \n                                  isExpired ? \"bg-red-500/20 border border-red-500/30\" : \n                                  \"bg-gray-500/20 border border-gray-500/30\"\n                                }`}>\n                                  <FileText className={`w-6 h-6 ${\n                                    isVigente ? \"text-emerald-400\" : \n                                    isExpired ? \"text-red-400\" : \n                                    \"text-gray-400\"\n                                  }`} />\n                                </div>\n                                <div className=\"flex-1\">\n                                  <p className=\"text-emerald-50 font-bold text-lg\">{c.cliente}</p>\n                                  <p className=\"text-emerald-200/80 text-sm font-medium\">{c.type}</p>\n                                  <div className=\"flex items-center gap-3 mt-2\">\n                                    <Badge \n                                      variant=\"outline\" \n                                      className={`text-xs border ${\n                                        isVigente ? \"border-emerald-500/40 text-emerald-300 bg-emerald-500/10\" : \n                                        isExpired ? \"border-red-500/40 text-red-300 bg-red-500/10\" : \n                                        \"border-gray-500/40 text-gray-300 bg-gray-500/10\"\n                                      }`}\n                                    >\n                                      {c.status}\n                                    </Badge>\n                                    <Badge variant=\"outline\" className=\"text-xs border-emerald-500/25 text-emerald-200\">\n                                      {c.tier}\n                                    </Badge>\n                                  </div>\n                                </div>\n                              </div>\n\n                              {/* Información Financiera */}\n                              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 flex-1\">\n                                <div>\n                                  <p className=\"text-emerald-200/60 text-xs font-medium uppercase tracking-wide\">Importe Invertido</p>\n                                  <p className=\"text-emerald-50 font-bold text-lg\">\n                                    €{c.amount.toLocaleString()}\n                                  </p>\n                                </div>\n                                \n                                <div>\n                                  <p className=\"text-emerald-200/60 text-xs font-medium uppercase tracking-wide\">Inicio del Contrato</p>\n                                  <p className=\"text-emerald-50 font-medium\">\n                                    {new Date(c.signedDate).toLocaleDateString(\"es-ES\")}\n                                  </p>\n                                </div>\n                                \n                                <div>\n                                  <p className=\"text-emerald-200/60 text-xs font-medium uppercase tracking-wide\">Vencimiento</p>\n                                  <p className=\"text-emerald-50 font-medium\">\n                                    {end.toLocaleDateString(\"es-ES\")}\n                                  </p>\n                                  <p\n                                    className={`text-xs font-medium ${\n                                      isExpired ? \"text-red-400\" : isNear ? \"text-amber-400\" : \"text-emerald-400\"\n                                    }`}\n                                  >\n                                    {isExpired\n                                      ? \"Vencido\"\n                                      : daysLeft === 1\n                                      ? \"Mañana\"\n                                      : daysLeft <= 0\n                                      ? \"—\"\n                                      : `En ${daysLeft} días`}\n                                  </p>\n                                </div>\n                              </div>\n\n                              {/* Acciones */}\n                              <div className=\"flex gap-2\">\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  className=\"border-emerald-500/25 text-emerald-50 hover:bg-emerald-900/10\"\n                                  onClick={() => window.open(c.fileUrl, \"_blank\", \"noopener,noreferrer\")}\n                                >\n                                  <Download className=\"w-4 h-4 mr-2\" />\n                                  Descargar\n                                </Button>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      );\n                    })}\n                  </div>\n                </div>\n              );\n            })()}\n          </div>\n        )}\n\n        {/* ===== HERRAMIENTAS ===== */}\n        {activeTab === \"herramientas\" && (\n          <div>\n            <h1 className=\"text-3xl font-bold text-emerald-50 mb-2\">Herramientas de Partner</h1>\n            <p className=\"text-emerald-200/80 mb-6\">Gestión de agenda, material de marketing y recursos para partners</p>\n\n            <Tabs defaultValue=\"calendario\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2 bg-black/40 border border-emerald-500/15\">\n                <TabsTrigger value=\"calendario\" className=\"data-[state=active]:bg-emerald-500/20 data-[state=active]:text-emerald-50\">\n                  <Calendar className=\"w-4 h-4 mr-2\" />\n                  Calendario\n                </TabsTrigger>\n                <TabsTrigger value=\"material\" className=\"data-[state=active]:bg-emerald-500/20 data-[state=active]:text-emerald-50\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Material Descargable\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"calendario\" className=\"mt-6\">\n                <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl\">\n                  <CardHeader className=\"space-y-4\">\n                    <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n                      <div className=\"flex items-center gap-3\">\n                        <Briefcase className=\"w-5 h-5 text-emerald-400\" />\n                        <div>\n                          <CardTitle className=\"text-emerald-50\">Google Calendar</CardTitle>\n                          <CardDescription className=\"text-emerald-200/80\">\n                            Consulta festivos y organiza tus citas\n                          </CardDescription>\n                        </div>\n                      </div>\n\n                      <div className=\"flex gap-3\">\n                        {/* Vista */}\n                        <div className=\"w-40\">\n                          <Select value={gcalView} onValueChange={(v) => setGcalView(v as \"month\" | \"week\" | \"agenda\")}>\n                            <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                              <SelectValue placeholder=\"Vista\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"month\">Mes</SelectItem>\n                              <SelectItem value=\"week\">Semana</SelectItem>\n                              <SelectItem value=\"agenda\">Agenda</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n\n                        {/* Zona horaria */}\n                        <div className=\"w-56\">\n                          <Select value={gcalTz} onValueChange={(v) => setGcalTz(v)}>\n                            <SelectTrigger className=\"bg-black/50 border-emerald-500/20 text-emerald-50\">\n                              <SelectValue placeholder=\"Zona horaria\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"Europe/Madrid\">Europe/Madrid</SelectItem>\n                              <SelectItem value=\"Europe/Lisbon\">Europe/Lisbon</SelectItem>\n                              <SelectItem value=\"Europe/Paris\">Europe/Paris</SelectItem>\n                              <SelectItem value=\"UTC\">UTC</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n\n                        <Button\n                          onClick={handleOpenGoogleCalendar}\n                          className=\"bg-emerald-600 hover:bg-emerald-500 text-white\"\n                        >\n                          <Calendar className=\"w-4 h-4 mr-2\" />\n                          Abrir Google Calendar\n                        </Button>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"rounded-xl overflow-hidden border border-emerald-500/15\">\n                      <iframe\n                        title=\"Calendario público\"\n                        src={gcalEmbedUrl}\n                        className=\"w-full h-[720px]\"\n                        style={{ border: 0 }}\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"material\" className=\"mt-6\">\n                <Card className=\"bg-black/40 border border-emerald-500/15 rounded-2xl\">\n                  <CardHeader>\n                    <div className=\"flex items-center gap-3\">\n                      <Download className=\"w-6 h-6 text-emerald-400\" />\n                      <div>\n                        <CardTitle className=\"text-emerald-50\">Material Descargable</CardTitle>\n                        <CardDescription className=\"text-emerald-200/80\">\n                          PDFs de marketing, presentaciones y plantillas de contratos estándar\n                        </CardDescription>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-8\">\n                    {/* Marketing Materials */}\n                    <div>\n                      <h4 className=\"text-emerald-50 font-semibold mb-4 flex items-center gap-2\">\n                        <Briefcase className=\"w-5 h-5 text-emerald-400\" />\n                        Material de Marketing\n                      </h4>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        {[\n                          { name: \"Brochure Nakama&Partners 2025\", size: \"2.4 MB\", type: \"PDF\", desc: \"Presentación corporativa completa\" },\n                          { name: \"Presentación Productos\", size: \"8.1 MB\", type: \"PPTX\", desc: \"Catálogo de inversiones disponibles\" },\n                          { name: \"Infografías Rentabilidad\", size: \"1.2 MB\", type: \"PDF\", desc: \"Gráficos comparativos de rendimiento\" },\n                          { name: \"Material Redes Sociales\", size: \"5.7 MB\", type: \"ZIP\", desc: \"Banners, posts y contenido digital\" }\n                        ].map((item, index) => (\n                          <div key={index} className=\"flex items-center justify-between p-4 bg-black/30 rounded-lg border border-emerald-500/10 hover:bg-black/40 transition-colors\">\n                            <div className=\"flex items-center gap-3\">\n                              <FileText className=\"w-5 h-5 text-emerald-400\" />\n                              <div>\n                                <p className=\"text-emerald-50 font-medium\">{item.name}</p>\n                                <p className=\"text-emerald-200/60 text-sm\">{item.desc}</p>\n                                <p className=\"text-emerald-200/40 text-xs\">{item.type} • {item.size}</p>\n                              </div>\n                            </div>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"border-emerald-500/20 text-emerald-300 hover:bg-emerald-900/10\"\n                            >\n                              <Download className=\"w-4 h-4 mr-2\" />\n                              Descargar\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Contract Templates */}\n                    <div>\n                      <h4 className=\"text-emerald-50 font-semibold mb-4 flex items-center gap-2\">\n                        <FileText className=\"w-5 h-5 text-emerald-400\" />\n                        Plantillas de Contratos\n                      </h4>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        {[\n                          { name: \"Contrato Inversión Estructurada\", size: \"186 KB\", type: \"DOCX\", desc: \"Contrato estándar para inversiones estructuradas\" },\n                          { name: \"Plan de Ahorro Estándar\", size: \"142 KB\", type: \"DOCX\", desc: \"Plantilla para planes de ahorro regulares\" },\n                          { name: \"Inversión Patrimonial Elite\", size: \"203 KB\", type: \"DOCX\", desc: \"Contrato para clientes de alta patrimonial\" },\n                          { name: \"Acuerdo Marco Partner\", size: \"167 KB\", type: \"PDF\", desc: \"Documento base de colaboración comercial\" }\n                        ].map((item, index) => (\n                          <div key={index} className=\"flex items-center justify-between p-4 bg-black/30 rounded-lg border border-emerald-500/10 hover:bg-black/40 transition-colors\">\n                            <div className=\"flex items-center gap-3\">\n                              <FileText className=\"w-5 h-5 text-emerald-400\" />\n                              <div>\n                                <p className=\"text-emerald-50 font-medium\">{item.name}</p>\n                                <p className=\"text-emerald-200/60 text-sm\">{item.desc}</p>\n                                <p className=\"text-emerald-200/40 text-xs\">{item.type} • {item.size}</p>\n                              </div>\n                            </div>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"border-emerald-500/20 text-emerald-300 hover:bg-emerald-900/10\"\n                            >\n                              <Download className=\"w-4 h-4 mr-2\" />\n                              Descargar\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Quick Actions */}\n                    <div className=\"pt-6 border-t border-emerald-500/15\">\n                      <div className=\"flex flex-col sm:flex-row gap-4\">\n                        <Button\n                          variant=\"outline\"\n                          className=\"flex-1 border-emerald-500/20 text-emerald-50 hover:bg-emerald-900/10\"\n                        >\n                          <Archive className=\"w-4 h-4 mr-2\" />\n                          Descargar Todo el Material de Marketing\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          className=\"flex-1 border-emerald-500/20 text-emerald-50 hover:bg-emerald-900/10\"\n                        >\n                          <Archive className=\"w-4 h-4 mr-2\" />\n                          Descargar Todas las Plantillas\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        )}\n\n        {/* ===== DEPÓSITO ===== */}\n        {activeTab === \"deposito\" && (\n          <DepositoView \n            setHasActiveDeposit={setHasActiveDeposit} \n            setActiveTab={setActiveTab}\n            setProfileActiveTab={setProfileActiveTab}\n          />\n        )}\n\n        {/* ===== RETIRO ===== */}\n        {activeTab === \"retiro\" && (\n          <RetiroView hasActiveDeposit={hasActiveDeposit} />\n        )}\n      </main>\n\n      {/* Modal para ver documentos */}\n      <Dialog open={showDocumentsDialog} onOpenChange={setShowDocumentsDialog}>\n        <DialogContent className=\"max-w-4xl bg-black/95 border border-emerald-500/20\">\n          <DialogHeader>\n            <DialogTitle className=\"text-emerald-50\">Documentos KYC</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            {viewingDocuments?.map((docUrl, index) => (\n              <div key={index} className=\"flex items-center justify-between p-4 bg-black/40 rounded-lg border border-emerald-500/15\">\n                <div className=\"flex items-center gap-3\">\n                  <FileText className=\"w-5 h-5 text-emerald-400\" />\n                  <span className=\"text-emerald-50\">Documento {index + 1}</span>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => window.open(docUrl, '_blank')}\n                  className=\"border-emerald-500/30 text-emerald-300 hover:bg-emerald-900/10\"\n                >\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Descargar\n                </Button>\n              </div>\n            ))}\n          </div>\n          <div className=\"flex justify-end\">\n            <Button variant=\"outline\" onClick={handleCloseDocumentsDialog} className=\"border-emerald-500/30 text-emerald-300 hover:bg-emerald-900/10\">\n              Cerrar\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\n","size_bytes":139662},"client/src/pages/politica-cookies.tsx":{"content":"import Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\n\nimport { useScrollToTop } from \"@/hooks/useScrollToTop\";\n\nexport default function PoliticaCookies() {\n  useScrollToTop();\n\n  return (\n    <div className={[\n      \"min-h-screen text-white relative\",\n      \"bg-gradient-to-br from-black via-[#0A1713] to-[#0E2A1F]\",\n      \"before:pointer-events-none before:absolute before:inset-0\",\n      \"before:bg-[radial-gradient(80%_60%_at_110%_-10%,rgba(16,185,129,0.18),transparent),radial-gradient(60%_40%_at_-20%_110%,rgba(16,185,129,0.12),transparent)]\",\n    ].join(\" \")}>\n      <div className=\"relative z-10\">\n        <Header />\n        \n        <main className=\"pt-32 pb-16\">\n          <section className=\"py-6 bg-transparent\">\n            <div className=\"container mx-auto px-6\">\n              <div className=\"max-w-4xl mx-auto\">\n                <div className=\"mb-8\">\n                  <h1 className=\"font-playfair text-5xl md:text-6xl font-bold text-white mb-6 text-center\">\n                    <span className=\"text-green\">Política de Cookies</span>\n                  </h1>\n                </div>\n\n                <div className=\"bg-black/70 rounded-2xl border border-transparent p-8 transition-all duration-300 hover:border-green-500 hover:bg-black/50 hover:shadow-lg hover:shadow-green-500/20 cursor-pointer\">\n                  <div className=\"prose prose-invert max-w-none\">\n                    \n                    <h3 className=\"text-2xl font-bold text-green mb-4\">Tipos de cookies</h3>\n                    <p className=\"text-silver-100 mb-6\">\n                      Este sitio web utiliza las siguientes cookies propias:\n                    </p>\n                    <p className=\"text-silver-100 mb-6\">\n                      <strong className=\"text-white\">Cookies de sesión</strong>, para garantizar que los usuarios que escriban comentarios en el blog sean humanos y no aplicaciones automatizadas. De esta forma se combate el spam.\n                    </p>\n\n                    <div className=\"border-t border-silver-500/30 pt-6 mt-6\"></div>\n                    \n                    <p className=\"text-silver-100 mb-4\">\n                      Este sitio web utiliza las siguientes cookies de terceros:\n                    </p>\n                    <p className=\"text-silver-100 mb-4\">\n                      <strong className=\"text-white\">Google Analytics</strong>: Almacena cookies para poder elaborar estadísticas sobre el tráfico y volumen de visitas de esta web. Al utilizar este sitio web está consintiendo el tratamiento de información acerca de usted por Google. Por tanto, el ejercicio de cualquier derecho en este sentido deberá hacerlo comunicando directamente con Google.\n                    </p>\n                    <p className=\"text-silver-100 mb-6\">\n                      <strong className=\"text-white\">Redes sociales</strong>: Cada red social utiliza sus propias cookies para que usted pueda pinchar en botones del tipo Me gusta o Compartir.\n                    </p>\n\n                    <div className=\"border-t border-silver-500/30 pt-6 mt-6\"></div>\n                    \n                    <h3 className=\"text-2xl font-bold text-green mb-4\">Desactivación o eliminación de cookies</h3>\n                    <p className=\"text-silver-100 mb-4\">\n                      En cualquier momento podrá ejercer su derecho de desactivación o eliminación de cookies de este sitio web.\n                    </p>\n                    <p className=\"text-silver-100 mb-4\">\n                      Para saber más sobre las cookies y la forma de desactivación de estas rogamos consulte la página \"Más información sobre Cookies\".\n                    </p>\n                    <p className=\"text-silver-100 mb-6\">\n                      Asimismo, le recomendamos encarecidamente que proceda a la lectura de las diversas políticas por las que se rige esta web y cuyo índice se recoge en el Aviso Legal.\n                    </p>\n\n                    <div className=\"border-t border-silver-500/30 pt-6 mt-8\">\n                      <p className=\"text-silver-300 mb-2\">\n                        <strong>Fecha de actualización:</strong> 15/10/2024\n                      </p>\n                      <p className=\"text-silver-300 mb-4\">\n                        Para más información puede dirigirse a: <span className=\"text-green\">dpo@nakamapartners.com</span>\n                      </p>\n                      <p className=\"text-center text-silver-400 text-sm\">\n                        Copyright <strong className=\"text-white\">NAKAMA&PARTNERS</strong> Todos los derechos reservados.\n                      </p>\n                    </div>\n\n                  </div>\n                </div>\n              </div>\n            </div>\n          </section>\n        </main>\n        \n        <Footer />\n      </div>\n    </div>\n  );\n}","size_bytes":4857},"client/src/pages/politica-seguridad.tsx":{"content":"import Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\n\nimport { useScrollToTop } from \"@/hooks/useScrollToTop\";\n\nexport default function PoliticaSeguridad() {\n  useScrollToTop();\n\n  return (\n    <div className={[\n      \"min-h-screen text-white relative\",\n      \"bg-gradient-to-br from-black via-[#0A1713] to-[#0E2A1F]\",\n      \"before:pointer-events-none before:absolute before:inset-0\",\n      \"before:bg-[radial-gradient(80%_60%_at_110%_-10%,rgba(16,185,129,0.18),transparent),radial-gradient(60%_40%_at_-20%_110%,rgba(16,185,129,0.12),transparent)]\",\n    ].join(\" \")}>\n      <div className=\"relative z-10\">\n        <Header />\n        \n        <main className=\"pt-32 pb-16\">\n          <section className=\"py-6 bg-transparent\">\n            <div className=\"container mx-auto px-6\">\n              <div className=\"max-w-4xl mx-auto\">\n                <div className=\"mb-8\">\n                  <h1 className=\"font-playfair text-5xl md:text-6xl font-bold text-white mb-6 text-center\">\n                    <span className=\"text-green\">Política de Seguridad</span>\n                  </h1>\n                </div>\n\n                <div className=\"bg-black/70 rounded-2xl border border-transparent p-8 transition-all duration-300 hover:border-green-500 hover:bg-black/50 hover:shadow-lg hover:shadow-green-500/20 cursor-pointer\">\n                  <div className=\"prose prose-invert max-w-none\">\n                    \n                    <p className=\"text-xl text-silver-100 mb-6\">\n                      Los principios por los que se rige la seguridad en los sistemas de información de <strong className=\"text-white\">NAKAMA&PARTNERS</strong> son los siguientes:\n                    </p>\n\n                    <ul className=\"text-silver-100 mb-8 ml-6 space-y-4\">\n                      <li><strong className=\"text-white\">Respeto y cumplimiento exacto de la legislación vigente.</strong></li>\n                      <li><strong className=\"text-white\">Gestión de los riesgos.</strong> Que implica el análisis previo, la implantación de medidas a fin de eliminar o, en su caso, minimizarlos, así como la permanente revisión con objeto de mantener actualizada de forma activa dicha gestión.</li>\n                      <li><strong className=\"text-white\">Garantía de confidencialidad en la información,</strong> de forma que solo las personas que deban hacer uso de los datos personales estarán autorizados y posibilitados para hacer usos de estos.</li>\n                      <li><strong className=\"text-white\">Garantía de integridad,</strong> de forma que los datos sean exactos, precisos y los mínimos necesarios.</li>\n                      <li><strong className=\"text-white\">Garantía de disponibilidad,</strong> mediante la puesta en marcha del correspondiente plan de contingencia.</li>\n                      <li><strong className=\"text-white\">Proporcionalidad de las medidas</strong> a fin de equilibrar de forma adecuada la seguridad, el riesgo y el normal funcionamiento de la organización.</li>\n                      <li><strong className=\"text-white\">Actualización y mejora.</strong> Mediante la planificación temporal de las revisiones periódicas del funcionamiento del sistema para su adaptación a las tecnologías y prevención de nuevos riesgos. Así como la implementación de las mejoras definidas a partir de cualquier incidente que se haya podido producir.</li>\n                      <li><strong className=\"text-white\">La responsabilidad</strong> de todas las personas que tienen acceso a la información y la necesaria formación a fin de cumplir de forma eficiente y eficaz todas las políticas existentes en la empresa.</li>\n                    </ul>\n\n                    <div className=\"border-t border-silver-500/30 pt-6 mt-6\"></div>\n                    \n                    <p className=\"text-silver-100 mb-6\">\n                      <strong className=\"text-white\">NAKAMA&PARTNERS</strong> pone en marcha las medidas de seguridad a fin de evitar cualquier incidencia, si bien hay que tener en cuenta que la garantía absoluta de seguridad en internet no existe.\n                    </p>\n\n                    <h3 className=\"text-2xl font-bold text-green mb-4\">Medidas de autoprotección del usuario</h3>\n                    <p className=\"text-silver-100 mb-4\">\n                      El usuario puede y debe tomar ciertas medidas de autoprotección que ayudarán a hacer de este sitio un lugar más seguro. Entre otras:\n                    </p>\n                    <ul className=\"text-silver-100 mb-6 ml-6 space-y-2\">\n                      <li>Utilizar contraseñas fuertes y seguras.</li>\n                      <li>Evitar dar a conocer su usuario y contraseña a terceros.</li>\n                      <li>Mantener su equipo (ordenadores, móviles, tabletas, etc.…) actualizados con la última versión del software.</li>\n                      <li>Revisa las opciones de configuración del software a fin de evitar que el mismo pueda facilitar tus datos de navegación, usuario, contraseña, etc.</li>\n                      <li>Acceder a esta web tecleando directamente la dirección, o bien desde hipervínculos conocidos y de garantías.</li>\n                      <li>No facilitar, bajo ningún concepto, cualquier petición de facilitar tus datos personales o de acceso (usuario o contraseña) por correo electrónico o por teléfono.</li>\n                      <li>Poner en conocimiento de las autoridades cualquier incidencia anormal de la que puedas haber sido objeto, así como consultar de forma periódica la información que se facilita a través de <a href=\"https://www.incibe.es/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-green hover:text-green/80 underline transition-colors\">INCIBE</a>.</li>\n                    </ul>\n\n                    <div className=\"border-t border-silver-500/30 pt-6 mt-8\">\n                      <p className=\"text-silver-300 mb-2\">\n                        <strong>Fecha de actualización:</strong> 15/10/2024\n                      </p>\n                      <p className=\"text-silver-300 mb-4\">\n                        Para más información puede dirigirse a: <span className=\"text-green\">dpo@nakamapartners.com</span>\n                      </p>\n                      <p className=\"text-center text-silver-400 text-sm\">\n                        Copyright <strong className=\"text-white\">NAKAMA&PARTNERS</strong> Todos los derechos reservados.\n                      </p>\n                    </div>\n\n                  </div>\n                </div>\n              </div>\n            </div>\n          </section>\n        </main>\n        \n        <Footer />\n      </div>\n    </div>\n  );\n}","size_bytes":6684},"client/src/pages/politica-uso.tsx":{"content":"import Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\n\nimport { useScrollToTop } from \"@/hooks/useScrollToTop\";\n\nexport default function PoliticaUso() {\n  useScrollToTop();\n\n  return (\n    <div className={[\n      \"min-h-screen text-white relative\",\n      \"bg-gradient-to-br from-black via-[#0A1713] to-[#0E2A1F]\",\n      \"before:pointer-events-none before:absolute before:inset-0\",\n      \"before:bg-[radial-gradient(80%_60%_at_110%_-10%,rgba(16,185,129,0.18),transparent),radial-gradient(60%_40%_at_-20%_110%,rgba(16,185,129,0.12),transparent)]\",\n    ].join(\" \")}>\n      <div className=\"relative z-10\">\n        <Header />\n        \n        <main className=\"pt-32 pb-16\">\n          <section className=\"py-6 bg-transparent\">\n            <div className=\"container mx-auto px-6\">\n              <div className=\"max-w-4xl mx-auto\">\n                <div className=\"mb-8\">\n                  <h1 className=\"font-playfair text-5xl md:text-6xl font-bold text-white mb-6 text-center\">\n                    <span className=\"text-green\">Política de Uso</span>\n                  </h1>\n                </div>\n\n                <div className=\"bg-black/70 rounded-2xl border border-transparent p-8 transition-all duration-300 hover:border-green-500 hover:bg-black/50 hover:shadow-lg hover:shadow-green-500/20 cursor-pointer\">\n                  <div className=\"prose prose-invert max-w-none\">\n                    \n                    <h3 className=\"text-2xl font-bold text-green mb-4\">Titular de los sitios web y aplicaciones móviles</h3>\n                    <p className=\"text-silver-100 mb-6\">\n                      La identificación del titular / propietario se recoge en el \"Aviso Legal\".\n                    </p>\n\n                    <div className=\"border-t border-silver-500/30 pt-6 mt-6\"></div>\n                    \n                    <h3 className=\"text-2xl font-bold text-green mb-4\">Objeto</h3>\n                    <p className=\"text-silver-100 mb-6\">\n                      La política de uso regula las normas por las que se rige esta web y establece los derechos y obligaciones tanto de los usuarios como del propietario.\n                    </p>\n\n                    <div className=\"border-t border-silver-500/30 pt-6 mt-6\"></div>\n                    \n                    <h3 className=\"text-2xl font-bold text-green mb-4\">Usuario</h3>\n                    <p className=\"text-silver-100 mb-4\">\n                      Usuario es toda persona que acceda a la web bajo su responsabilidad exclusiva.\n                    </p>\n                    <p className=\"text-silver-100 mb-6\">\n                      El acceso implica la lectura y aceptación de la presente política, así como de las demás políticas fijadas en el aviso legal.\n                    </p>\n\n                    <div className=\"border-t border-silver-500/30 pt-6 mt-6\"></div>\n                    \n                    <h3 className=\"text-2xl font-bold text-green mb-4\">Derechos y obligaciones del usuario</h3>\n                    <p className=\"text-silver-100 mb-4\">\n                      Navegación, acceso y uso de todos los contenidos gratuitos suministrados en la web, visualizar los elementos, imprimirlos, copiarlos y almacenarlos para un uso personal y privado, así como a aquellos contenidos de pago, una vez que se haya satisfecho el importe correspondiente, fijada para cada servicio en concreto.\n                    </p>\n                    <p className=\"text-silver-100 mb-4\">\n                      La utilización de los servicios y contenidos es única y exclusivamente particular, por lo que no puede obtener beneficio alguno por los mismos, salvo acuerdo previo y por escrito con el titular de los derechos.\n                    </p>\n                    <p className=\"text-silver-100 mb-4\">\n                      A la protección de sus datos personales.\n                    </p>\n                    <p className=\"text-silver-100 mb-4\">\n                      La utilización se debe realizar con respeto a la legislación vigente.\n                    </p>\n                    <p className=\"text-silver-100 mb-4\">\n                      El usuario se compromete, con carácter enunciativo, pero no limitativo, a no utilizar la web:\n                    </p>\n                    <ul className=\"text-silver-100 mb-6 ml-6 space-y-2\">\n                      <li>Incurrir en actividades ilícitas, ilegales o contrarias a la buena fe y al orden público;</li>\n                      <li>Difundir contenidos o propaganda de carácter racista, xenófobo, pornográfico-ilegal, de apología del terrorismo o atentatorio contra los derechos humanos;</li>\n                      <li>Provocar daños en los sistemas físicos y lógicos del sitio web y de sus proveedores o de terceras personas, introducir o difundir en la red virus informáticos o cualesquiera otros sistemas físicos o lógicos que sean susceptibles de provocar los daños anteriormente mencionados;</li>\n                      <li>Intentar acceder y, en su caso, utilizar las cuentas de correo electrónico de otros usuarios y modificar o manipular sus mensajes;</li>\n                      <li>Utilizar la marca, nombres comerciales, así como cualquier otro signo identificativo u otros derechos que se encuentre sujeto a derechos de propiedad intelectual o industrial, sin la previa autorización expresa y por escrito de su propietario.</li>\n                    </ul>\n                    <p className=\"text-silver-100 mb-6\">\n                      A poner en conocimiento de aquella información que considere de interés para el buen funcionamiento del sitio como, por ejemplo, la existencia de enlaces erróneos, información inexacta, etc.\n                    </p>\n\n                    <div className=\"border-t border-silver-500/30 pt-6 mt-6\"></div>\n                    \n                    <h3 className=\"text-2xl font-bold text-green mb-4\">Derechos y obligaciones de NAKAMA&PARTNERS</h3>\n                    <ul className=\"text-silver-100 mb-6 ml-6 space-y-3\">\n                      <li>Actualizar y modificar cualquiera de las políticas recogidas en la web tanto en su contenido como por razones técnicas y de adaptación a las nuevas necesidades legales o técnicas, sin que esta actualización o modificación genere ningún tipo de contraprestación económico o indemnización a los usuarios.</li>\n                      <li>Definir y establecer los usos y contenidos gratuitos, así como, fijar los precios y requisitos para los servicios y contenidos exclusivos.</li>\n                      <li>Impedir el acceso de aquellos usuarios que realicen un uso contrario a lo establecido por las políticas definidas en el sitio, así como eliminar cualquier comentario u opinión vertidos en la misma que sea contrario a dichas políticas.</li>\n                      <li>Cancelar, suprimir o finalizar los servicios y contenidos que considere oportuno, sin previo aviso y sin generar derechos de indemnización, salvo que así se establezca expresamente en los servicios contratados.</li>\n                      <li>Acudir a los tribunales en defensa de sus legítimos derechos, exigiendo las indemnizaciones y contraprestaciones correspondientes.</li>\n                      <li><strong className=\"text-white\">NAKAMA&PARTNERS</strong> no se hace responsable de las opiniones y comentarios realizados por los usuarios de la web.</li>\n                    </ul>\n\n                    <div className=\"border-t border-silver-500/30 pt-6 mt-6\"></div>\n                    \n                    <h3 className=\"text-2xl font-bold text-green mb-4\">Enlaces a páginas de terceros</h3>\n                    <p className=\"text-silver-100 mb-4\">\n                      <strong className=\"text-white\">NAKAMA&PARTNERS</strong> no se hace responsable de los contenidos de todo tipo incluidos en páginas web que puedan estar enlazadas a esta web, así como tampoco ejercer ningún tipo de control sobre dichos sitios, por lo que se exime de toda responsabilidad de cualquier que tuviera lugar con motivo del acceso a los mismos, a modo de ejemplo: modalidad de acceso, seguridad, servicios o contenidos ofrecidos, etc.\n                    </p>\n                    <p className=\"text-silver-100 mb-6\">\n                      La existencia de enlaces o hipervínculos a terceros no implica en ningún caso la existencia de relación, colaboración o compromiso contractual entre dichos terceros y <strong className=\"text-white\">NAKAMA&PARTNERS</strong>.\n                    </p>\n\n                    <div className=\"border-t border-silver-500/30 pt-6 mt-6\"></div>\n                    \n                    <h3 className=\"text-2xl font-bold text-green mb-4\">Enlaces a redes sociales</h3>\n                    <p className=\"text-silver-100 mb-6\">\n                      <strong className=\"text-white\">NAKAMA&PARTNERS</strong> dispone de perfiles creados en diversas redes sociales a las cuales se puede acceder directamente desde la web de <strong className=\"text-white\">NAKAMA&PARTNERS</strong>. La información personal de los usuarios existente en <strong className=\"text-white\">NAKAMA&PARTNERS</strong> no se comparte con ninguna de las otras redes sociales, por lo que el usuario deberá autorizar el seguimiento y acceso en cada una de ellas de forma independiente.\n                    </p>\n\n                    <div className=\"border-t border-silver-500/30 pt-6 mt-6\"></div>\n                    \n                    <h3 className=\"text-2xl font-bold text-green mb-4\">Enlaces desde terceros a NAKAMA&PARTNERS</h3>\n                    <p className=\"text-silver-100 mb-4\">\n                      Los enlaces que terceros puedan realizar a la web de <strong className=\"text-white\">NAKAMA&PARTNERS</strong> se realizan bajo su exclusiva responsabilidad y siempre y cuando el sitio donde estén ubicados respete los principios establecidos en las políticas definidas en esta web, queda expresamente prohibido el establecimiento de enlaces a sitios que contravenga la legislación vigente aplicable en España, así como los usos y costumbres generalmente aceptados.\n                    </p>\n                    <p className=\"text-silver-100 mb-6\">\n                      Dada nuestra imposibilidad para controlar que terceros puedan incorporar un enlace o hipervínculo, <strong className=\"text-white\">NAKAMA&PARTNERS</strong>, excluye de manera expresa su responsabilidad sobre cualquier contenido, forma y fondo de la web o sitio en que dicho enlace haya sido alojado, reservándose el derecho de acudir a los tribunales a fin de exigir la eliminación de dicho enlace.\n                    </p>\n\n                    <div className=\"border-t border-silver-500/30 pt-6 mt-6\"></div>\n                    \n                    <h3 className=\"text-2xl font-bold text-green mb-4\">Exclusión de garantías y responsabilidad</h3>\n                    <p className=\"text-silver-100 mb-6\">\n                      <strong className=\"text-white\">NAKAMA&PARTNERS</strong> no se hace responsable, en ningún caso, de los daños y perjuicios de cualquier naturaleza que pudieran ocasionar, en las situaciones expresamente recogidas en las diversas políticas aprobadas y en concreto y a título enunciativo: errores u omisiones en los contenidos, falta de disponibilidad del portal o la transmisión de virus o programas maliciosos o lesivos en los contenidos, a pesar de haber adoptado todas las medidas tecnológicas necesarias para evitarlo.\n                    </p>\n\n                    <div className=\"border-t border-silver-500/30 pt-6 mt-6\"></div>\n                    \n                    <h3 className=\"text-2xl font-bold text-green mb-4\">Propiedad intelectual e industrial</h3>\n                    <p className=\"text-silver-100 mb-6\">\n                      <strong className=\"text-white\">NAKAMA&PARTNERS</strong>, por sí o como cesionaria, es titular de todos los derechos de propiedad intelectual e industrial de su página web, así como de los elementos contenidos en la misma (a título enunciativo, imágenes, sonido, audio, vídeo, software o textos; marcas o logotipos, combinaciones de colores, estructura y diseño, selección de materiales usados, programas de ordenador necesarios para su funcionamiento, acceso y uso, etc.). Quedan reservados todos los derechos.\n                    </p>\n\n                    <div className=\"border-t border-silver-500/30 pt-6 mt-6\"></div>\n                    \n                    <h3 className=\"text-2xl font-bold text-green mb-4\">Protección de datos</h3>\n                    <p className=\"text-silver-100 mb-6\">\n                      La protección de datos en <strong className=\"text-white\">NAKAMA&PARTNERS</strong> se realiza de acuerdo con la Política de Protección de datos aprobada y que debe ser leída y aceptada por el usuario.\n                    </p>\n\n                    <div className=\"border-t border-silver-500/30 pt-6 mt-6\"></div>\n                    \n                    <h3 className=\"text-2xl font-bold text-green mb-4\">Uso de cookies y web beacons</h3>\n                    <p className=\"text-silver-100 mb-6\">\n                      El uso de las cookies está regulado en la Política de Cookies que el usuario debe leer y aceptar.\n                    </p>\n\n                    <div className=\"border-t border-silver-500/30 pt-6 mt-6\"></div>\n                    \n                    <h3 className=\"text-2xl font-bold text-green mb-4\">Miscelánea</h3>\n                    <p className=\"text-silver-100 mb-4\">\n                      Cuando por decisión judicial o por cambio normativo una cláusula resultase anulada, la misma quedará excluida del contenido de las políticas fijadas, manteniendo el resto de las cláusulas su vigencia, salvo aquellas a las que haga inaplicables.\n                    </p>\n                    <p className=\"text-silver-100 mb-4\">\n                      Solo la aceptación expresa y por escrito por parte de <strong className=\"text-white\">NAKAMA&PARTNERS</strong> de no aplicación de alguna cláusula será válida, quedando por tanto excluida cualquier situación tácita que pueda darse durante la vigencia de estas, pudiendo exigirse por <strong className=\"text-white\">NAKAMA&PARTNERS</strong> el cumplimiento de todas y cada una de ellas en cualquier momento.\n                    </p>\n                    <p className=\"text-silver-100 mb-4\">\n                      El sitio web se regirá por la legislación española y europea vigente en cada momento.\n                    </p>\n                    <p className=\"text-silver-100 mb-6\">\n                      Las partes, con expresa renuncia a su propio fuero, se someten para la resolución de cuantos litigios pudieran derivarse a los Juzgados y Tribunales de la ciudad de la sede social de la entidad propietaria de la web.\n                    </p>\n\n                    <div className=\"border-t border-silver-500/30 pt-6 mt-8\">\n                      <p className=\"text-silver-300 mb-2\">\n                        <strong>Fecha de actualización:</strong> 15/10/2024\n                      </p>\n                      <p className=\"text-silver-300 mb-4\">\n                        Para más información puede dirigirse a: <span className=\"text-green\">dpo@nakamapartners.com</span>\n                      </p>\n                      <p className=\"text-center text-silver-400 text-sm\">\n                        Copyright <strong className=\"text-white\">NAKAMA&PARTNERS</strong> Todos los derechos reservados.\n                      </p>\n                    </div>\n\n                  </div>\n                </div>\n              </div>\n            </div>\n          </section>\n        </main>\n        \n        <Footer />\n      </div>\n    </div>\n  );\n}","size_bytes":15720},"client/src/pages/proteccion-datos-detallada.tsx":{"content":"import Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\n\nimport { useScrollToTop } from \"@/hooks/useScrollToTop\";\n\nexport default function ProteccionDatosDetallada() {\n  useScrollToTop();\n\n  return (\n    <div className={[\n      \"min-h-screen text-white relative\",\n      \"bg-gradient-to-br from-black via-[#0A1713] to-[#0E2A1F]\",\n      \"before:pointer-events-none before:absolute before:inset-0\",\n      \"before:bg-[radial-gradient(80%_60%_at_110%_-10%,rgba(16,185,129,0.18),transparent),radial-gradient(60%_40%_at_-20%_110%,rgba(16,185,129,0.12),transparent)]\",\n    ].join(\" \")}>\n      <div className=\"relative z-10\">\n        <Header />\n        \n        <main className=\"pt-32 pb-16\">\n          <section className=\"py-6 bg-transparent\">\n            <div className=\"container mx-auto px-6\">\n              <div className=\"max-w-4xl mx-auto\">\n                <div className=\"mb-8\">\n                  <h1 className=\"font-playfair text-5xl md:text-6xl font-bold text-white mb-6 text-center\">\n                    <span className=\"text-green\">Protección de Datos</span>\n                  </h1>\n                  <p className=\"text-xl text-silver-100 text-center\">\n                    Información Detallada\n                  </p>\n                </div>\n\n                <div className=\"bg-black/70 rounded-2xl border border-transparent p-8 transition-all duration-300 hover:border-green-500 hover:bg-black/50 hover:shadow-lg hover:shadow-green-500/20 cursor-pointer\">\n                  <div className=\"prose prose-invert max-w-none\">\n                    \n                    <div className=\"space-y-6\">\n                      <div>\n                        <h3 className=\"text-2xl font-bold text-green mb-4\">Información básica</h3>\n                        <p className=\"text-silver-100\">La información básica se encuentra en la capa I <a href=\"/proteccion-datos\" className=\"text-green hover:text-green/80 underline transition-colors\">Protección de datos. Información básica</a>.</p>\n                      </div>\n\n                      <div className=\"border-t border-silver-500/30 pt-6\"></div>\n\n                      <div>\n                        <h3 className=\"text-2xl font-bold text-green mb-4\">Información detallada</h3>\n                        <p className=\"text-silver-100 mb-4\">\n                          Con carácter general el único dato del que se hará uso es de la IP exclusivamente con fines técnicos al objeto de facilitar el uso del usuario de la plataforma, gestionar la seguridad y dotar de calidad a la misma; a excepción de los datos que sean facilitados a través del formulario de contacto o para la contratación de los servicios ofrecidos.\n                        </p>\n                        <p className=\"text-silver-100\">\n                          Las políticas de utilización de esta web son aceptadas libre y voluntariamente tanto por los usuarios como por los visitantes.\n                        </p>\n                      </div>\n\n                      <div className=\"border-t border-silver-500/30 pt-6\"></div>\n\n                      <div>\n                        <h3 className=\"text-2xl font-bold text-green mb-4\">Datos Personales, finalidades y plazo durante el cual se conservan los datos</h3>\n                        <p className=\"text-silver-100 mb-4\">\n                          Solo se solicitan los datos mínimos, adecuados y pertinentes a los fines para los que se requiere.\n                        </p>\n                        <p className=\"text-silver-100 mb-4\">\n                          Los datos recogidos en el formulario de contacto tienen por finalidad responder a las peticiones realizadas por el usuario, el contacto comercial y la prestación de servicios. La duración de estos es indefinida.\n                        </p>\n                        <p className=\"text-silver-100\">\n                          Los datos correspondientes a la IP tienen por objetivo permitir la intercomunicación de los equipos y facilitar la navegación. Su duración es de dos meses. La no facilitación de dicho dato dificultará el acceso a la web por la aplicación de políticas antispam.\n                        </p>\n                      </div>\n\n                      <div className=\"border-t border-silver-500/30 pt-6\"></div>\n\n                      <div>\n                        <h3 className=\"text-2xl font-bold text-green mb-4\">Destinatarios de los Datos personales</h3>\n                        <p className=\"text-silver-100 mb-4\">\n                          No se efectuará comunicación alguna a otra entidad, salvo aquellas comunicaciones que se producen por obligación o necesidad legal a entidades que, entre otras, incluyen:\n                        </p>\n                        <ul className=\"text-silver-100 mb-4 ml-6 space-y-2\">\n                          <li>Las Fuerzas y Cuerpos de Seguridad del Estado, Jueces, Ministerio Fiscal, Juzgados y Tribunales y otras Administraciones Públicas o Autoridades que lo requieran en el ejercicio de sus competencias. Para efectuar la comunicación es necesario requerimiento documentado que resulte pertinente.</li>\n                          <li>Otros, como notarios, procuradores, fedatarios y abogados, para la satisfacción de necesidades jurídicas que pudieran derivarse para la defensa legal de nuestros intereses.</li>\n                        </ul>\n                        <p className=\"text-silver-100\">\n                          No se producen transferencias a terceros países u organizaciones internacionales que no ofrecen garantías adecuadas, excepción hecha de que el usuario facilite un correo electrónico de contacto cuyo proveedor de servicio pueda encontrarse incurso en dicha situación.\n                        </p>\n                      </div>\n\n                      <div className=\"border-t border-silver-500/30 pt-6\"></div>\n\n                      <div>\n                        <h3 className=\"text-2xl font-bold text-green mb-4\">Ejercicio de los derechos del usuario con relación a sus Datos Personales</h3>\n                        <ul className=\"text-silver-100 mb-6 ml-6 space-y-3\">\n                          <li><strong className=\"text-white\">Información:</strong> tiene derecho a ser informado de forma clara ANTES de que datos serán recogidos, qué datos están siendo tratados, con qué finalidad se tratan, donde han conseguido los datos y si los van a comunicar o los han comunicado a alguien.</li>\n                          <li><strong className=\"text-white\">Acceso:</strong> para conocer qué datos están siendo tratados, con qué finalidad se tratan, donde han conseguido los datos y si los van a comunicar o los han comunicado a alguien.</li>\n                          <li><strong className=\"text-white\">Rectificación:</strong> para modificar aquellos datos inexactos o incompletos.</li>\n                          <li><strong className=\"text-white\">Cancelación:</strong> para cancelar los datos inadecuados o excesivos.</li>\n                          <li><strong className=\"text-white\">Oposición:</strong> para exigir que se traten los datos o que dejen de tratarse, aunque sólo en los supuestos que establece la ley.</li>\n                          <li><strong className=\"text-white\">Limitación del tratamiento:</strong> para solicitar que se suspenda el tratamiento de datos en los supuestos que establece la ley, pero manteniendo los mismos a fin de facilitarte el ejercicio de las acciones legales que estimes oportuna.</li>\n                          <li><strong className=\"text-white\">Portabilidad de los datos:</strong> para poder recibir los datos facilitados en un formato electrónico estructurado y de uso habitual y poder transmitirlos a otro responsable.</li>\n                          <li><strong className=\"text-white\">Derecho a no ser objeto de decisiones individualizadas:</strong> con el fin de que no se tome una decisión sobre el usuario que produzca efectos jurídicos o le afecte basada sólo en el tratamiento de tus datos.</li>\n                        </ul>\n                        <p className=\"text-silver-100 mb-4\">\n                          <strong className=\"text-white\">Puede ejercer sus derechos:</strong>\n                        </p>\n                        <p className=\"text-silver-100\">\n                          Por correo electrónico a la dirección a la dirección indicada más abajo.\n                        </p>\n                      </div>\n\n                      <div className=\"border-t border-silver-500/30 pt-6\"></div>\n\n                      <div>\n                        <h3 className=\"text-2xl font-bold text-green mb-4\">Qué información debe aportar para ejercer sus derechos</h3>\n                        <ul className=\"text-silver-100 mb-4 ml-6 space-y-2\">\n                          <li><strong className=\"text-white\">Referencia:</strong> identificar en el asunto que se trata del ejercicio de sus derechos.</li>\n                          <li><strong className=\"text-white\">Contenido de la petición</strong> que realiza, incluyendo aquellos documentos que considere oportuno o necesario en función de estos.</li>\n                          <li><strong className=\"text-white\">Dirección</strong> en la que quiera recibir las sucesivas notificaciones.</li>\n                          <li><strong className=\"text-white\">Titularidad del derecho,</strong> a fin de acreditar la personalidad efectiva de quien efectúa la petición. Dicha acreditación se puede realizar por medios que garanticen la identidad (DNI, firma electrónica o cualquier otro documento). En caso de actuar en representación, poder que acredite la misma.</li>\n                        </ul>\n                      </div>\n\n                      <div className=\"border-t border-silver-500/30 pt-6\"></div>\n\n                      <div>\n                        <h3 className=\"text-2xl font-bold text-green mb-4\">Cuando puede retirar el consentimiento</h3>\n                        <p className=\"text-silver-100\">\n                          Podrá retirar el consentimiento prestado, en cualquier momento, sin que ello afecte a la licitud del tratamiento basado en el consentimiento previo a su retirada.\n                        </p>\n                      </div>\n\n                      <div className=\"border-t border-silver-500/30 pt-6\"></div>\n\n                      <div>\n                        <h3 className=\"text-2xl font-bold text-green mb-4\">Reclamación ante una autoridad de Control</h3>\n                        <p className=\"text-silver-100\">\n                          Tiene derecho a recabar la tutela de la <a href=\"https://www.aepd.es/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-green hover:text-green/80 underline transition-colors\">Agencia Española de Protección de Datos (AEPD)</a>.\n                        </p>\n                      </div>\n\n                      <div className=\"border-t border-silver-500/30 pt-6\"></div>\n\n                      <div>\n                        <h3 className=\"text-2xl font-bold text-green mb-4\">Existencia de Decisiones automatizadas (incluida la elaboración de perfiles)</h3>\n                      </div>\n\n                      <div className=\"border-t border-silver-500/30 pt-6\"></div>\n\n                      <div>\n                        <h3 className=\"text-2xl font-bold text-green mb-4\">Procedencia de los Datos Personales</h3>\n                        <p className=\"text-silver-100\">\n                          Todos los datos se recaban del interesado.\n                        </p>\n                      </div>\n                    </div>\n\n                    <div className=\"border-t border-silver-500/30 pt-6 mt-8\">\n                      <p className=\"text-silver-300 mb-2\">\n                        <strong>Fecha de actualización:</strong> 15/10/2024\n                      </p>\n                      <p className=\"text-silver-300 mb-4\">\n                        Para más información puede dirigirse a: <span className=\"text-green\">dpo@nakamapartners.com</span>\n                      </p>\n                      <p className=\"text-center text-silver-400 text-sm\">\n                        Copyright <strong className=\"text-white\">NAKAMA&PARTNERS</strong> Todos los derechos reservados.\n                      </p>\n                    </div>\n\n                  </div>\n                </div>\n              </div>\n            </div>\n          </section>\n        </main>\n        \n        <Footer />\n      </div>\n    </div>\n  );\n}","size_bytes":12474},"client/src/pages/proteccion-datos.tsx":{"content":"import Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\n\nimport { useScrollToTop } from \"@/hooks/useScrollToTop\";\n\nexport default function ProteccionDatos() {\n  useScrollToTop();\n\n  return (\n    <div className={[\n      \"min-h-screen text-white relative\",\n      \"bg-gradient-to-br from-black via-[#0A1713] to-[#0E2A1F]\",\n      \"before:pointer-events-none before:absolute before:inset-0\",\n      \"before:bg-[radial-gradient(80%_60%_at_110%_-10%,rgba(16,185,129,0.18),transparent),radial-gradient(60%_40%_at_-20%_110%,rgba(16,185,129,0.12),transparent)]\",\n    ].join(\" \")}>\n      <div className=\"relative z-10\">\n        <Header />\n        \n        <main className=\"pt-32 pb-16\">\n          <section className=\"py-6 bg-transparent\">\n            <div className=\"container mx-auto px-6\">\n              <div className=\"max-w-4xl mx-auto\">\n                <div className=\"mb-8\">\n                  <h1 className=\"font-playfair text-5xl md:text-6xl font-bold text-white mb-6 text-center\">\n                    <span className=\"text-green\">Protección de Datos</span>\n                  </h1>\n                  <p className=\"text-xl text-silver-100 text-center\">\n                    Información Básica\n                  </p>\n                </div>\n\n                <div className=\"bg-black/70 rounded-2xl border border-transparent p-8 transition-all duration-300 hover:border-green-500 hover:bg-black/50 hover:shadow-lg hover:shadow-green-500/20 cursor-pointer\">\n                  <div className=\"prose prose-invert max-w-none\">\n                    \n                    <div className=\"space-y-6\">\n                      <div>\n                        <h3 className=\"text-xl font-bold text-green mb-2\">Responsable del tratamiento:</h3>\n                        <p className=\"text-silver-100\"><strong className=\"text-white\">NAKAMA&PARTNERS</strong></p>\n                      </div>\n\n                      <div className=\"border-t border-silver-500/30 pt-6\"></div>\n\n                      <div>\n                        <h3 className=\"text-xl font-bold text-green mb-2\">Finalidades:</h3>\n                        <p className=\"text-silver-100\">Facilitar el uso de la página web, la prestación de los servicios de la empresa, comunicación comercial.</p>\n                      </div>\n\n                      <div className=\"border-t border-silver-500/30 pt-6\"></div>\n\n                      <div>\n                        <h3 className=\"text-xl font-bold text-green mb-2\">Legitimación:</h3>\n                        <p className=\"text-silver-100\">Interés legítimo de las partes, el consentimiento y el contractual cuando las partes firmen el correspondiente contrato.</p>\n                      </div>\n\n                      <div className=\"border-t border-silver-500/30 pt-6\"></div>\n\n                      <div>\n                        <h3 className=\"text-xl font-bold text-green mb-2\">Destinatarios:</h3>\n                        <p className=\"text-silver-100\">No se efectuará comunicación alguna a otras entidades, salvo aquellas comunicaciones que deban producirse por obligación o necesidad legal. No se producen transferencias a terceros países u organizaciones internacionales que no ofrecen garantías adecuadas.</p>\n                      </div>\n\n                      <div className=\"border-t border-silver-500/30 pt-6\"></div>\n\n                      <div>\n                        <h3 className=\"text-xl font-bold text-green mb-2\">Derechos:</h3>\n                        <p className=\"text-silver-100\">Tiene derecho de acceso a sus datos personales, de rectificación o supresión de sus datos personales, de limitación de su tratamiento, a oponerse al tratamiento, a la portabilidad de los datos, de exclusión de decisiones automáticas, así como cualesquiera otros que recoge la legislación vigente. Asimismo, podrá presentar una reclamación ante la <a href=\"https://www.aepd.es/\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-green hover:text-green/80 underline transition-colors\">Agencia Española de Protección de Datos</a>.</p>\n                      </div>\n\n                      <div className=\"border-t border-silver-500/30 pt-6\"></div>\n\n                      <div>\n                        <h3 className=\"text-xl font-bold text-green mb-2\">Conservación de los datos:</h3>\n                        <p className=\"text-silver-100\">Salvo indicación específica la duración es indefinida.</p>\n                      </div>\n\n                      <div className=\"border-t border-silver-500/30 pt-6\"></div>\n\n                      <div>\n                        <h3 className=\"text-xl font-bold text-green mb-2\">Procedencia de los datos:</h3>\n                        <p className=\"text-silver-100\">Los datos proceden del interesado.</p>\n                      </div>\n\n                      <div className=\"border-t border-silver-500/30 pt-6\"></div>\n\n                      <div>\n                        <h3 className=\"text-xl font-bold text-green mb-2\">Más Información:</h3>\n                        <p className=\"text-silver-100\">Protección de Datos. Información Detallada.</p>\n                      </div>\n                    </div>\n\n                    <div className=\"border-t border-silver-500/30 pt-6 mt-8\">\n                      <p className=\"text-silver-300 mb-2\">\n                        <strong>Fecha de actualización:</strong> 15/10/2024\n                      </p>\n                      <p className=\"text-silver-300 mb-4\">\n                        Para más información puede dirigirse a: <span className=\"text-green\">dpo@nakamapartners.com</span>\n                      </p>\n                      <p className=\"text-center text-silver-400 text-sm\">\n                        Copyright <strong className=\"text-white\">NAKAMA&PARTNERS</strong> Todos los derechos reservados.\n                      </p>\n                    </div>\n\n                  </div>\n                </div>\n              </div>\n            </div>\n          </section>\n        </main>\n        \n        <Footer />\n      </div>\n    </div>\n  );\n}","size_bytes":6057},"client/src/utils/generateStatementPDF.ts":{"content":"import {\n  BRAND,\n  setFillRGB,\n  setTextRGB,\n  sectionHeading,\n  kv,\n  drawBrandHeader,\n  drawFooter,\n  eur,\n} from \"./pdfBrand\";\n\nexport type StatementData = {\n  cliente: string;\n  periodo: string;          // Ej. \"Enero 2025\"\n  fecha: string;            // Ej. new Date().toLocaleDateString(\"es-ES\")\n  capitalInvertido: number; // 50000\n  rentabilidadAnualPct: number; // 9.0\n  mesesTranscurridos: number;   // 3\n  mesesTotales: number;         // 12\n  beneficioAcumulado: number;   // 1125\n  valorTotalActual: number;     // 51125\n  detalleMensual: { label: string; importe: number }[]; // Ej. [{label:\"Enero 2025\", importe:375}, ...]\n  proyeccion: { beneficioTotal: number; valorFinal: number }; // Ej. {4500, 54500}\n};\n\nexport async function generateStatementPDF(data: StatementData) {\n  const { jsPDF } = await import(\"jspdf\");\n  const doc = new jsPDF({ unit: \"pt\", format: \"A4\" });\n\n  let y = await drawBrandHeader(doc, \"Estado de Cuenta\", data.periodo);\n  y += 10;\n\n  // Datos del cliente\n  sectionHeading(doc, \"Datos del cliente\", y);\n  y += 24;\n  kv(doc, \"Cliente\", data.cliente, 40, y);\n  kv(doc, \"Fecha\", data.fecha, 220, y);\n  kv(doc, \"Período\", data.periodo, 400, y);\n  y += 56;\n\n  // Resumen de inversión\n  sectionHeading(doc, \"Resumen de inversión\", y);\n  y += 24;\n  const progreso = Math.round((data.mesesTranscurridos / data.mesesTotales) * 100);\n  kv(doc, \"Capital Invertido\", eur(data.capitalInvertido), 40, y);\n  kv(doc, \"Rentabilidad Anual\", `${data.rentabilidadAnualPct.toFixed(1)}%`, 220, y);\n  kv(doc, \"Progreso\", `${data.mesesTranscurridos} de ${data.mesesTotales} (${progreso}%)`, 400, y);\n  y += 40;\n  kv(doc, \"Beneficio Acumulado\", eur(data.beneficioAcumulado), 40, y);\n  kv(doc, \"Valor Total Actual\", eur(data.valorTotalActual), 220, y);\n  y += 56;\n\n  // Detalle del período (tabla)\n  sectionHeading(doc, \"Detalle de rendimiento\", y);\n  y += 24;\n\n  doc.setFontSize(10);\n  setTextRGB(doc, [255, 255, 255]);\n  setFillRGB(doc, BRAND.primary600);\n  doc.rect(40, y - 12, 520, 24, \"F\");\n  doc.text(\"Mes\", 56, y + 2);\n  doc.text(\"Importe\", 320, y + 2);\n\n  const rowH = 24;\n  doc.setFontSize(11);\n  setTextRGB(doc, [15, 23, 42]); // textDark\n  data.detalleMensual.forEach((row, idx) => {\n    const ry = y + rowH * (idx + 1);\n    if (idx % 2 === 0) {\n      setFillRGB(doc, [240, 253, 244]); // fila alterna\n      doc.rect(40, ry - 16, 520, rowH, \"F\");\n    }\n    doc.text(row.label, 56, ry);\n    doc.text(eur(row.importe), 320, ry);\n  });\n\n  y += rowH * data.detalleMensual.length + 40;\n\n  // Proyección\n  sectionHeading(doc, \"Proyección a fin de año\", y);\n  y += 24;\n  kv(doc, \"Beneficio Total Estimado\", eur(data.proyeccion.beneficioTotal), 40, y);\n  kv(doc, \"Valor Final Estimado\", eur(data.proyeccion.valorFinal), 220, y);\n\n  drawFooter(doc);\n  doc.save(`estado-cuenta-nakama-${new Date().toISOString().slice(0, 10)}.pdf`);\n}\n","size_bytes":2858},"client/src/utils/pdfBrand.ts":{"content":"// Reutilizado del diseño de la calculadora\nexport const BRAND = {\n  name: \"Nakama&Partners\",\n  primary: [16, 185, 129] as [number, number, number],    // #10B981\n  primary600: [5, 150, 105] as [number, number, number],  // #059669\n  textDark: [15, 23, 42] as [number, number, number],\n  textMuted: [107, 114, 128] as [number, number, number],\n};\n\nexport function setFillRGB(doc: any, [r, g, b]: [number, number, number]) {\n  doc.setFillColor(r, g, b);\n}\nexport function setStrokeRGB(doc: any, [r, g, b]: [number, number, number]) {\n  doc.setDrawColor(r, g, b);\n}\nexport function setTextRGB(doc: any, [r, g, b]: [number, number, number]) {\n  doc.setTextColor(r, g, b);\n}\nexport function sectionHeading(doc: any, text: string, y: number) {\n  doc.setFontSize(13);\n  setTextRGB(doc, BRAND.primary);\n  doc.text(text.toUpperCase(), 40, y);\n  setStrokeRGB(doc, BRAND.primary);\n  doc.setLineWidth(1);\n  doc.line(40, y + 6, doc.internal.pageSize.getWidth() - 40, y + 6);\n}\nexport function kv(doc: any, label: string, value: string, x: number, y: number) {\n  doc.setFontSize(10);\n  setTextRGB(doc, BRAND.textMuted);\n  doc.text(label, x, y);\n  doc.setFontSize(12);\n  setTextRGB(doc, BRAND.textDark);\n  doc.text(value, x, y + 16);\n}\nexport async function drawBrandHeader(doc: any, title: string, subtitle?: string) {\n  const pageW = doc.internal.pageSize.getWidth();\n  const barH = 64;\n\n  setFillRGB(doc, BRAND.primary600);\n  doc.rect(0, 0, pageW, barH, \"F\");\n\n  doc.setFont(\"helvetica\", \"bold\");\n  doc.setFontSize(12);\n  setTextRGB(doc, [255, 255, 255]);\n  doc.text(BRAND.name, 40, 24);\n\n  doc.setFontSize(18);\n  doc.text(title, 40, 44);\n\n  if (subtitle) {\n    doc.setFont(\"helvetica\", \"normal\");\n    doc.setFontSize(11);\n    setTextRGB(doc, [236, 253, 245]);\n    doc.text(subtitle, 40, 58);\n  }\n\n  setStrokeRGB(doc, BRAND.primary);\n  doc.setLineWidth(2);\n  doc.line(40, barH + 6, pageW - 40, barH + 6);\n\n  return barH + 18; // y inicial recomendado para el contenido\n}\nexport function drawFooter(doc: any) {\n  const pageW = doc.internal.pageSize.getWidth();\n  const pageH = doc.internal.pageSize.getHeight();\n  setTextRGB(doc, BRAND.textMuted);\n  doc.setFontSize(9);\n  const footer = `${BRAND.name} • Documento generado automáticamente • ${new Date().toLocaleString(\"es-ES\")}`;\n  doc.text(footer, pageW / 2, pageH - 24, { align: \"center\" });\n}\nexport function eur(n: number) {\n  return n.toLocaleString(\"es-ES\", { style: \"currency\", currency: \"EUR\" });\n}\n","size_bytes":2452},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/utils/generateAdminStatementPDF.ts":{"content":"import {\n  BRAND,\n  setFillRGB,\n  setTextRGB,\n  sectionHeading,\n  kv,\n  drawBrandHeader,\n  drawFooter,\n  eur,\n} from \"./pdfBrand\";\n\nexport type AdminDashboardData = {\n  fecha: string;\n  periodo: string;\n  totalUsers: number;\n  totalProducts: number;\n  totalContracts: number;\n  pendingKyc: number;\n  financialKpis?: {\n    totalAUM: number;\n    newCapitalMonth: number;\n    withdrawnCapitalMonth: number;\n    netCapitalGrowth: number;\n    averageInvestment: number;\n    activeClients: number;\n    clientRetention: number;\n    monthlyEvolution: Array<{\n      month: string;\n      aum: number;\n      newCapital: number;\n      withdrawals: number;\n      retention: number;\n    }>;\n  };\n  kycStats: Array<{ name: string; value: number; color: string }>;\n  contractsStats: Array<{ name: string; value: number; color: string }>;\n};\n\nexport async function generateAdminStatementPDF(data: AdminDashboardData) {\n  const { jsPDF } = await import(\"jspdf\");\n  const doc = new jsPDF({ unit: \"pt\", format: \"A4\" });\n\n  let y = await drawBrandHeader(doc, \"Reporte Administrativo\", data.periodo);\n  y += 10;\n\n  // Información general del reporte\n  sectionHeading(doc, \"Información del Reporte\", y);\n  y += 24;\n  kv(doc, \"Fecha de Generación\", data.fecha, 40, y);\n  kv(doc, \"Período\", data.periodo, 220, y);\n  kv(doc, \"Tipo de Reporte\", \"Dashboard Administrativo\", 400, y);\n  y += 56;\n\n  // Métricas generales\n  sectionHeading(doc, \"Métricas Generales del Sistema\", y);\n  y += 24;\n  kv(doc, \"Usuarios Totales\", data.totalUsers.toString(), 40, y);\n  kv(doc, \"Productos Totales\", data.totalProducts.toString(), 220, y);\n  kv(doc, \"Contratos Totales\", data.totalContracts.toString(), 400, y);\n  y += 40;\n  kv(doc, \"KYC Pendientes\", data.pendingKyc.toString(), 40, y);\n  y += 56;\n\n  // Distribución de KYC\n  sectionHeading(doc, \"Estado de Verificaciones KYC\", y);\n  y += 24;\n  \n  doc.setFontSize(10);\n  setTextRGB(doc, [255, 255, 255]);\n  setFillRGB(doc, BRAND.primary600);\n  doc.rect(40, y - 12, 520, 24, \"F\");\n  doc.text(\"Estado\", 56, y + 2);\n  doc.text(\"Cantidad\", 320, y + 2);\n  doc.text(\"Porcentaje\", 420, y + 2);\n\n  const rowH = 24;\n  doc.setFontSize(11);\n  setTextRGB(doc, [15, 23, 42]);\n  \n  const totalKyc = data.kycStats.reduce((sum, item) => sum + item.value, 0);\n  data.kycStats.forEach((row, idx) => {\n    const ry = y + rowH * (idx + 1);\n    if (idx % 2 === 0) {\n      setFillRGB(doc, [240, 253, 244]);\n      doc.rect(40, ry - 16, 520, rowH, \"F\");\n    }\n    const percentage = totalKyc > 0 ? ((row.value / totalKyc) * 100).toFixed(1) : \"0.0\";\n    doc.text(row.name, 56, ry);\n    doc.text(row.value.toString(), 320, ry);\n    doc.text(`${percentage}%`, 420, ry);\n  });\n\n  y += rowH * data.kycStats.length + 40;\n\n  // Distribución de Contratos\n  sectionHeading(doc, \"Estado de Contratos\", y);\n  y += 24;\n  \n  doc.setFontSize(10);\n  setTextRGB(doc, [255, 255, 255]);\n  setFillRGB(doc, BRAND.primary600);\n  doc.rect(40, y - 12, 520, 24, \"F\");\n  doc.text(\"Estado\", 56, y + 2);\n  doc.text(\"Cantidad\", 320, y + 2);\n  doc.text(\"Porcentaje\", 420, y + 2);\n\n  doc.setFontSize(11);\n  setTextRGB(doc, [15, 23, 42]);\n  \n  const totalContracts = data.contractsStats.reduce((sum, item) => sum + item.value, 0);\n  data.contractsStats.forEach((row, idx) => {\n    const ry = y + rowH * (idx + 1);\n    if (idx % 2 === 0) {\n      setFillRGB(doc, [240, 253, 244]);\n      doc.rect(40, ry - 16, 520, rowH, \"F\");\n    }\n    const percentage = totalContracts > 0 ? ((row.value / totalContracts) * 100).toFixed(1) : \"0.0\";\n    doc.text(row.name, 56, ry);\n    doc.text(row.value.toString(), 320, ry);\n    doc.text(`${percentage}%`, 420, ry);\n  });\n\n  y += rowH * data.contractsStats.length + 40;\n\n  // KPIs Financieros (si están disponibles)\n  if (data.financialKpis) {\n    // Verificar si necesitamos una nueva página\n    if (y > 650) {\n      doc.addPage();\n      y = 40;\n    }\n\n    sectionHeading(doc, \"KPIs Financieros\", y);\n    y += 24;\n    kv(doc, \"Capital Total Gestionado\", eur(data.financialKpis.totalAUM), 40, y);\n    kv(doc, \"Clientes Activos\", data.financialKpis.activeClients.toString(), 220, y);\n    kv(doc, \"Inversión Promedio\", eur(data.financialKpis.averageInvestment), 400, y);\n    y += 40;\n    kv(doc, \"Nuevo Capital del Mes\", eur(data.financialKpis.newCapitalMonth), 40, y);\n    kv(doc, \"Capital Retirado del Mes\", eur(data.financialKpis.withdrawnCapitalMonth), 220, y);\n    kv(doc, \"Crecimiento Neto\", eur(data.financialKpis.netCapitalGrowth), 400, y);\n    y += 40;\n    kv(doc, \"Retención de Clientes\", `${data.financialKpis.clientRetention.toFixed(1)}%`, 40, y);\n    y += 56;\n\n    // Evolución mensual (últimos 6 meses)\n    if (data.financialKpis.monthlyEvolution && data.financialKpis.monthlyEvolution.length > 0) {\n      sectionHeading(doc, \"Evolución Mensual\", y);\n      y += 24;\n\n      doc.setFontSize(9);\n      setTextRGB(doc, [255, 255, 255]);\n      setFillRGB(doc, BRAND.primary600);\n      doc.rect(40, y - 12, 520, 24, \"F\");\n      doc.text(\"Mes\", 56, y + 2);\n      doc.text(\"AUM\", 156, y + 2);\n      doc.text(\"Nuevo Capital\", 256, y + 2);\n      doc.text(\"Retiros\", 356, y + 2);\n      doc.text(\"Retención %\", 456, y + 2);\n\n      doc.setFontSize(10);\n      setTextRGB(doc, [15, 23, 42]);\n      \n      data.financialKpis.monthlyEvolution.slice(-6).forEach((row, idx) => {\n        const ry = y + rowH * (idx + 1);\n        if (idx % 2 === 0) {\n          setFillRGB(doc, [240, 253, 244]);\n          doc.rect(40, ry - 16, 520, rowH, \"F\");\n        }\n        doc.text(row.month, 56, ry);\n        doc.text(eur(row.aum), 156, ry);\n        doc.text(eur(row.newCapital), 256, ry);\n        doc.text(eur(row.withdrawals), 356, ry);\n        doc.text(`${row.retention.toFixed(1)}%`, 456, ry);\n      });\n    }\n  }\n\n  drawFooter(doc);\n  doc.save(`reporte-admin-nakama-${new Date().toISOString().slice(0, 10)}.pdf`);\n}","size_bytes":5804}},"version":1}